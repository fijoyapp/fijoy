package fijoy

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"errors"
	"fijoy/ent"
	"fijoy/ent/account"
	"fijoy/ent/profile"
	"fijoy/ent/transaction"
	"fijoy/ent/user"
	"fijoy/internal/util/auth"
	"fijoy/internal/util/pointer"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/shopspring/decimal"
)

// Amount is the resolver for the amount field.
func (r *accountResolver) Amount(ctx context.Context, obj *ent.Account) (string, error) {
	return obj.Amount.String(), nil
}

// Value is the resolver for the value field.
func (r *accountResolver) Value(ctx context.Context, obj *ent.Account) (string, error) {
	return obj.Value.String(), nil
}

// FxRate is the resolver for the fxRate field.
func (r *accountResolver) FxRate(ctx context.Context, obj *ent.Account) (*string, error) {
	return pointer.To(obj.FxRate.String()), nil
}

// Balance is the resolver for the balance field.
func (r *accountResolver) Balance(ctx context.Context, obj *ent.Account) (string, error) {
	return obj.Balance.String(), nil
}

// NetWorthGoal is the resolver for the netWorthGoal field.
func (r *profileResolver) NetWorthGoal(ctx context.Context, obj *ent.Profile) (string, error) {
	return obj.NetWorthGoal.String(), nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*ent.AccountConnection, error) {
	authData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.Account.Query().
		Where(account.HasProfileWith(profile.ID(authData.ProfileId))).
		Paginate(ctx, after, first, before, last)
}

// Profiles is the resolver for the profiles field.
func (r *queryResolver) Profiles(ctx context.Context) ([]*ent.Profile, error) {
	authData, err := auth.GetUserDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.Profile.Query().Where(profile.HasUserWith(user.ID(authData.UserId))).All(ctx)
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*ent.TransactionConnection, error) {
	authData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.Transaction.Query().
		Where(transaction.HasProfileWith(profile.ID(authData.ProfileId))).
		Paginate(ctx, after, first, before, last)
}

// Balance is the resolver for the balance field.
func (r *transactionResolver) Balance(ctx context.Context, obj *ent.Transaction) (string, error) {
	return obj.Balance.String(), nil
}

// Amount is the resolver for the amount field.
func (r *transactionEntryResolver) Amount(ctx context.Context, obj *ent.TransactionEntry) (string, error) {
	panic(fmt.Errorf("not implemented: Amount - amount"))
}

// Value is the resolver for the value field.
func (r *transactionEntryResolver) Value(ctx context.Context, obj *ent.TransactionEntry) (string, error) {
	panic(fmt.Errorf("not implemented: Value - value"))
}

// FxRate is the resolver for the fxRate field.
func (r *transactionEntryResolver) FxRate(ctx context.Context, obj *ent.TransactionEntry) (*string, error) {
	panic(fmt.Errorf("not implemented: FxRate - fxRate"))
}

// Balance is the resolver for the balance field.
func (r *transactionEntryResolver) Balance(ctx context.Context, obj *ent.TransactionEntry) (string, error) {
	panic(fmt.Errorf("not implemented: Balance - balance"))
}

// Amount is the resolver for the amount field.
func (r *createAccountInputResolver) Amount(ctx context.Context, obj *ent.CreateAccountInput, data string) error {
	if data == "" {
		return errors.New("amount is required")
	}

	dec, err := decimal.NewFromString(data)
	if err != nil {
		return fmt.Errorf("invalid amount: %w", err)
	}

	obj.Amount = dec
	return nil
}

// NetWorthGoal is the resolver for the netWorthGoal field.
func (r *createProfileInputResolver) NetWorthGoal(ctx context.Context, obj *ent.CreateProfileInput, data string) error {
	if data == "" {
		return errors.New("net worth goal is required")
	}

	dec, err := decimal.NewFromString(data)
	if err != nil {
		return fmt.Errorf("invalid net worth goal: %w", err)
	}

	obj.NetWorthGoal = dec
	return nil
}

// Amount is the resolver for the amount field.
func (r *updateAccountInputResolver) Amount(ctx context.Context, obj *ent.UpdateAccountInput, data *string) error {
	if data == nil || *data == "" {
		return nil
	}

	dec, err := decimal.NewFromString(*data)
	if err != nil {
		return fmt.Errorf("invalid amount: %w", err)
	}

	obj.Amount = &dec
	return nil
}

// NetWorthGoal is the resolver for the netWorthGoal field.
func (r *updateProfileInputResolver) NetWorthGoal(ctx context.Context, obj *ent.UpdateProfileInput, data *string) error {
	if data == nil || *data == "" {
		return nil
	}

	dec, err := decimal.NewFromString(*data)
	if err != nil {
		return fmt.Errorf("invalid net worth goal: %w", err)
	}

	obj.NetWorthGoal = &dec
	return nil
}

// Account returns AccountResolver implementation.
func (r *Resolver) Account() AccountResolver { return &accountResolver{r} }

// Profile returns ProfileResolver implementation.
func (r *Resolver) Profile() ProfileResolver { return &profileResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Transaction returns TransactionResolver implementation.
func (r *Resolver) Transaction() TransactionResolver { return &transactionResolver{r} }

// TransactionEntry returns TransactionEntryResolver implementation.
func (r *Resolver) TransactionEntry() TransactionEntryResolver { return &transactionEntryResolver{r} }

// CreateAccountInput returns CreateAccountInputResolver implementation.
func (r *Resolver) CreateAccountInput() CreateAccountInputResolver {
	return &createAccountInputResolver{r}
}

// CreateProfileInput returns CreateProfileInputResolver implementation.
func (r *Resolver) CreateProfileInput() CreateProfileInputResolver {
	return &createProfileInputResolver{r}
}

// UpdateAccountInput returns UpdateAccountInputResolver implementation.
func (r *Resolver) UpdateAccountInput() UpdateAccountInputResolver {
	return &updateAccountInputResolver{r}
}

// UpdateProfileInput returns UpdateProfileInputResolver implementation.
func (r *Resolver) UpdateProfileInput() UpdateProfileInputResolver {
	return &updateProfileInputResolver{r}
}

type accountResolver struct{ *Resolver }
type profileResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type transactionResolver struct{ *Resolver }
type transactionEntryResolver struct{ *Resolver }
type createAccountInputResolver struct{ *Resolver }
type createProfileInputResolver struct{ *Resolver }
type updateAccountInputResolver struct{ *Resolver }
type updateProfileInputResolver struct{ *Resolver }
