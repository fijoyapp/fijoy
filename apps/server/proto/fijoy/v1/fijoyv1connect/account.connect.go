// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fijoy/v1/account.proto

package fijoyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fijoy/proto/fijoy/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "fijoy.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceCreateAccountProcedure is the fully-qualified name of the AccountService's
	// CreateAccount RPC.
	AccountServiceCreateAccountProcedure = "/fijoy.v1.AccountService/CreateAccount"
	// AccountServiceGetAccountsProcedure is the fully-qualified name of the AccountService's
	// GetAccounts RPC.
	AccountServiceGetAccountsProcedure = "/fijoy.v1.AccountService/GetAccounts"
	// AccountServiceGetAccountProcedure is the fully-qualified name of the AccountService's GetAccount
	// RPC.
	AccountServiceGetAccountProcedure = "/fijoy.v1.AccountService/GetAccount"
	// AccountServiceUpdateAccountProcedure is the fully-qualified name of the AccountService's
	// UpdateAccount RPC.
	AccountServiceUpdateAccountProcedure = "/fijoy.v1.AccountService/UpdateAccount"
	// AccountServiceDeleteAccountProcedure is the fully-qualified name of the AccountService's
	// DeleteAccount RPC.
	AccountServiceDeleteAccountProcedure = "/fijoy.v1.AccountService/DeleteAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accountServiceServiceDescriptor             = v1.File_fijoy_v1_account_proto.Services().ByName("AccountService")
	accountServiceCreateAccountMethodDescriptor = accountServiceServiceDescriptor.Methods().ByName("CreateAccount")
	accountServiceGetAccountsMethodDescriptor   = accountServiceServiceDescriptor.Methods().ByName("GetAccounts")
	accountServiceGetAccountMethodDescriptor    = accountServiceServiceDescriptor.Methods().ByName("GetAccount")
	accountServiceUpdateAccountMethodDescriptor = accountServiceServiceDescriptor.Methods().ByName("UpdateAccount")
	accountServiceDeleteAccountMethodDescriptor = accountServiceServiceDescriptor.Methods().ByName("DeleteAccount")
)

// AccountServiceClient is a client for the fijoy.v1.AccountService service.
type AccountServiceClient interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.Account], error)
	GetAccounts(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.AccountList], error)
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.Account], error)
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.Account], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewAccountServiceClient constructs a client for the fijoy.v1.AccountService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountServiceClient{
		createAccount: connect.NewClient[v1.CreateAccountRequest, v1.Account](
			httpClient,
			baseURL+AccountServiceCreateAccountProcedure,
			connect.WithSchema(accountServiceCreateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAccounts: connect.NewClient[emptypb.Empty, v1.AccountList](
			httpClient,
			baseURL+AccountServiceGetAccountsProcedure,
			connect.WithSchema(accountServiceGetAccountsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.Account](
			httpClient,
			baseURL+AccountServiceGetAccountProcedure,
			connect.WithSchema(accountServiceGetAccountMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateAccount: connect.NewClient[v1.UpdateAccountRequest, v1.Account](
			httpClient,
			baseURL+AccountServiceUpdateAccountProcedure,
			connect.WithSchema(accountServiceUpdateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, emptypb.Empty](
			httpClient,
			baseURL+AccountServiceDeleteAccountProcedure,
			connect.WithSchema(accountServiceDeleteAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	createAccount *connect.Client[v1.CreateAccountRequest, v1.Account]
	getAccounts   *connect.Client[emptypb.Empty, v1.AccountList]
	getAccount    *connect.Client[v1.GetAccountRequest, v1.Account]
	updateAccount *connect.Client[v1.UpdateAccountRequest, v1.Account]
	deleteAccount *connect.Client[v1.DeleteAccountRequest, emptypb.Empty]
}

// CreateAccount calls fijoy.v1.AccountService.CreateAccount.
func (c *accountServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.Account], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// GetAccounts calls fijoy.v1.AccountService.GetAccounts.
func (c *accountServiceClient) GetAccounts(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.AccountList], error) {
	return c.getAccounts.CallUnary(ctx, req)
}

// GetAccount calls fijoy.v1.AccountService.GetAccount.
func (c *accountServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.Account], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// UpdateAccount calls fijoy.v1.AccountService.UpdateAccount.
func (c *accountServiceClient) UpdateAccount(ctx context.Context, req *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.Account], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// DeleteAccount calls fijoy.v1.AccountService.DeleteAccount.
func (c *accountServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the fijoy.v1.AccountService service.
type AccountServiceHandler interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.Account], error)
	GetAccounts(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.AccountList], error)
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.Account], error)
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.Account], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceCreateAccountHandler := connect.NewUnaryHandler(
		AccountServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(accountServiceCreateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountsHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountsProcedure,
		svc.GetAccounts,
		connect.WithSchema(accountServiceGetAccountsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(accountServiceGetAccountMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceUpdateAccountHandler := connect.NewUnaryHandler(
		AccountServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		connect.WithSchema(accountServiceUpdateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AccountServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(accountServiceDeleteAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fijoy.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceCreateAccountProcedure:
			accountServiceCreateAccountHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountsProcedure:
			accountServiceGetAccountsHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountProcedure:
			accountServiceGetAccountHandler.ServeHTTP(w, r)
		case AccountServiceUpdateAccountProcedure:
			accountServiceUpdateAccountHandler.ServeHTTP(w, r)
		case AccountServiceDeleteAccountProcedure:
			accountServiceDeleteAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.Account], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.AccountService.CreateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccounts(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.AccountList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.AccountService.GetAccounts is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.Account], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.AccountService.GetAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.Account], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.AccountService.UpdateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.AccountService.DeleteAccount is not implemented"))
}
