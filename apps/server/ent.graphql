directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Account implements Node {
  id: ID!
  name: String!
  accountType: AccountAccountType!
  symbol: String!
  symbolType: AccountSymbolType!
  amount: String!
  value: String!
  fxRate: String
  balance: String!
  archived: Boolean!
  createdAt: Time!
  updatedAt: Time!
  profile: Profile!
  transaction: [Transaction!]
}
"""
AccountAccountType is enum for the field account_type
"""
enum AccountAccountType @goModel(model: "fijoy/ent/account.AccountType") {
  liquidity
  investment
  property
  receivable
  liability
}
"""
AccountSymbolType is enum for the field symbol_type
"""
enum AccountSymbolType @goModel(model: "fijoy/ent/account.SymbolType") {
  currency
  stock
  crypto
}
"""
CreateAccountInput is used for create Account object.
Input was generated by ent.
"""
input CreateAccountInput {
  name: String!
  accountType: AccountAccountType!
  symbol: String!
  symbolType: AccountSymbolType!
  amount: String!
  value: String!
  fxRate: String
  balance: String!
  archived: Boolean
  createdAt: Time
  updatedAt: Time
  profileID: ID!
  transactionIDs: [ID!]
}
"""
CreateProfileInput is used for create Profile object.
Input was generated by ent.
"""
input CreateProfileInput {
  locale: String
  currencies: String!
  netWorthGoal: String!
  createdAt: Time
  updatedAt: Time
  userID: ID!
  accountIDs: [ID!]
  transactionIDs: [ID!]
}
"""
CreateTransactionInput is used for create Transaction object.
Input was generated by ent.
"""
input CreateTransactionInput {
  amount: String!
  note: String
  datetime: Time
  createdAt: Time
  updatedAt: Time
  profileID: ID!
  accountID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  email: String!
  createdAt: Time
  updatedAt: Time
  userKeyIDs: [ID!]
  profileIDs: [ID!]
}
"""
CreateUserKeyInput is used for create UserKey object.
Input was generated by ent.
"""
input CreateUserKeyInput {
  hashedPassword: String
  userID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "fijoy/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Profile implements Node {
  id: ID!
  locale: String
  currencies: String!
  netWorthGoal: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  account: [Account!]
  transaction: [Transaction!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  accounts: [Account!]!
  transactions: [Transaction!]!
}
"""
The builtin Time type
"""
scalar Time
type Transaction implements Node {
  id: ID!
  amount: String!
  note: String
  datetime: Time!
  createdAt: Time!
  updatedAt: Time!
  profile: Profile!
  account: Account!
}
type User implements Node {
  id: ID!
  email: String!
  createdAt: Time!
  updatedAt: Time!
  userKey: [UserKey!]
  profile: [Profile!]
}
type UserKey implements Node {
  id: ID!
  hashedPassword: String
  user: User!
}
