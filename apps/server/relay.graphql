directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(
  model: String
  models: [String!]
  forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

type Account implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  name: String!
  accountType: AccountAccountType!
  currencySymbol: String!
  ticker: String!
  tickerType: AccountTickerType!
  """
  The unit amount of share or money in this account
  """
  amount: String!
  """
  The value of 1 share in the native currency. If this is just a currency account, then this field will be 1
  """
  value: String!
  """
  The exchange rate from the native currency to user's default display currency
  """
  fxRate: String
  """
  The total balance of this account in user's display currency
  """
  balance: String!
  archived: Boolean!
  profile: Profile!
  transactionEntry: [TransactionEntry!]
}

"""
AccountAccountType is enum for the field account_type
"""
enum AccountAccountType @goModel(model: "fijoy/ent/account.AccountType") {
  liquidity
  investment
  property
  receivable
  liability
}

"""
A connection to a list of items.
"""
type AccountConnection {
  """
  A list of edges.
  """
  edges: [AccountEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AccountEdge {
  """
  The item at the end of the edge.
  """
  node: Account
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
AccountTickerType is enum for the field ticker_type
"""
enum AccountTickerType @goModel(model: "fijoy/ent/account.TickerType") {
  currency
  stock
  crypto
}

"""
CreateAccountInput is used for create Account object.
Input was generated by ent.
"""
input CreateAccountInput {
  createTime: Time
  updateTime: Time
  name: String!
  accountType: AccountAccountType!
  currencySymbol: String!
  ticker: String!
  tickerType: AccountTickerType!
  """
  The unit amount of share or money in this account
  """
  amount: String!
  archived: Boolean
  transactionEntryIDs: [ID!]
}

"""
CreateProfileInput is used for create Profile object.
Input was generated by ent.
"""
input CreateProfileInput {
  createTime: Time
  updateTime: Time
  currencies: [String!]!
  netWorthGoal: String!
  accountIDs: [ID!]
  transactionIDs: [ID!]
}

"""
CreateTransactionEntryInput is used for create TransactionEntry object.
Input was generated by ent.
"""
input CreateTransactionEntryInput {
  createTime: Time
  updateTime: Time
  """
  The unit amount of share or money in this transaction entry
  """
  amount: String!
  accountID: ID!
  transactionID: ID!
}

"""
CreateTransactionInput is used for create Transaction object.
Input was generated by ent.
"""
input CreateTransactionInput {
  createTime: Time
  updateTime: Time
  note: String
  datetime: Time
  transactionEntryIDs: [ID!]
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createTime: Time
  updateTime: Time
  email: String!
  userKeyIDs: [ID!]
  profileIDs: [ID!]
}

"""
CreateUserKeyInput is used for create UserKey object.
Input was generated by ent.
"""
input CreateUserKeyInput {
  createTime: Time
  updateTime: Time
  hashedPassword: String
  userID: ID!
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "fijoy/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

type Profile implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  locale: String!
  currencies: [String!]!
  netWorthGoal: String!
  user: User!
  account: [Account!]
  transaction: [Transaction!]
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  accounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor
    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AccountConnection!
  profiles: [Profile!]!
  transactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor
    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TransactionConnection!
  user: User!
  currencies: [Currency!]!
}

"""
The builtin Time type
"""
scalar Time

type Transaction implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """
  The total balance of this transaction entry in user's display currency. Note that this is an aggregate of all the transaction entries belong to this transaction
  """
  balance: String!
  note: String
  datetime: Time!
  profile: Profile!
  transactionEntries: [TransactionEntry!]
}

"""
A connection to a list of items.
"""
type TransactionConnection {
  """
  A list of edges.
  """
  edges: [TransactionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  The item at the end of the edge.
  """
  node: Transaction
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

type TransactionEntry implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """
  The unit amount of share or money in this transaction entry
  """
  amount: String!
  """
  The value of 1 share in the native currency. If this is just a currency account, then this field will be 1
  """
  value: String!
  """
  The exchange rate from the native currency to user's default display currency
  """
  fxRate: String
  """
  The total balance of this transaction entry in user's display currency
  """
  balance: String!
  account: Account!
  transaction: Transaction!
}

"""
UpdateAccountInput is used for update Account object.
Input was generated by ent.
"""
input UpdateAccountInput {
  updateTime: Time
  name: String
  """
  The unit amount of share or money in this account
  """
  amount: String
  archived: Boolean
  addTransactionEntryIDs: [ID!]
  removeTransactionEntryIDs: [ID!]
  clearTransactionEntry: Boolean
}

"""
UpdateProfileInput is used for update Profile object.
Input was generated by ent.
"""
input UpdateProfileInput {
  updateTime: Time
  currencies: [String!]
  appendCurrencies: [String!]
  netWorthGoal: String
  addAccountIDs: [ID!]
  removeAccountIDs: [ID!]
  clearAccount: Boolean
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  clearTransaction: Boolean
}

"""
UpdateTransactionEntryInput is used for update TransactionEntry object.
Input was generated by ent.
"""
input UpdateTransactionEntryInput {
  updateTime: Time
  """
  The unit amount of share or money in this transaction entry
  """
  amount: String
  accountID: ID
  transactionID: ID
}

"""
UpdateTransactionInput is used for update Transaction object.
Input was generated by ent.
"""
input UpdateTransactionInput {
  updateTime: Time
  note: String
  clearNote: Boolean
  datetime: Time
  addTransactionEntryIDs: [ID!]
  removeTransactionEntryIDs: [ID!]
  clearTransactionEntries: Boolean
}

type User implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  email: String!
  userKey: [UserKey!]
  profile: [Profile!]
}

type UserKey implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  hashedPassword: String
  user: User!
}

type Currency {
  code: String!
  locale: String!
}

input CreateTransactionWithTransactionEntriesInput {
  note: String
  datetime: Time
  transactionEntries: [CreateTransactionEntryInput!]!
}

type Mutation {
  createProfile(input: CreateProfileInput!): Profile!
  updateProfile(id: ID!, input: UpdateProfileInput!): Profile!
  createAccount(input: CreateAccountInput!): Account!
  createTransactionWithTransactionEntries(
    input: CreateTransactionWithTransactionEntriesInput!
  ): Transaction!
  createTransactionEntry(input: CreateTransactionEntryInput!): TransactionEntry!
}

schema {
  query: Query
  mutation: Mutation
}
