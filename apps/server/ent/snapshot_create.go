// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/profile"
	"fijoy/ent/snapshot"
	"fijoy/ent/snapshotaccount"
	"fijoy/ent/snapshotfxrate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SnapshotCreate is the builder for creating a Snapshot entity.
type SnapshotCreate struct {
	config
	mutation *SnapshotMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *SnapshotCreate) SetCreateTime(v time.Time) *SnapshotCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *SnapshotCreate) SetNillableCreateTime(v *time.Time) *SnapshotCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *SnapshotCreate) SetUpdateTime(v time.Time) *SnapshotCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *SnapshotCreate) SetNillableUpdateTime(v *time.Time) *SnapshotCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetNote sets the "note" field.
func (_c *SnapshotCreate) SetNote(v string) *SnapshotCreate {
	_c.mutation.SetNote(v)
	return _c
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_c *SnapshotCreate) SetNillableNote(v *string) *SnapshotCreate {
	if v != nil {
		_c.SetNote(*v)
	}
	return _c
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (_c *SnapshotCreate) SetProfileID(id int) *SnapshotCreate {
	_c.mutation.SetProfileID(id)
	return _c
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_c *SnapshotCreate) SetProfile(v *Profile) *SnapshotCreate {
	return _c.SetProfileID(v.ID)
}

// AddSnapshotAccountIDs adds the "snapshot_accounts" edge to the SnapshotAccount entity by IDs.
func (_c *SnapshotCreate) AddSnapshotAccountIDs(ids ...int) *SnapshotCreate {
	_c.mutation.AddSnapshotAccountIDs(ids...)
	return _c
}

// AddSnapshotAccounts adds the "snapshot_accounts" edges to the SnapshotAccount entity.
func (_c *SnapshotCreate) AddSnapshotAccounts(v ...*SnapshotAccount) *SnapshotCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSnapshotAccountIDs(ids...)
}

// AddSnapshotFxRateIDs adds the "snapshot_fx_rates" edge to the SnapshotFXRate entity by IDs.
func (_c *SnapshotCreate) AddSnapshotFxRateIDs(ids ...int) *SnapshotCreate {
	_c.mutation.AddSnapshotFxRateIDs(ids...)
	return _c
}

// AddSnapshotFxRates adds the "snapshot_fx_rates" edges to the SnapshotFXRate entity.
func (_c *SnapshotCreate) AddSnapshotFxRates(v ...*SnapshotFXRate) *SnapshotCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSnapshotFxRateIDs(ids...)
}

// Mutation returns the SnapshotMutation object of the builder.
func (_c *SnapshotCreate) Mutation() *SnapshotMutation {
	return _c.mutation
}

// Save creates the Snapshot in the database.
func (_c *SnapshotCreate) Save(ctx context.Context) (*Snapshot, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SnapshotCreate) SaveX(ctx context.Context) *Snapshot {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SnapshotCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SnapshotCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SnapshotCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := snapshot.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := snapshot.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SnapshotCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Snapshot.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Snapshot.update_time"`)}
	}
	if len(_c.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "Snapshot.profile"`)}
	}
	return nil
}

func (_c *SnapshotCreate) sqlSave(ctx context.Context) (*Snapshot, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SnapshotCreate) createSpec() (*Snapshot, *sqlgraph.CreateSpec) {
	var (
		_node = &Snapshot{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(snapshot.Table, sqlgraph.NewFieldSpec(snapshot.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(snapshot.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(snapshot.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.Note(); ok {
		_spec.SetField(snapshot.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if nodes := _c.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   snapshot.ProfileTable,
			Columns: []string{snapshot.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_snapshots = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SnapshotAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotAccountsTable,
			Columns: []string{snapshot.SnapshotAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SnapshotFxRatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotFxRatesTable,
			Columns: []string{snapshot.SnapshotFxRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotfxrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SnapshotCreateBulk is the builder for creating many Snapshot entities in bulk.
type SnapshotCreateBulk struct {
	config
	err      error
	builders []*SnapshotCreate
}

// Save creates the Snapshot entities in the database.
func (_c *SnapshotCreateBulk) Save(ctx context.Context) ([]*Snapshot, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Snapshot, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SnapshotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SnapshotCreateBulk) SaveX(ctx context.Context) []*Snapshot {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SnapshotCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SnapshotCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
