// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/predicate"
	"fijoy/ent/profile"
	"fijoy/ent/transaction"
	"fijoy/ent/transactionentry"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (_u *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *TransactionUpdate) SetUpdateTime(v time.Time) *TransactionUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNote sets the "note" field.
func (_u *TransactionUpdate) SetNote(v string) *TransactionUpdate {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableNote(v *string) *TransactionUpdate {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// ClearNote clears the value of the "note" field.
func (_u *TransactionUpdate) ClearNote() *TransactionUpdate {
	_u.mutation.ClearNote()
	return _u
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (_u *TransactionUpdate) SetProfileID(id int) *TransactionUpdate {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *TransactionUpdate) SetProfile(v *Profile) *TransactionUpdate {
	return _u.SetProfileID(v.ID)
}

// AddTransactionEntryIDs adds the "transaction_entries" edge to the TransactionEntry entity by IDs.
func (_u *TransactionUpdate) AddTransactionEntryIDs(ids ...int) *TransactionUpdate {
	_u.mutation.AddTransactionEntryIDs(ids...)
	return _u
}

// AddTransactionEntries adds the "transaction_entries" edges to the TransactionEntry entity.
func (_u *TransactionUpdate) AddTransactionEntries(v ...*TransactionEntry) *TransactionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTransactionEntryIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (_u *TransactionUpdate) Mutation() *TransactionMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *TransactionUpdate) ClearProfile() *TransactionUpdate {
	_u.mutation.ClearProfile()
	return _u
}

// ClearTransactionEntries clears all "transaction_entries" edges to the TransactionEntry entity.
func (_u *TransactionUpdate) ClearTransactionEntries() *TransactionUpdate {
	_u.mutation.ClearTransactionEntries()
	return _u
}

// RemoveTransactionEntryIDs removes the "transaction_entries" edge to TransactionEntry entities by IDs.
func (_u *TransactionUpdate) RemoveTransactionEntryIDs(ids ...int) *TransactionUpdate {
	_u.mutation.RemoveTransactionEntryIDs(ids...)
	return _u
}

// RemoveTransactionEntries removes "transaction_entries" edges to TransactionEntry entities.
func (_u *TransactionUpdate) RemoveTransactionEntries(v ...*TransactionEntry) *TransactionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTransactionEntryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TransactionUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransactionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TransactionUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := transaction.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransactionUpdate) check() error {
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Transaction.profile"`)
	}
	return nil
}

func (_u *TransactionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(transaction.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(transaction.FieldNote, field.TypeString, value)
	}
	if _u.mutation.NoteCleared() {
		_spec.ClearField(transaction.FieldNote, field.TypeString)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ProfileTable,
			Columns: []string{transaction.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ProfileTable,
			Columns: []string{transaction.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TransactionEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TransactionEntriesTable,
			Columns: []string{transaction.TransactionEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTransactionEntriesIDs(); len(nodes) > 0 && !_u.mutation.TransactionEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TransactionEntriesTable,
			Columns: []string{transaction.TransactionEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TransactionEntriesTable,
			Columns: []string{transaction.TransactionEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *TransactionUpdateOne) SetUpdateTime(v time.Time) *TransactionUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNote sets the "note" field.
func (_u *TransactionUpdateOne) SetNote(v string) *TransactionUpdateOne {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableNote(v *string) *TransactionUpdateOne {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// ClearNote clears the value of the "note" field.
func (_u *TransactionUpdateOne) ClearNote() *TransactionUpdateOne {
	_u.mutation.ClearNote()
	return _u
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (_u *TransactionUpdateOne) SetProfileID(id int) *TransactionUpdateOne {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *TransactionUpdateOne) SetProfile(v *Profile) *TransactionUpdateOne {
	return _u.SetProfileID(v.ID)
}

// AddTransactionEntryIDs adds the "transaction_entries" edge to the TransactionEntry entity by IDs.
func (_u *TransactionUpdateOne) AddTransactionEntryIDs(ids ...int) *TransactionUpdateOne {
	_u.mutation.AddTransactionEntryIDs(ids...)
	return _u
}

// AddTransactionEntries adds the "transaction_entries" edges to the TransactionEntry entity.
func (_u *TransactionUpdateOne) AddTransactionEntries(v ...*TransactionEntry) *TransactionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTransactionEntryIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (_u *TransactionUpdateOne) Mutation() *TransactionMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *TransactionUpdateOne) ClearProfile() *TransactionUpdateOne {
	_u.mutation.ClearProfile()
	return _u
}

// ClearTransactionEntries clears all "transaction_entries" edges to the TransactionEntry entity.
func (_u *TransactionUpdateOne) ClearTransactionEntries() *TransactionUpdateOne {
	_u.mutation.ClearTransactionEntries()
	return _u
}

// RemoveTransactionEntryIDs removes the "transaction_entries" edge to TransactionEntry entities by IDs.
func (_u *TransactionUpdateOne) RemoveTransactionEntryIDs(ids ...int) *TransactionUpdateOne {
	_u.mutation.RemoveTransactionEntryIDs(ids...)
	return _u
}

// RemoveTransactionEntries removes "transaction_entries" edges to TransactionEntry entities.
func (_u *TransactionUpdateOne) RemoveTransactionEntries(v ...*TransactionEntry) *TransactionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTransactionEntryIDs(ids...)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (_u *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Transaction entity.
func (_u *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TransactionUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := transaction.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransactionUpdateOne) check() error {
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Transaction.profile"`)
	}
	return nil
}

func (_u *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(transaction.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(transaction.FieldNote, field.TypeString, value)
	}
	if _u.mutation.NoteCleared() {
		_spec.ClearField(transaction.FieldNote, field.TypeString)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ProfileTable,
			Columns: []string{transaction.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ProfileTable,
			Columns: []string{transaction.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TransactionEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TransactionEntriesTable,
			Columns: []string{transaction.TransactionEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTransactionEntriesIDs(); len(nodes) > 0 && !_u.mutation.TransactionEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TransactionEntriesTable,
			Columns: []string{transaction.TransactionEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TransactionEntriesTable,
			Columns: []string{transaction.TransactionEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
