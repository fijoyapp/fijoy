// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fijoy/ent/account"
	"fijoy/ent/predicate"
	"fijoy/ent/transaction"
	"fijoy/ent/transactionentry"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionEntryQuery is the builder for querying TransactionEntry entities.
type TransactionEntryQuery struct {
	config
	ctx             *QueryContext
	order           []transactionentry.OrderOption
	inters          []Interceptor
	predicates      []predicate.TransactionEntry
	withAccount     *AccountQuery
	withTransaction *TransactionQuery
	withFKs         bool
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*TransactionEntry) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TransactionEntryQuery builder.
func (teq *TransactionEntryQuery) Where(ps ...predicate.TransactionEntry) *TransactionEntryQuery {
	teq.predicates = append(teq.predicates, ps...)
	return teq
}

// Limit the number of records to be returned by this query.
func (teq *TransactionEntryQuery) Limit(limit int) *TransactionEntryQuery {
	teq.ctx.Limit = &limit
	return teq
}

// Offset to start from.
func (teq *TransactionEntryQuery) Offset(offset int) *TransactionEntryQuery {
	teq.ctx.Offset = &offset
	return teq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (teq *TransactionEntryQuery) Unique(unique bool) *TransactionEntryQuery {
	teq.ctx.Unique = &unique
	return teq
}

// Order specifies how the records should be ordered.
func (teq *TransactionEntryQuery) Order(o ...transactionentry.OrderOption) *TransactionEntryQuery {
	teq.order = append(teq.order, o...)
	return teq
}

// QueryAccount chains the current query on the "account" edge.
func (teq *TransactionEntryQuery) QueryAccount() *AccountQuery {
	query := (&AccountClient{config: teq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := teq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := teq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(transactionentry.Table, transactionentry.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transactionentry.AccountTable, transactionentry.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(teq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransaction chains the current query on the "transaction" edge.
func (teq *TransactionEntryQuery) QueryTransaction() *TransactionQuery {
	query := (&TransactionClient{config: teq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := teq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := teq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(transactionentry.Table, transactionentry.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transactionentry.TransactionTable, transactionentry.TransactionColumn),
		)
		fromU = sqlgraph.SetNeighbors(teq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TransactionEntry entity from the query.
// Returns a *NotFoundError when no TransactionEntry was found.
func (teq *TransactionEntryQuery) First(ctx context.Context) (*TransactionEntry, error) {
	nodes, err := teq.Limit(1).All(setContextOp(ctx, teq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{transactionentry.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (teq *TransactionEntryQuery) FirstX(ctx context.Context) *TransactionEntry {
	node, err := teq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TransactionEntry ID from the query.
// Returns a *NotFoundError when no TransactionEntry ID was found.
func (teq *TransactionEntryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = teq.Limit(1).IDs(setContextOp(ctx, teq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{transactionentry.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (teq *TransactionEntryQuery) FirstIDX(ctx context.Context) string {
	id, err := teq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TransactionEntry entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TransactionEntry entity is found.
// Returns a *NotFoundError when no TransactionEntry entities are found.
func (teq *TransactionEntryQuery) Only(ctx context.Context) (*TransactionEntry, error) {
	nodes, err := teq.Limit(2).All(setContextOp(ctx, teq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{transactionentry.Label}
	default:
		return nil, &NotSingularError{transactionentry.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (teq *TransactionEntryQuery) OnlyX(ctx context.Context) *TransactionEntry {
	node, err := teq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TransactionEntry ID in the query.
// Returns a *NotSingularError when more than one TransactionEntry ID is found.
// Returns a *NotFoundError when no entities are found.
func (teq *TransactionEntryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = teq.Limit(2).IDs(setContextOp(ctx, teq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{transactionentry.Label}
	default:
		err = &NotSingularError{transactionentry.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (teq *TransactionEntryQuery) OnlyIDX(ctx context.Context) string {
	id, err := teq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TransactionEntries.
func (teq *TransactionEntryQuery) All(ctx context.Context) ([]*TransactionEntry, error) {
	ctx = setContextOp(ctx, teq.ctx, ent.OpQueryAll)
	if err := teq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TransactionEntry, *TransactionEntryQuery]()
	return withInterceptors[[]*TransactionEntry](ctx, teq, qr, teq.inters)
}

// AllX is like All, but panics if an error occurs.
func (teq *TransactionEntryQuery) AllX(ctx context.Context) []*TransactionEntry {
	nodes, err := teq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TransactionEntry IDs.
func (teq *TransactionEntryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if teq.ctx.Unique == nil && teq.path != nil {
		teq.Unique(true)
	}
	ctx = setContextOp(ctx, teq.ctx, ent.OpQueryIDs)
	if err = teq.Select(transactionentry.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (teq *TransactionEntryQuery) IDsX(ctx context.Context) []string {
	ids, err := teq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (teq *TransactionEntryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, teq.ctx, ent.OpQueryCount)
	if err := teq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, teq, querierCount[*TransactionEntryQuery](), teq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (teq *TransactionEntryQuery) CountX(ctx context.Context) int {
	count, err := teq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (teq *TransactionEntryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, teq.ctx, ent.OpQueryExist)
	switch _, err := teq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (teq *TransactionEntryQuery) ExistX(ctx context.Context) bool {
	exist, err := teq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TransactionEntryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (teq *TransactionEntryQuery) Clone() *TransactionEntryQuery {
	if teq == nil {
		return nil
	}
	return &TransactionEntryQuery{
		config:          teq.config,
		ctx:             teq.ctx.Clone(),
		order:           append([]transactionentry.OrderOption{}, teq.order...),
		inters:          append([]Interceptor{}, teq.inters...),
		predicates:      append([]predicate.TransactionEntry{}, teq.predicates...),
		withAccount:     teq.withAccount.Clone(),
		withTransaction: teq.withTransaction.Clone(),
		// clone intermediate query.
		sql:  teq.sql.Clone(),
		path: teq.path,
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (teq *TransactionEntryQuery) WithAccount(opts ...func(*AccountQuery)) *TransactionEntryQuery {
	query := (&AccountClient{config: teq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	teq.withAccount = query
	return teq
}

// WithTransaction tells the query-builder to eager-load the nodes that are connected to
// the "transaction" edge. The optional arguments are used to configure the query builder of the edge.
func (teq *TransactionEntryQuery) WithTransaction(opts ...func(*TransactionQuery)) *TransactionEntryQuery {
	query := (&TransactionClient{config: teq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	teq.withTransaction = query
	return teq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Amount decimal.Decimal `json:"amount,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TransactionEntry.Query().
//		GroupBy(transactionentry.FieldAmount).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (teq *TransactionEntryQuery) GroupBy(field string, fields ...string) *TransactionEntryGroupBy {
	teq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TransactionEntryGroupBy{build: teq}
	grbuild.flds = &teq.ctx.Fields
	grbuild.label = transactionentry.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Amount decimal.Decimal `json:"amount,omitempty"`
//	}
//
//	client.TransactionEntry.Query().
//		Select(transactionentry.FieldAmount).
//		Scan(ctx, &v)
func (teq *TransactionEntryQuery) Select(fields ...string) *TransactionEntrySelect {
	teq.ctx.Fields = append(teq.ctx.Fields, fields...)
	sbuild := &TransactionEntrySelect{TransactionEntryQuery: teq}
	sbuild.label = transactionentry.Label
	sbuild.flds, sbuild.scan = &teq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TransactionEntrySelect configured with the given aggregations.
func (teq *TransactionEntryQuery) Aggregate(fns ...AggregateFunc) *TransactionEntrySelect {
	return teq.Select().Aggregate(fns...)
}

func (teq *TransactionEntryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range teq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, teq); err != nil {
				return err
			}
		}
	}
	for _, f := range teq.ctx.Fields {
		if !transactionentry.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if teq.path != nil {
		prev, err := teq.path(ctx)
		if err != nil {
			return err
		}
		teq.sql = prev
	}
	return nil
}

func (teq *TransactionEntryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TransactionEntry, error) {
	var (
		nodes       = []*TransactionEntry{}
		withFKs     = teq.withFKs
		_spec       = teq.querySpec()
		loadedTypes = [2]bool{
			teq.withAccount != nil,
			teq.withTransaction != nil,
		}
	)
	if teq.withAccount != nil || teq.withTransaction != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, transactionentry.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TransactionEntry).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TransactionEntry{config: teq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(teq.modifiers) > 0 {
		_spec.Modifiers = teq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, teq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := teq.withAccount; query != nil {
		if err := teq.loadAccount(ctx, query, nodes, nil,
			func(n *TransactionEntry, e *Account) { n.Edges.Account = e }); err != nil {
			return nil, err
		}
	}
	if query := teq.withTransaction; query != nil {
		if err := teq.loadTransaction(ctx, query, nodes, nil,
			func(n *TransactionEntry, e *Transaction) { n.Edges.Transaction = e }); err != nil {
			return nil, err
		}
	}
	for i := range teq.loadTotal {
		if err := teq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (teq *TransactionEntryQuery) loadAccount(ctx context.Context, query *AccountQuery, nodes []*TransactionEntry, init func(*TransactionEntry), assign func(*TransactionEntry, *Account)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TransactionEntry)
	for i := range nodes {
		if nodes[i].account_transaction_entry == nil {
			continue
		}
		fk := *nodes[i].account_transaction_entry
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(account.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_transaction_entry" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (teq *TransactionEntryQuery) loadTransaction(ctx context.Context, query *TransactionQuery, nodes []*TransactionEntry, init func(*TransactionEntry), assign func(*TransactionEntry, *Transaction)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TransactionEntry)
	for i := range nodes {
		if nodes[i].transaction_transaction_entries == nil {
			continue
		}
		fk := *nodes[i].transaction_transaction_entries
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(transaction.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "transaction_transaction_entries" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (teq *TransactionEntryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := teq.querySpec()
	if len(teq.modifiers) > 0 {
		_spec.Modifiers = teq.modifiers
	}
	_spec.Node.Columns = teq.ctx.Fields
	if len(teq.ctx.Fields) > 0 {
		_spec.Unique = teq.ctx.Unique != nil && *teq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, teq.driver, _spec)
}

func (teq *TransactionEntryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(transactionentry.Table, transactionentry.Columns, sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeString))
	_spec.From = teq.sql
	if unique := teq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if teq.path != nil {
		_spec.Unique = true
	}
	if fields := teq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactionentry.FieldID)
		for i := range fields {
			if fields[i] != transactionentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := teq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := teq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := teq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := teq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (teq *TransactionEntryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(teq.driver.Dialect())
	t1 := builder.Table(transactionentry.Table)
	columns := teq.ctx.Fields
	if len(columns) == 0 {
		columns = transactionentry.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if teq.sql != nil {
		selector = teq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if teq.ctx.Unique != nil && *teq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range teq.predicates {
		p(selector)
	}
	for _, p := range teq.order {
		p(selector)
	}
	if offset := teq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := teq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TransactionEntryGroupBy is the group-by builder for TransactionEntry entities.
type TransactionEntryGroupBy struct {
	selector
	build *TransactionEntryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tegb *TransactionEntryGroupBy) Aggregate(fns ...AggregateFunc) *TransactionEntryGroupBy {
	tegb.fns = append(tegb.fns, fns...)
	return tegb
}

// Scan applies the selector query and scans the result into the given value.
func (tegb *TransactionEntryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tegb.build.ctx, ent.OpQueryGroupBy)
	if err := tegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TransactionEntryQuery, *TransactionEntryGroupBy](ctx, tegb.build, tegb, tegb.build.inters, v)
}

func (tegb *TransactionEntryGroupBy) sqlScan(ctx context.Context, root *TransactionEntryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tegb.fns))
	for _, fn := range tegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tegb.flds)+len(tegb.fns))
		for _, f := range *tegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TransactionEntrySelect is the builder for selecting fields of TransactionEntry entities.
type TransactionEntrySelect struct {
	*TransactionEntryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tes *TransactionEntrySelect) Aggregate(fns ...AggregateFunc) *TransactionEntrySelect {
	tes.fns = append(tes.fns, fns...)
	return tes
}

// Scan applies the selector query and scans the result into the given value.
func (tes *TransactionEntrySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tes.ctx, ent.OpQuerySelect)
	if err := tes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TransactionEntryQuery, *TransactionEntrySelect](ctx, tes.TransactionEntryQuery, tes, tes.inters, v)
}

func (tes *TransactionEntrySelect) sqlScan(ctx context.Context, root *TransactionEntryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tes.fns))
	for _, fn := range tes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
