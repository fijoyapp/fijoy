// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/account"
	"fijoy/ent/category"
	"fijoy/ent/profile"
	"fijoy/ent/snapshot"
	"fijoy/ent/transaction"
	"fijoy/ent/user"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *ProfileCreate) SetCreateTime(v time.Time) *ProfileCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *ProfileCreate) SetNillableCreateTime(v *time.Time) *ProfileCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *ProfileCreate) SetUpdateTime(v time.Time) *ProfileCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *ProfileCreate) SetNillableUpdateTime(v *time.Time) *ProfileCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *ProfileCreate) SetName(v string) *ProfileCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetLocale sets the "locale" field.
func (_c *ProfileCreate) SetLocale(v string) *ProfileCreate {
	_c.mutation.SetLocale(v)
	return _c
}

// SetCurrencies sets the "currencies" field.
func (_c *ProfileCreate) SetCurrencies(v []string) *ProfileCreate {
	_c.mutation.SetCurrencies(v)
	return _c
}

// SetNetWorthGoal sets the "net_worth_goal" field.
func (_c *ProfileCreate) SetNetWorthGoal(v decimal.Decimal) *ProfileCreate {
	_c.mutation.SetNetWorthGoal(v)
	return _c
}

// SetID sets the "id" field.
func (_c *ProfileCreate) SetID(v int) *ProfileCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_c *ProfileCreate) AddUserIDs(ids ...int) *ProfileCreate {
	_c.mutation.AddUserIDs(ids...)
	return _c
}

// AddUsers adds the "users" edges to the User entity.
func (_c *ProfileCreate) AddUsers(v ...*User) *ProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserIDs(ids...)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (_c *ProfileCreate) AddAccountIDs(ids ...int) *ProfileCreate {
	_c.mutation.AddAccountIDs(ids...)
	return _c
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (_c *ProfileCreate) AddAccounts(v ...*Account) *ProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAccountIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (_c *ProfileCreate) AddTransactionIDs(ids ...int) *ProfileCreate {
	_c.mutation.AddTransactionIDs(ids...)
	return _c
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (_c *ProfileCreate) AddTransactions(v ...*Transaction) *ProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTransactionIDs(ids...)
}

// AddSnapshotIDs adds the "snapshots" edge to the Snapshot entity by IDs.
func (_c *ProfileCreate) AddSnapshotIDs(ids ...int) *ProfileCreate {
	_c.mutation.AddSnapshotIDs(ids...)
	return _c
}

// AddSnapshots adds the "snapshots" edges to the Snapshot entity.
func (_c *ProfileCreate) AddSnapshots(v ...*Snapshot) *ProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSnapshotIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (_c *ProfileCreate) AddCategoryIDs(ids ...int) *ProfileCreate {
	_c.mutation.AddCategoryIDs(ids...)
	return _c
}

// AddCategories adds the "categories" edges to the Category entity.
func (_c *ProfileCreate) AddCategories(v ...*Category) *ProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCategoryIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (_c *ProfileCreate) Mutation() *ProfileMutation {
	return _c.mutation
}

// Save creates the Profile in the database.
func (_c *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProfileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProfileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProfileCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := profile.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := profile.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProfileCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Profile.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Profile.update_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Profile.name"`)}
	}
	if _, ok := _c.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "Profile.locale"`)}
	}
	if _, ok := _c.mutation.Currencies(); !ok {
		return &ValidationError{Name: "currencies", err: errors.New(`ent: missing required field "Profile.currencies"`)}
	}
	if _, ok := _c.mutation.NetWorthGoal(); !ok {
		return &ValidationError{Name: "net_worth_goal", err: errors.New(`ent: missing required field "Profile.net_worth_goal"`)}
	}
	if len(_c.mutation.UsersIDs()) == 0 {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "Profile.users"`)}
	}
	return nil
}

func (_c *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(profile.Table, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(profile.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(profile.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(profile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Locale(); ok {
		_spec.SetField(profile.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := _c.mutation.Currencies(); ok {
		_spec.SetField(profile.FieldCurrencies, field.TypeJSON, value)
		_node.Currencies = value
	}
	if value, ok := _c.mutation.NetWorthGoal(); ok {
		_spec.SetField(profile.FieldNetWorthGoal, field.TypeFloat64, value)
		_node.NetWorthGoal = value
	}
	if nodes := _c.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.UsersTable,
			Columns: profile.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.AccountsTable,
			Columns: []string{profile.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.TransactionsTable,
			Columns: []string{profile.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SnapshotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.SnapshotsTable,
			Columns: []string{profile.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.CategoriesTable,
			Columns: []string{profile.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	err      error
	builders []*ProfileCreate
}

// Save creates the Profile entities in the database.
func (_c *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Profile, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProfileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
