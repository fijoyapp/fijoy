// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/account"
	"fijoy/ent/profile"
	"fijoy/ent/snapshot"
	"fijoy/ent/snapshotaccount"
	"fijoy/ent/snapshotfxrate"
	"fijoy/ent/transaction"
	"fijoy/ent/transactionentry"
	"fijoy/ent/user"
	"fijoy/ent/userkey"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AccountEdge is the edge representation of Account.
type AccountEdge struct {
	Node   *Account `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AccountConnection is the connection containing edges to Account.
type AccountConnection struct {
	Edges      []*AccountEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AccountConnection) build(nodes []*Account, pager *accountPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Account
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Account {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Account {
			return nodes[i]
		}
	}
	c.Edges = make([]*AccountEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AccountPaginateOption enables pagination customization.
type AccountPaginateOption func(*accountPager) error

// WithAccountOrder configures pagination ordering.
func WithAccountOrder(order *AccountOrder) AccountPaginateOption {
	if order == nil {
		order = DefaultAccountOrder
	}
	o := *order
	return func(pager *accountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAccountFilter configures pagination filter.
func WithAccountFilter(filter func(*AccountQuery) (*AccountQuery, error)) AccountPaginateOption {
	return func(pager *accountPager) error {
		if filter == nil {
			return errors.New("AccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type accountPager struct {
	reverse bool
	order   *AccountOrder
	filter  func(*AccountQuery) (*AccountQuery, error)
}

func newAccountPager(opts []AccountPaginateOption, reverse bool) (*accountPager, error) {
	pager := &accountPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAccountOrder
	}
	return pager, nil
}

func (p *accountPager) applyFilter(query *AccountQuery) (*AccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *accountPager) toCursor(_m *Account) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *accountPager) applyCursors(query *AccountQuery, after, before *Cursor) (*AccountQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAccountOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *accountPager) applyOrder(query *AccountQuery) *AccountQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAccountOrder.Field {
		query = query.Order(DefaultAccountOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *accountPager) orderExpr(query *AccountQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAccountOrder.Field {
			b.Comma().Ident(DefaultAccountOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Account.
func (_m *AccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AccountPaginateOption,
) (*AccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAccountPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &AccountConnection{Edges: []*AccountEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AccountOrderField defines the ordering field of Account.
type AccountOrderField struct {
	// Value extracts the ordering value from the given Account.
	Value    func(*Account) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) account.OrderOption
	toCursor func(*Account) Cursor
}

// AccountOrder defines the ordering of Account.
type AccountOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AccountOrderField `json:"field"`
}

// DefaultAccountOrder is the default ordering of Account.
var DefaultAccountOrder = &AccountOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AccountOrderField{
		Value: func(_m *Account) (ent.Value, error) {
			return _m.ID, nil
		},
		column: account.FieldID,
		toTerm: account.ByID,
		toCursor: func(_m *Account) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Account into AccountEdge.
func (_m *Account) ToEdge(order *AccountOrder) *AccountEdge {
	if order == nil {
		order = DefaultAccountOrder
	}
	return &AccountEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// ProfileEdge is the edge representation of Profile.
type ProfileEdge struct {
	Node   *Profile `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ProfileConnection is the connection containing edges to Profile.
type ProfileConnection struct {
	Edges      []*ProfileEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ProfileConnection) build(nodes []*Profile, pager *profilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Profile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Profile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Profile {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProfileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProfileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProfilePaginateOption enables pagination customization.
type ProfilePaginateOption func(*profilePager) error

// WithProfileOrder configures pagination ordering.
func WithProfileOrder(order *ProfileOrder) ProfilePaginateOption {
	if order == nil {
		order = DefaultProfileOrder
	}
	o := *order
	return func(pager *profilePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProfileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProfileFilter configures pagination filter.
func WithProfileFilter(filter func(*ProfileQuery) (*ProfileQuery, error)) ProfilePaginateOption {
	return func(pager *profilePager) error {
		if filter == nil {
			return errors.New("ProfileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type profilePager struct {
	reverse bool
	order   *ProfileOrder
	filter  func(*ProfileQuery) (*ProfileQuery, error)
}

func newProfilePager(opts []ProfilePaginateOption, reverse bool) (*profilePager, error) {
	pager := &profilePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProfileOrder
	}
	return pager, nil
}

func (p *profilePager) applyFilter(query *ProfileQuery) (*ProfileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *profilePager) toCursor(_m *Profile) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *profilePager) applyCursors(query *ProfileQuery, after, before *Cursor) (*ProfileQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultProfileOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *profilePager) applyOrder(query *ProfileQuery) *ProfileQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultProfileOrder.Field {
		query = query.Order(DefaultProfileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *profilePager) orderExpr(query *ProfileQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultProfileOrder.Field {
			b.Comma().Ident(DefaultProfileOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Profile.
func (_m *ProfileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProfilePaginateOption,
) (*ProfileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProfilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &ProfileConnection{Edges: []*ProfileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ProfileOrderField defines the ordering field of Profile.
type ProfileOrderField struct {
	// Value extracts the ordering value from the given Profile.
	Value    func(*Profile) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) profile.OrderOption
	toCursor func(*Profile) Cursor
}

// ProfileOrder defines the ordering of Profile.
type ProfileOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ProfileOrderField `json:"field"`
}

// DefaultProfileOrder is the default ordering of Profile.
var DefaultProfileOrder = &ProfileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ProfileOrderField{
		Value: func(_m *Profile) (ent.Value, error) {
			return _m.ID, nil
		},
		column: profile.FieldID,
		toTerm: profile.ByID,
		toCursor: func(_m *Profile) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Profile into ProfileEdge.
func (_m *Profile) ToEdge(order *ProfileOrder) *ProfileEdge {
	if order == nil {
		order = DefaultProfileOrder
	}
	return &ProfileEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// SnapshotEdge is the edge representation of Snapshot.
type SnapshotEdge struct {
	Node   *Snapshot `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// SnapshotConnection is the connection containing edges to Snapshot.
type SnapshotConnection struct {
	Edges      []*SnapshotEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *SnapshotConnection) build(nodes []*Snapshot, pager *snapshotPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Snapshot
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Snapshot {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Snapshot {
			return nodes[i]
		}
	}
	c.Edges = make([]*SnapshotEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SnapshotEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SnapshotPaginateOption enables pagination customization.
type SnapshotPaginateOption func(*snapshotPager) error

// WithSnapshotOrder configures pagination ordering.
func WithSnapshotOrder(order *SnapshotOrder) SnapshotPaginateOption {
	if order == nil {
		order = DefaultSnapshotOrder
	}
	o := *order
	return func(pager *snapshotPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSnapshotOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSnapshotFilter configures pagination filter.
func WithSnapshotFilter(filter func(*SnapshotQuery) (*SnapshotQuery, error)) SnapshotPaginateOption {
	return func(pager *snapshotPager) error {
		if filter == nil {
			return errors.New("SnapshotQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type snapshotPager struct {
	reverse bool
	order   *SnapshotOrder
	filter  func(*SnapshotQuery) (*SnapshotQuery, error)
}

func newSnapshotPager(opts []SnapshotPaginateOption, reverse bool) (*snapshotPager, error) {
	pager := &snapshotPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSnapshotOrder
	}
	return pager, nil
}

func (p *snapshotPager) applyFilter(query *SnapshotQuery) (*SnapshotQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *snapshotPager) toCursor(_m *Snapshot) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *snapshotPager) applyCursors(query *SnapshotQuery, after, before *Cursor) (*SnapshotQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSnapshotOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *snapshotPager) applyOrder(query *SnapshotQuery) *SnapshotQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSnapshotOrder.Field {
		query = query.Order(DefaultSnapshotOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *snapshotPager) orderExpr(query *SnapshotQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSnapshotOrder.Field {
			b.Comma().Ident(DefaultSnapshotOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Snapshot.
func (_m *SnapshotQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SnapshotPaginateOption,
) (*SnapshotConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSnapshotPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &SnapshotConnection{Edges: []*SnapshotEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SnapshotOrderField defines the ordering field of Snapshot.
type SnapshotOrderField struct {
	// Value extracts the ordering value from the given Snapshot.
	Value    func(*Snapshot) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) snapshot.OrderOption
	toCursor func(*Snapshot) Cursor
}

// SnapshotOrder defines the ordering of Snapshot.
type SnapshotOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *SnapshotOrderField `json:"field"`
}

// DefaultSnapshotOrder is the default ordering of Snapshot.
var DefaultSnapshotOrder = &SnapshotOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SnapshotOrderField{
		Value: func(_m *Snapshot) (ent.Value, error) {
			return _m.ID, nil
		},
		column: snapshot.FieldID,
		toTerm: snapshot.ByID,
		toCursor: func(_m *Snapshot) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Snapshot into SnapshotEdge.
func (_m *Snapshot) ToEdge(order *SnapshotOrder) *SnapshotEdge {
	if order == nil {
		order = DefaultSnapshotOrder
	}
	return &SnapshotEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// SnapshotAccountEdge is the edge representation of SnapshotAccount.
type SnapshotAccountEdge struct {
	Node   *SnapshotAccount `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// SnapshotAccountConnection is the connection containing edges to SnapshotAccount.
type SnapshotAccountConnection struct {
	Edges      []*SnapshotAccountEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *SnapshotAccountConnection) build(nodes []*SnapshotAccount, pager *snapshotaccountPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SnapshotAccount
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SnapshotAccount {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SnapshotAccount {
			return nodes[i]
		}
	}
	c.Edges = make([]*SnapshotAccountEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SnapshotAccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SnapshotAccountPaginateOption enables pagination customization.
type SnapshotAccountPaginateOption func(*snapshotaccountPager) error

// WithSnapshotAccountOrder configures pagination ordering.
func WithSnapshotAccountOrder(order *SnapshotAccountOrder) SnapshotAccountPaginateOption {
	if order == nil {
		order = DefaultSnapshotAccountOrder
	}
	o := *order
	return func(pager *snapshotaccountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSnapshotAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSnapshotAccountFilter configures pagination filter.
func WithSnapshotAccountFilter(filter func(*SnapshotAccountQuery) (*SnapshotAccountQuery, error)) SnapshotAccountPaginateOption {
	return func(pager *snapshotaccountPager) error {
		if filter == nil {
			return errors.New("SnapshotAccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type snapshotaccountPager struct {
	reverse bool
	order   *SnapshotAccountOrder
	filter  func(*SnapshotAccountQuery) (*SnapshotAccountQuery, error)
}

func newSnapshotAccountPager(opts []SnapshotAccountPaginateOption, reverse bool) (*snapshotaccountPager, error) {
	pager := &snapshotaccountPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSnapshotAccountOrder
	}
	return pager, nil
}

func (p *snapshotaccountPager) applyFilter(query *SnapshotAccountQuery) (*SnapshotAccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *snapshotaccountPager) toCursor(_m *SnapshotAccount) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *snapshotaccountPager) applyCursors(query *SnapshotAccountQuery, after, before *Cursor) (*SnapshotAccountQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSnapshotAccountOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *snapshotaccountPager) applyOrder(query *SnapshotAccountQuery) *SnapshotAccountQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSnapshotAccountOrder.Field {
		query = query.Order(DefaultSnapshotAccountOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *snapshotaccountPager) orderExpr(query *SnapshotAccountQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSnapshotAccountOrder.Field {
			b.Comma().Ident(DefaultSnapshotAccountOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SnapshotAccount.
func (_m *SnapshotAccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SnapshotAccountPaginateOption,
) (*SnapshotAccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSnapshotAccountPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &SnapshotAccountConnection{Edges: []*SnapshotAccountEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SnapshotAccountOrderField defines the ordering field of SnapshotAccount.
type SnapshotAccountOrderField struct {
	// Value extracts the ordering value from the given SnapshotAccount.
	Value    func(*SnapshotAccount) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) snapshotaccount.OrderOption
	toCursor func(*SnapshotAccount) Cursor
}

// SnapshotAccountOrder defines the ordering of SnapshotAccount.
type SnapshotAccountOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *SnapshotAccountOrderField `json:"field"`
}

// DefaultSnapshotAccountOrder is the default ordering of SnapshotAccount.
var DefaultSnapshotAccountOrder = &SnapshotAccountOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SnapshotAccountOrderField{
		Value: func(_m *SnapshotAccount) (ent.Value, error) {
			return _m.ID, nil
		},
		column: snapshotaccount.FieldID,
		toTerm: snapshotaccount.ByID,
		toCursor: func(_m *SnapshotAccount) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts SnapshotAccount into SnapshotAccountEdge.
func (_m *SnapshotAccount) ToEdge(order *SnapshotAccountOrder) *SnapshotAccountEdge {
	if order == nil {
		order = DefaultSnapshotAccountOrder
	}
	return &SnapshotAccountEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// SnapshotFXRateEdge is the edge representation of SnapshotFXRate.
type SnapshotFXRateEdge struct {
	Node   *SnapshotFXRate `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// SnapshotFXRateConnection is the connection containing edges to SnapshotFXRate.
type SnapshotFXRateConnection struct {
	Edges      []*SnapshotFXRateEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *SnapshotFXRateConnection) build(nodes []*SnapshotFXRate, pager *snapshotfxratePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SnapshotFXRate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SnapshotFXRate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SnapshotFXRate {
			return nodes[i]
		}
	}
	c.Edges = make([]*SnapshotFXRateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SnapshotFXRateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SnapshotFXRatePaginateOption enables pagination customization.
type SnapshotFXRatePaginateOption func(*snapshotfxratePager) error

// WithSnapshotFXRateOrder configures pagination ordering.
func WithSnapshotFXRateOrder(order *SnapshotFXRateOrder) SnapshotFXRatePaginateOption {
	if order == nil {
		order = DefaultSnapshotFXRateOrder
	}
	o := *order
	return func(pager *snapshotfxratePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSnapshotFXRateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSnapshotFXRateFilter configures pagination filter.
func WithSnapshotFXRateFilter(filter func(*SnapshotFXRateQuery) (*SnapshotFXRateQuery, error)) SnapshotFXRatePaginateOption {
	return func(pager *snapshotfxratePager) error {
		if filter == nil {
			return errors.New("SnapshotFXRateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type snapshotfxratePager struct {
	reverse bool
	order   *SnapshotFXRateOrder
	filter  func(*SnapshotFXRateQuery) (*SnapshotFXRateQuery, error)
}

func newSnapshotFXRatePager(opts []SnapshotFXRatePaginateOption, reverse bool) (*snapshotfxratePager, error) {
	pager := &snapshotfxratePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSnapshotFXRateOrder
	}
	return pager, nil
}

func (p *snapshotfxratePager) applyFilter(query *SnapshotFXRateQuery) (*SnapshotFXRateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *snapshotfxratePager) toCursor(_m *SnapshotFXRate) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *snapshotfxratePager) applyCursors(query *SnapshotFXRateQuery, after, before *Cursor) (*SnapshotFXRateQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSnapshotFXRateOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *snapshotfxratePager) applyOrder(query *SnapshotFXRateQuery) *SnapshotFXRateQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSnapshotFXRateOrder.Field {
		query = query.Order(DefaultSnapshotFXRateOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *snapshotfxratePager) orderExpr(query *SnapshotFXRateQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSnapshotFXRateOrder.Field {
			b.Comma().Ident(DefaultSnapshotFXRateOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SnapshotFXRate.
func (_m *SnapshotFXRateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SnapshotFXRatePaginateOption,
) (*SnapshotFXRateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSnapshotFXRatePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &SnapshotFXRateConnection{Edges: []*SnapshotFXRateEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SnapshotFXRateOrderField defines the ordering field of SnapshotFXRate.
type SnapshotFXRateOrderField struct {
	// Value extracts the ordering value from the given SnapshotFXRate.
	Value    func(*SnapshotFXRate) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) snapshotfxrate.OrderOption
	toCursor func(*SnapshotFXRate) Cursor
}

// SnapshotFXRateOrder defines the ordering of SnapshotFXRate.
type SnapshotFXRateOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *SnapshotFXRateOrderField `json:"field"`
}

// DefaultSnapshotFXRateOrder is the default ordering of SnapshotFXRate.
var DefaultSnapshotFXRateOrder = &SnapshotFXRateOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SnapshotFXRateOrderField{
		Value: func(_m *SnapshotFXRate) (ent.Value, error) {
			return _m.ID, nil
		},
		column: snapshotfxrate.FieldID,
		toTerm: snapshotfxrate.ByID,
		toCursor: func(_m *SnapshotFXRate) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts SnapshotFXRate into SnapshotFXRateEdge.
func (_m *SnapshotFXRate) ToEdge(order *SnapshotFXRateOrder) *SnapshotFXRateEdge {
	if order == nil {
		order = DefaultSnapshotFXRateOrder
	}
	return &SnapshotFXRateEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// TransactionEdge is the edge representation of Transaction.
type TransactionEdge struct {
	Node   *Transaction `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// TransactionConnection is the connection containing edges to Transaction.
type TransactionConnection struct {
	Edges      []*TransactionEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *TransactionConnection) build(nodes []*Transaction, pager *transactionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Transaction
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Transaction {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Transaction {
			return nodes[i]
		}
	}
	c.Edges = make([]*TransactionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TransactionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TransactionPaginateOption enables pagination customization.
type TransactionPaginateOption func(*transactionPager) error

// WithTransactionOrder configures pagination ordering.
func WithTransactionOrder(order *TransactionOrder) TransactionPaginateOption {
	if order == nil {
		order = DefaultTransactionOrder
	}
	o := *order
	return func(pager *transactionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTransactionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTransactionFilter configures pagination filter.
func WithTransactionFilter(filter func(*TransactionQuery) (*TransactionQuery, error)) TransactionPaginateOption {
	return func(pager *transactionPager) error {
		if filter == nil {
			return errors.New("TransactionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type transactionPager struct {
	reverse bool
	order   *TransactionOrder
	filter  func(*TransactionQuery) (*TransactionQuery, error)
}

func newTransactionPager(opts []TransactionPaginateOption, reverse bool) (*transactionPager, error) {
	pager := &transactionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTransactionOrder
	}
	return pager, nil
}

func (p *transactionPager) applyFilter(query *TransactionQuery) (*TransactionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *transactionPager) toCursor(_m *Transaction) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *transactionPager) applyCursors(query *TransactionQuery, after, before *Cursor) (*TransactionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTransactionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *transactionPager) applyOrder(query *TransactionQuery) *TransactionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTransactionOrder.Field {
		query = query.Order(DefaultTransactionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *transactionPager) orderExpr(query *TransactionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTransactionOrder.Field {
			b.Comma().Ident(DefaultTransactionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Transaction.
func (_m *TransactionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TransactionPaginateOption,
) (*TransactionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTransactionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &TransactionConnection{Edges: []*TransactionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// TransactionOrderField defines the ordering field of Transaction.
type TransactionOrderField struct {
	// Value extracts the ordering value from the given Transaction.
	Value    func(*Transaction) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) transaction.OrderOption
	toCursor func(*Transaction) Cursor
}

// TransactionOrder defines the ordering of Transaction.
type TransactionOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *TransactionOrderField `json:"field"`
}

// DefaultTransactionOrder is the default ordering of Transaction.
var DefaultTransactionOrder = &TransactionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TransactionOrderField{
		Value: func(_m *Transaction) (ent.Value, error) {
			return _m.ID, nil
		},
		column: transaction.FieldID,
		toTerm: transaction.ByID,
		toCursor: func(_m *Transaction) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Transaction into TransactionEdge.
func (_m *Transaction) ToEdge(order *TransactionOrder) *TransactionEdge {
	if order == nil {
		order = DefaultTransactionOrder
	}
	return &TransactionEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// TransactionEntryEdge is the edge representation of TransactionEntry.
type TransactionEntryEdge struct {
	Node   *TransactionEntry `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// TransactionEntryConnection is the connection containing edges to TransactionEntry.
type TransactionEntryConnection struct {
	Edges      []*TransactionEntryEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *TransactionEntryConnection) build(nodes []*TransactionEntry, pager *transactionentryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TransactionEntry
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TransactionEntry {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TransactionEntry {
			return nodes[i]
		}
	}
	c.Edges = make([]*TransactionEntryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TransactionEntryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TransactionEntryPaginateOption enables pagination customization.
type TransactionEntryPaginateOption func(*transactionentryPager) error

// WithTransactionEntryOrder configures pagination ordering.
func WithTransactionEntryOrder(order *TransactionEntryOrder) TransactionEntryPaginateOption {
	if order == nil {
		order = DefaultTransactionEntryOrder
	}
	o := *order
	return func(pager *transactionentryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTransactionEntryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTransactionEntryFilter configures pagination filter.
func WithTransactionEntryFilter(filter func(*TransactionEntryQuery) (*TransactionEntryQuery, error)) TransactionEntryPaginateOption {
	return func(pager *transactionentryPager) error {
		if filter == nil {
			return errors.New("TransactionEntryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type transactionentryPager struct {
	reverse bool
	order   *TransactionEntryOrder
	filter  func(*TransactionEntryQuery) (*TransactionEntryQuery, error)
}

func newTransactionEntryPager(opts []TransactionEntryPaginateOption, reverse bool) (*transactionentryPager, error) {
	pager := &transactionentryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTransactionEntryOrder
	}
	return pager, nil
}

func (p *transactionentryPager) applyFilter(query *TransactionEntryQuery) (*TransactionEntryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *transactionentryPager) toCursor(_m *TransactionEntry) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *transactionentryPager) applyCursors(query *TransactionEntryQuery, after, before *Cursor) (*TransactionEntryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTransactionEntryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *transactionentryPager) applyOrder(query *TransactionEntryQuery) *TransactionEntryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTransactionEntryOrder.Field {
		query = query.Order(DefaultTransactionEntryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *transactionentryPager) orderExpr(query *TransactionEntryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTransactionEntryOrder.Field {
			b.Comma().Ident(DefaultTransactionEntryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TransactionEntry.
func (_m *TransactionEntryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TransactionEntryPaginateOption,
) (*TransactionEntryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTransactionEntryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &TransactionEntryConnection{Edges: []*TransactionEntryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// TransactionEntryOrderField defines the ordering field of TransactionEntry.
type TransactionEntryOrderField struct {
	// Value extracts the ordering value from the given TransactionEntry.
	Value    func(*TransactionEntry) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) transactionentry.OrderOption
	toCursor func(*TransactionEntry) Cursor
}

// TransactionEntryOrder defines the ordering of TransactionEntry.
type TransactionEntryOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *TransactionEntryOrderField `json:"field"`
}

// DefaultTransactionEntryOrder is the default ordering of TransactionEntry.
var DefaultTransactionEntryOrder = &TransactionEntryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TransactionEntryOrderField{
		Value: func(_m *TransactionEntry) (ent.Value, error) {
			return _m.ID, nil
		},
		column: transactionentry.FieldID,
		toTerm: transactionentry.ByID,
		toCursor: func(_m *TransactionEntry) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts TransactionEntry into TransactionEntryEdge.
func (_m *TransactionEntry) ToEdge(order *TransactionEntryOrder) *TransactionEntryEdge {
	if order == nil {
		order = DefaultTransactionEntryOrder
	}
	return &TransactionEntryEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(_m *User) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (_m *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(_m *User) (ent.Value, error) {
			return _m.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(_m *User) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (_m *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// UserKeyEdge is the edge representation of UserKey.
type UserKeyEdge struct {
	Node   *UserKey `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// UserKeyConnection is the connection containing edges to UserKey.
type UserKeyConnection struct {
	Edges      []*UserKeyEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *UserKeyConnection) build(nodes []*UserKey, pager *userkeyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserKey
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserKey {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserKey {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserKeyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserKeyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserKeyPaginateOption enables pagination customization.
type UserKeyPaginateOption func(*userkeyPager) error

// WithUserKeyOrder configures pagination ordering.
func WithUserKeyOrder(order *UserKeyOrder) UserKeyPaginateOption {
	if order == nil {
		order = DefaultUserKeyOrder
	}
	o := *order
	return func(pager *userkeyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserKeyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserKeyFilter configures pagination filter.
func WithUserKeyFilter(filter func(*UserKeyQuery) (*UserKeyQuery, error)) UserKeyPaginateOption {
	return func(pager *userkeyPager) error {
		if filter == nil {
			return errors.New("UserKeyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userkeyPager struct {
	reverse bool
	order   *UserKeyOrder
	filter  func(*UserKeyQuery) (*UserKeyQuery, error)
}

func newUserKeyPager(opts []UserKeyPaginateOption, reverse bool) (*userkeyPager, error) {
	pager := &userkeyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserKeyOrder
	}
	return pager, nil
}

func (p *userkeyPager) applyFilter(query *UserKeyQuery) (*UserKeyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userkeyPager) toCursor(_m *UserKey) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *userkeyPager) applyCursors(query *UserKeyQuery, after, before *Cursor) (*UserKeyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserKeyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userkeyPager) applyOrder(query *UserKeyQuery) *UserKeyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserKeyOrder.Field {
		query = query.Order(DefaultUserKeyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userkeyPager) orderExpr(query *UserKeyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserKeyOrder.Field {
			b.Comma().Ident(DefaultUserKeyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserKey.
func (_m *UserKeyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserKeyPaginateOption,
) (*UserKeyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserKeyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &UserKeyConnection{Edges: []*UserKeyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserKeyOrderField defines the ordering field of UserKey.
type UserKeyOrderField struct {
	// Value extracts the ordering value from the given UserKey.
	Value    func(*UserKey) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) userkey.OrderOption
	toCursor func(*UserKey) Cursor
}

// UserKeyOrder defines the ordering of UserKey.
type UserKeyOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *UserKeyOrderField `json:"field"`
}

// DefaultUserKeyOrder is the default ordering of UserKey.
var DefaultUserKeyOrder = &UserKeyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserKeyOrderField{
		Value: func(_m *UserKey) (ent.Value, error) {
			return _m.ID, nil
		},
		column: userkey.FieldID,
		toTerm: userkey.ByID,
		toCursor: func(_m *UserKey) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts UserKey into UserKeyEdge.
func (_m *UserKey) ToEdge(order *UserKeyOrder) *UserKeyEdge {
	if order == nil {
		order = DefaultUserKeyOrder
	}
	return &UserKeyEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}
