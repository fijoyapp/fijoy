// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/account"
	"fijoy/ent/transaction"
	"fijoy/ent/transactionentry"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// TransactionEntryCreate is the builder for creating a TransactionEntry entity.
type TransactionEntryCreate struct {
	config
	mutation *TransactionEntryMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tec *TransactionEntryCreate) SetCreateTime(t time.Time) *TransactionEntryCreate {
	tec.mutation.SetCreateTime(t)
	return tec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tec *TransactionEntryCreate) SetNillableCreateTime(t *time.Time) *TransactionEntryCreate {
	if t != nil {
		tec.SetCreateTime(*t)
	}
	return tec
}

// SetUpdateTime sets the "update_time" field.
func (tec *TransactionEntryCreate) SetUpdateTime(t time.Time) *TransactionEntryCreate {
	tec.mutation.SetUpdateTime(t)
	return tec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tec *TransactionEntryCreate) SetNillableUpdateTime(t *time.Time) *TransactionEntryCreate {
	if t != nil {
		tec.SetUpdateTime(*t)
	}
	return tec
}

// SetAmount sets the "amount" field.
func (tec *TransactionEntryCreate) SetAmount(d decimal.Decimal) *TransactionEntryCreate {
	tec.mutation.SetAmount(d)
	return tec
}

// SetValue sets the "value" field.
func (tec *TransactionEntryCreate) SetValue(d decimal.Decimal) *TransactionEntryCreate {
	tec.mutation.SetValue(d)
	return tec
}

// SetFxRate sets the "fx_rate" field.
func (tec *TransactionEntryCreate) SetFxRate(d decimal.Decimal) *TransactionEntryCreate {
	tec.mutation.SetFxRate(d)
	return tec
}

// SetBalance sets the "balance" field.
func (tec *TransactionEntryCreate) SetBalance(d decimal.Decimal) *TransactionEntryCreate {
	tec.mutation.SetBalance(d)
	return tec
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (tec *TransactionEntryCreate) SetAccountID(id int) *TransactionEntryCreate {
	tec.mutation.SetAccountID(id)
	return tec
}

// SetAccount sets the "account" edge to the Account entity.
func (tec *TransactionEntryCreate) SetAccount(a *Account) *TransactionEntryCreate {
	return tec.SetAccountID(a.ID)
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (tec *TransactionEntryCreate) SetTransactionID(id int) *TransactionEntryCreate {
	tec.mutation.SetTransactionID(id)
	return tec
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (tec *TransactionEntryCreate) SetTransaction(t *Transaction) *TransactionEntryCreate {
	return tec.SetTransactionID(t.ID)
}

// Mutation returns the TransactionEntryMutation object of the builder.
func (tec *TransactionEntryCreate) Mutation() *TransactionEntryMutation {
	return tec.mutation
}

// Save creates the TransactionEntry in the database.
func (tec *TransactionEntryCreate) Save(ctx context.Context) (*TransactionEntry, error) {
	tec.defaults()
	return withHooks(ctx, tec.sqlSave, tec.mutation, tec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tec *TransactionEntryCreate) SaveX(ctx context.Context) *TransactionEntry {
	v, err := tec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tec *TransactionEntryCreate) Exec(ctx context.Context) error {
	_, err := tec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tec *TransactionEntryCreate) ExecX(ctx context.Context) {
	if err := tec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tec *TransactionEntryCreate) defaults() {
	if _, ok := tec.mutation.CreateTime(); !ok {
		v := transactionentry.DefaultCreateTime()
		tec.mutation.SetCreateTime(v)
	}
	if _, ok := tec.mutation.UpdateTime(); !ok {
		v := transactionentry.DefaultUpdateTime()
		tec.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tec *TransactionEntryCreate) check() error {
	if _, ok := tec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TransactionEntry.create_time"`)}
	}
	if _, ok := tec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TransactionEntry.update_time"`)}
	}
	if _, ok := tec.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "TransactionEntry.amount"`)}
	}
	if _, ok := tec.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "TransactionEntry.value"`)}
	}
	if _, ok := tec.mutation.FxRate(); !ok {
		return &ValidationError{Name: "fx_rate", err: errors.New(`ent: missing required field "TransactionEntry.fx_rate"`)}
	}
	if _, ok := tec.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "TransactionEntry.balance"`)}
	}
	if len(tec.mutation.AccountIDs()) == 0 {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required edge "TransactionEntry.account"`)}
	}
	if len(tec.mutation.TransactionIDs()) == 0 {
		return &ValidationError{Name: "transaction", err: errors.New(`ent: missing required edge "TransactionEntry.transaction"`)}
	}
	return nil
}

func (tec *TransactionEntryCreate) sqlSave(ctx context.Context) (*TransactionEntry, error) {
	if err := tec.check(); err != nil {
		return nil, err
	}
	_node, _spec := tec.createSpec()
	if err := sqlgraph.CreateNode(ctx, tec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tec.mutation.id = &_node.ID
	tec.mutation.done = true
	return _node, nil
}

func (tec *TransactionEntryCreate) createSpec() (*TransactionEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &TransactionEntry{config: tec.config}
		_spec = sqlgraph.NewCreateSpec(transactionentry.Table, sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt))
	)
	if value, ok := tec.mutation.CreateTime(); ok {
		_spec.SetField(transactionentry.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tec.mutation.UpdateTime(); ok {
		_spec.SetField(transactionentry.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tec.mutation.Amount(); ok {
		_spec.SetField(transactionentry.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := tec.mutation.Value(); ok {
		_spec.SetField(transactionentry.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := tec.mutation.FxRate(); ok {
		_spec.SetField(transactionentry.FieldFxRate, field.TypeFloat64, value)
		_node.FxRate = value
	}
	if value, ok := tec.mutation.Balance(); ok {
		_spec.SetField(transactionentry.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if nodes := tec.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_transaction_entries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tec.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.transaction_transaction_entries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionEntryCreateBulk is the builder for creating many TransactionEntry entities in bulk.
type TransactionEntryCreateBulk struct {
	config
	err      error
	builders []*TransactionEntryCreate
}

// Save creates the TransactionEntry entities in the database.
func (tecb *TransactionEntryCreateBulk) Save(ctx context.Context) ([]*TransactionEntry, error) {
	if tecb.err != nil {
		return nil, tecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tecb.builders))
	nodes := make([]*TransactionEntry, len(tecb.builders))
	mutators := make([]Mutator, len(tecb.builders))
	for i := range tecb.builders {
		func(i int, root context.Context) {
			builder := tecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tecb *TransactionEntryCreateBulk) SaveX(ctx context.Context) []*TransactionEntry {
	v, err := tecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tecb *TransactionEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := tecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tecb *TransactionEntryCreateBulk) ExecX(ctx context.Context) {
	if err := tecb.Exec(ctx); err != nil {
		panic(err)
	}
}
