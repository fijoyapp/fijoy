// Code generated by ent, DO NOT EDIT.

package snapshot

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the snapshot type in the database.
	Label = "snapshot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeSnapshotAccounts holds the string denoting the snapshot_accounts edge name in mutations.
	EdgeSnapshotAccounts = "snapshot_accounts"
	// EdgeSnapshotFxRates holds the string denoting the snapshot_fx_rates edge name in mutations.
	EdgeSnapshotFxRates = "snapshot_fx_rates"
	// Table holds the table name of the snapshot in the database.
	Table = "snapshots"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "snapshots"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_snapshots"
	// SnapshotAccountsTable is the table that holds the snapshot_accounts relation/edge.
	SnapshotAccountsTable = "snapshot_accounts"
	// SnapshotAccountsInverseTable is the table name for the SnapshotAccount entity.
	// It exists in this package in order to avoid circular dependency with the "snapshotaccount" package.
	SnapshotAccountsInverseTable = "snapshot_accounts"
	// SnapshotAccountsColumn is the table column denoting the snapshot_accounts relation/edge.
	SnapshotAccountsColumn = "snapshot_snapshot_accounts"
	// SnapshotFxRatesTable is the table that holds the snapshot_fx_rates relation/edge.
	SnapshotFxRatesTable = "snapshot_fx_rates"
	// SnapshotFxRatesInverseTable is the table name for the SnapshotFXRate entity.
	// It exists in this package in order to avoid circular dependency with the "snapshotfxrate" package.
	SnapshotFxRatesInverseTable = "snapshot_fx_rates"
	// SnapshotFxRatesColumn is the table column denoting the snapshot_fx_rates relation/edge.
	SnapshotFxRatesColumn = "snapshot_snapshot_fx_rates"
)

// Columns holds all SQL columns for snapshot fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldNote,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "snapshots"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"profile_snapshots",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the Snapshot queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// BySnapshotAccountsCount orders the results by snapshot_accounts count.
func BySnapshotAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSnapshotAccountsStep(), opts...)
	}
}

// BySnapshotAccounts orders the results by snapshot_accounts terms.
func BySnapshotAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSnapshotAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySnapshotFxRatesCount orders the results by snapshot_fx_rates count.
func BySnapshotFxRatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSnapshotFxRatesStep(), opts...)
	}
}

// BySnapshotFxRates orders the results by snapshot_fx_rates terms.
func BySnapshotFxRates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSnapshotFxRatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
func newSnapshotAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SnapshotAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SnapshotAccountsTable, SnapshotAccountsColumn),
	)
}
func newSnapshotFxRatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SnapshotFxRatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SnapshotFxRatesTable, SnapshotFxRatesColumn),
	)
}
