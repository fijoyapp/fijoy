// Code generated by ent, DO NOT EDIT.

package userprofile

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userprofile type in the database.
	Label = "user_profile"
	// FieldPermission holds the string denoting the permission field in the database.
	FieldPermission = "permission"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldProfileID holds the string denoting the profile_id field in the database.
	FieldProfileID = "profile_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// ProfileFieldID holds the string denoting the ID field of the Profile.
	ProfileFieldID = "id"
	// Table holds the table name of the userprofile in the database.
	Table = "user_profiles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "user_profiles"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_id"
)

// Columns holds all SQL columns for userprofile fields.
var Columns = []string{
	FieldPermission,
	FieldUserID,
	FieldProfileID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Permission defines the type for the "permission" enum field.
type Permission string

// Permission values.
const (
	PermissionOwner  Permission = "owner"
	PermissionAdmin  Permission = "admin"
	PermissionViewer Permission = "viewer"
)

func (pe Permission) String() string {
	return string(pe)
}

// PermissionValidator is a validator for the "permission" field enum values. It is called by the builders before save.
func PermissionValidator(pe Permission) error {
	switch pe {
	case PermissionOwner, PermissionAdmin, PermissionViewer:
		return nil
	default:
		return fmt.Errorf("userprofile: invalid enum value for permission field: %q", pe)
	}
}

// OrderOption defines the ordering options for the UserProfile queries.
type OrderOption func(*sql.Selector)

// ByPermission orders the results by the permission field.
func ByPermission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermission, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByProfileID orders the results by the profile_id field.
func ByProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ProfileColumn),
		sqlgraph.To(ProfileInverseTable, ProfileFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Permission) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Permission) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Permission(str)
	if err := PermissionValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Permission", str)
	}
	return nil
}
