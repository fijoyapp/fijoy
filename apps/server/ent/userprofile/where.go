// Code generated by ent, DO NOT EDIT.

package userprofile

import (
	"fijoy/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldUserID, v))
}

// ProfileID applies equality check predicate on the "profile_id" field. It's identical to ProfileIDEQ.
func ProfileID(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldProfileID, v))
}

// PermissionEQ applies the EQ predicate on the "permission" field.
func PermissionEQ(v Permission) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldPermission, v))
}

// PermissionNEQ applies the NEQ predicate on the "permission" field.
func PermissionNEQ(v Permission) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldPermission, v))
}

// PermissionIn applies the In predicate on the "permission" field.
func PermissionIn(vs ...Permission) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldPermission, vs...))
}

// PermissionNotIn applies the NotIn predicate on the "permission" field.
func PermissionNotIn(vs ...Permission) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldPermission, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldUserID, vs...))
}

// ProfileIDEQ applies the EQ predicate on the "profile_id" field.
func ProfileIDEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldProfileID, v))
}

// ProfileIDNEQ applies the NEQ predicate on the "profile_id" field.
func ProfileIDNEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldProfileID, v))
}

// ProfileIDIn applies the In predicate on the "profile_id" field.
func ProfileIDIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldProfileID, vs...))
}

// ProfileIDNotIn applies the NotIn predicate on the "profile_id" field.
func ProfileIDNotIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldProfileID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ProfileColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.NotPredicates(p))
}
