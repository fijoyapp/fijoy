// Code generated by ent, DO NOT EDIT.

package transactionentry

import (
	"fijoy/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldUpdateTime, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldAmount, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldValue, v))
}

// FxRate applies equality check predicate on the "fx_rate" field. It's identical to FxRateEQ.
func FxRate(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldFxRate, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldBalance, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLTE(FieldUpdateTime, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLTE(FieldAmount, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLTE(FieldValue, v))
}

// FxRateEQ applies the EQ predicate on the "fx_rate" field.
func FxRateEQ(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldFxRate, v))
}

// FxRateNEQ applies the NEQ predicate on the "fx_rate" field.
func FxRateNEQ(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNEQ(FieldFxRate, v))
}

// FxRateIn applies the In predicate on the "fx_rate" field.
func FxRateIn(vs ...decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldIn(FieldFxRate, vs...))
}

// FxRateNotIn applies the NotIn predicate on the "fx_rate" field.
func FxRateNotIn(vs ...decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNotIn(FieldFxRate, vs...))
}

// FxRateGT applies the GT predicate on the "fx_rate" field.
func FxRateGT(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGT(FieldFxRate, v))
}

// FxRateGTE applies the GTE predicate on the "fx_rate" field.
func FxRateGTE(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGTE(FieldFxRate, v))
}

// FxRateLT applies the LT predicate on the "fx_rate" field.
func FxRateLT(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLT(FieldFxRate, v))
}

// FxRateLTE applies the LTE predicate on the "fx_rate" field.
func FxRateLTE(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLTE(FieldFxRate, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v decimal.Decimal) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.FieldLTE(FieldBalance, v))
}

// HasAccount applies the HasEdge predicate on the "account" edge.
func HasAccount() predicate.TransactionEntry {
	return predicate.TransactionEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountWith applies the HasEdge predicate on the "account" edge with a given conditions (other predicates).
func HasAccountWith(preds ...predicate.Account) predicate.TransactionEntry {
	return predicate.TransactionEntry(func(s *sql.Selector) {
		step := newAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransaction applies the HasEdge predicate on the "transaction" edge.
func HasTransaction() predicate.TransactionEntry {
	return predicate.TransactionEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TransactionTable, TransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionWith applies the HasEdge predicate on the "transaction" edge with a given conditions (other predicates).
func HasTransactionWith(preds ...predicate.Transaction) predicate.TransactionEntry {
	return predicate.TransactionEntry(func(s *sql.Selector) {
		step := newTransactionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TransactionEntry) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TransactionEntry) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TransactionEntry) predicate.TransactionEntry {
	return predicate.TransactionEntry(sql.NotPredicates(p))
}
