// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/account"
	"fijoy/ent/predicate"
	"fijoy/ent/transaction"
	"fijoy/ent/transactionentry"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// TransactionEntryUpdate is the builder for updating TransactionEntry entities.
type TransactionEntryUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionEntryMutation
}

// Where appends a list predicates to the TransactionEntryUpdate builder.
func (teu *TransactionEntryUpdate) Where(ps ...predicate.TransactionEntry) *TransactionEntryUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetUpdateTime sets the "update_time" field.
func (teu *TransactionEntryUpdate) SetUpdateTime(t time.Time) *TransactionEntryUpdate {
	teu.mutation.SetUpdateTime(t)
	return teu
}

// SetAmount sets the "amount" field.
func (teu *TransactionEntryUpdate) SetAmount(d decimal.Decimal) *TransactionEntryUpdate {
	teu.mutation.ResetAmount()
	teu.mutation.SetAmount(d)
	return teu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (teu *TransactionEntryUpdate) SetNillableAmount(d *decimal.Decimal) *TransactionEntryUpdate {
	if d != nil {
		teu.SetAmount(*d)
	}
	return teu
}

// AddAmount adds d to the "amount" field.
func (teu *TransactionEntryUpdate) AddAmount(d decimal.Decimal) *TransactionEntryUpdate {
	teu.mutation.AddAmount(d)
	return teu
}

// SetValue sets the "value" field.
func (teu *TransactionEntryUpdate) SetValue(d decimal.Decimal) *TransactionEntryUpdate {
	teu.mutation.ResetValue()
	teu.mutation.SetValue(d)
	return teu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (teu *TransactionEntryUpdate) SetNillableValue(d *decimal.Decimal) *TransactionEntryUpdate {
	if d != nil {
		teu.SetValue(*d)
	}
	return teu
}

// AddValue adds d to the "value" field.
func (teu *TransactionEntryUpdate) AddValue(d decimal.Decimal) *TransactionEntryUpdate {
	teu.mutation.AddValue(d)
	return teu
}

// SetFxRate sets the "fx_rate" field.
func (teu *TransactionEntryUpdate) SetFxRate(d decimal.Decimal) *TransactionEntryUpdate {
	teu.mutation.ResetFxRate()
	teu.mutation.SetFxRate(d)
	return teu
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (teu *TransactionEntryUpdate) SetNillableFxRate(d *decimal.Decimal) *TransactionEntryUpdate {
	if d != nil {
		teu.SetFxRate(*d)
	}
	return teu
}

// AddFxRate adds d to the "fx_rate" field.
func (teu *TransactionEntryUpdate) AddFxRate(d decimal.Decimal) *TransactionEntryUpdate {
	teu.mutation.AddFxRate(d)
	return teu
}

// SetBalance sets the "balance" field.
func (teu *TransactionEntryUpdate) SetBalance(d decimal.Decimal) *TransactionEntryUpdate {
	teu.mutation.ResetBalance()
	teu.mutation.SetBalance(d)
	return teu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (teu *TransactionEntryUpdate) SetNillableBalance(d *decimal.Decimal) *TransactionEntryUpdate {
	if d != nil {
		teu.SetBalance(*d)
	}
	return teu
}

// AddBalance adds d to the "balance" field.
func (teu *TransactionEntryUpdate) AddBalance(d decimal.Decimal) *TransactionEntryUpdate {
	teu.mutation.AddBalance(d)
	return teu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (teu *TransactionEntryUpdate) SetAccountID(id int) *TransactionEntryUpdate {
	teu.mutation.SetAccountID(id)
	return teu
}

// SetAccount sets the "account" edge to the Account entity.
func (teu *TransactionEntryUpdate) SetAccount(a *Account) *TransactionEntryUpdate {
	return teu.SetAccountID(a.ID)
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (teu *TransactionEntryUpdate) SetTransactionID(id int) *TransactionEntryUpdate {
	teu.mutation.SetTransactionID(id)
	return teu
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (teu *TransactionEntryUpdate) SetTransaction(t *Transaction) *TransactionEntryUpdate {
	return teu.SetTransactionID(t.ID)
}

// Mutation returns the TransactionEntryMutation object of the builder.
func (teu *TransactionEntryUpdate) Mutation() *TransactionEntryMutation {
	return teu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (teu *TransactionEntryUpdate) ClearAccount() *TransactionEntryUpdate {
	teu.mutation.ClearAccount()
	return teu
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (teu *TransactionEntryUpdate) ClearTransaction() *TransactionEntryUpdate {
	teu.mutation.ClearTransaction()
	return teu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TransactionEntryUpdate) Save(ctx context.Context) (int, error) {
	teu.defaults()
	return withHooks(ctx, teu.sqlSave, teu.mutation, teu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TransactionEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TransactionEntryUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TransactionEntryUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teu *TransactionEntryUpdate) defaults() {
	if _, ok := teu.mutation.UpdateTime(); !ok {
		v := transactionentry.UpdateDefaultUpdateTime()
		teu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (teu *TransactionEntryUpdate) check() error {
	if teu.mutation.AccountCleared() && len(teu.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionEntry.account"`)
	}
	if teu.mutation.TransactionCleared() && len(teu.mutation.TransactionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionEntry.transaction"`)
	}
	return nil
}

func (teu *TransactionEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := teu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transactionentry.Table, transactionentry.Columns, sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt))
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.UpdateTime(); ok {
		_spec.SetField(transactionentry.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := teu.mutation.Amount(); ok {
		_spec.SetField(transactionentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := teu.mutation.AddedAmount(); ok {
		_spec.AddField(transactionentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := teu.mutation.Value(); ok {
		_spec.SetField(transactionentry.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := teu.mutation.AddedValue(); ok {
		_spec.AddField(transactionentry.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := teu.mutation.FxRate(); ok {
		_spec.SetField(transactionentry.FieldFxRate, field.TypeFloat64, value)
	}
	if value, ok := teu.mutation.AddedFxRate(); ok {
		_spec.AddField(transactionentry.FieldFxRate, field.TypeFloat64, value)
	}
	if value, ok := teu.mutation.Balance(); ok {
		_spec.SetField(transactionentry.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := teu.mutation.AddedBalance(); ok {
		_spec.AddField(transactionentry.FieldBalance, field.TypeFloat64, value)
	}
	if teu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	teu.mutation.done = true
	return n, nil
}

// TransactionEntryUpdateOne is the builder for updating a single TransactionEntry entity.
type TransactionEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionEntryMutation
}

// SetUpdateTime sets the "update_time" field.
func (teuo *TransactionEntryUpdateOne) SetUpdateTime(t time.Time) *TransactionEntryUpdateOne {
	teuo.mutation.SetUpdateTime(t)
	return teuo
}

// SetAmount sets the "amount" field.
func (teuo *TransactionEntryUpdateOne) SetAmount(d decimal.Decimal) *TransactionEntryUpdateOne {
	teuo.mutation.ResetAmount()
	teuo.mutation.SetAmount(d)
	return teuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (teuo *TransactionEntryUpdateOne) SetNillableAmount(d *decimal.Decimal) *TransactionEntryUpdateOne {
	if d != nil {
		teuo.SetAmount(*d)
	}
	return teuo
}

// AddAmount adds d to the "amount" field.
func (teuo *TransactionEntryUpdateOne) AddAmount(d decimal.Decimal) *TransactionEntryUpdateOne {
	teuo.mutation.AddAmount(d)
	return teuo
}

// SetValue sets the "value" field.
func (teuo *TransactionEntryUpdateOne) SetValue(d decimal.Decimal) *TransactionEntryUpdateOne {
	teuo.mutation.ResetValue()
	teuo.mutation.SetValue(d)
	return teuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (teuo *TransactionEntryUpdateOne) SetNillableValue(d *decimal.Decimal) *TransactionEntryUpdateOne {
	if d != nil {
		teuo.SetValue(*d)
	}
	return teuo
}

// AddValue adds d to the "value" field.
func (teuo *TransactionEntryUpdateOne) AddValue(d decimal.Decimal) *TransactionEntryUpdateOne {
	teuo.mutation.AddValue(d)
	return teuo
}

// SetFxRate sets the "fx_rate" field.
func (teuo *TransactionEntryUpdateOne) SetFxRate(d decimal.Decimal) *TransactionEntryUpdateOne {
	teuo.mutation.ResetFxRate()
	teuo.mutation.SetFxRate(d)
	return teuo
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (teuo *TransactionEntryUpdateOne) SetNillableFxRate(d *decimal.Decimal) *TransactionEntryUpdateOne {
	if d != nil {
		teuo.SetFxRate(*d)
	}
	return teuo
}

// AddFxRate adds d to the "fx_rate" field.
func (teuo *TransactionEntryUpdateOne) AddFxRate(d decimal.Decimal) *TransactionEntryUpdateOne {
	teuo.mutation.AddFxRate(d)
	return teuo
}

// SetBalance sets the "balance" field.
func (teuo *TransactionEntryUpdateOne) SetBalance(d decimal.Decimal) *TransactionEntryUpdateOne {
	teuo.mutation.ResetBalance()
	teuo.mutation.SetBalance(d)
	return teuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (teuo *TransactionEntryUpdateOne) SetNillableBalance(d *decimal.Decimal) *TransactionEntryUpdateOne {
	if d != nil {
		teuo.SetBalance(*d)
	}
	return teuo
}

// AddBalance adds d to the "balance" field.
func (teuo *TransactionEntryUpdateOne) AddBalance(d decimal.Decimal) *TransactionEntryUpdateOne {
	teuo.mutation.AddBalance(d)
	return teuo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (teuo *TransactionEntryUpdateOne) SetAccountID(id int) *TransactionEntryUpdateOne {
	teuo.mutation.SetAccountID(id)
	return teuo
}

// SetAccount sets the "account" edge to the Account entity.
func (teuo *TransactionEntryUpdateOne) SetAccount(a *Account) *TransactionEntryUpdateOne {
	return teuo.SetAccountID(a.ID)
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (teuo *TransactionEntryUpdateOne) SetTransactionID(id int) *TransactionEntryUpdateOne {
	teuo.mutation.SetTransactionID(id)
	return teuo
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (teuo *TransactionEntryUpdateOne) SetTransaction(t *Transaction) *TransactionEntryUpdateOne {
	return teuo.SetTransactionID(t.ID)
}

// Mutation returns the TransactionEntryMutation object of the builder.
func (teuo *TransactionEntryUpdateOne) Mutation() *TransactionEntryMutation {
	return teuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (teuo *TransactionEntryUpdateOne) ClearAccount() *TransactionEntryUpdateOne {
	teuo.mutation.ClearAccount()
	return teuo
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (teuo *TransactionEntryUpdateOne) ClearTransaction() *TransactionEntryUpdateOne {
	teuo.mutation.ClearTransaction()
	return teuo
}

// Where appends a list predicates to the TransactionEntryUpdate builder.
func (teuo *TransactionEntryUpdateOne) Where(ps ...predicate.TransactionEntry) *TransactionEntryUpdateOne {
	teuo.mutation.Where(ps...)
	return teuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TransactionEntryUpdateOne) Select(field string, fields ...string) *TransactionEntryUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TransactionEntry entity.
func (teuo *TransactionEntryUpdateOne) Save(ctx context.Context) (*TransactionEntry, error) {
	teuo.defaults()
	return withHooks(ctx, teuo.sqlSave, teuo.mutation, teuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TransactionEntryUpdateOne) SaveX(ctx context.Context) *TransactionEntry {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TransactionEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TransactionEntryUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teuo *TransactionEntryUpdateOne) defaults() {
	if _, ok := teuo.mutation.UpdateTime(); !ok {
		v := transactionentry.UpdateDefaultUpdateTime()
		teuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (teuo *TransactionEntryUpdateOne) check() error {
	if teuo.mutation.AccountCleared() && len(teuo.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionEntry.account"`)
	}
	if teuo.mutation.TransactionCleared() && len(teuo.mutation.TransactionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionEntry.transaction"`)
	}
	return nil
}

func (teuo *TransactionEntryUpdateOne) sqlSave(ctx context.Context) (_node *TransactionEntry, err error) {
	if err := teuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transactionentry.Table, transactionentry.Columns, sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt))
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TransactionEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactionentry.FieldID)
		for _, f := range fields {
			if !transactionentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactionentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.UpdateTime(); ok {
		_spec.SetField(transactionentry.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := teuo.mutation.Amount(); ok {
		_spec.SetField(transactionentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := teuo.mutation.AddedAmount(); ok {
		_spec.AddField(transactionentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := teuo.mutation.Value(); ok {
		_spec.SetField(transactionentry.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := teuo.mutation.AddedValue(); ok {
		_spec.AddField(transactionentry.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := teuo.mutation.FxRate(); ok {
		_spec.SetField(transactionentry.FieldFxRate, field.TypeFloat64, value)
	}
	if value, ok := teuo.mutation.AddedFxRate(); ok {
		_spec.AddField(transactionentry.FieldFxRate, field.TypeFloat64, value)
	}
	if value, ok := teuo.mutation.Balance(); ok {
		_spec.SetField(transactionentry.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := teuo.mutation.AddedBalance(); ok {
		_spec.AddField(transactionentry.FieldBalance, field.TypeFloat64, value)
	}
	if teuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TransactionEntry{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	teuo.mutation.done = true
	return _node, nil
}
