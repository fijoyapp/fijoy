// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/account"
	"fijoy/ent/predicate"
	"fijoy/ent/transaction"
	"fijoy/ent/transactionentry"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// TransactionEntryUpdate is the builder for updating TransactionEntry entities.
type TransactionEntryUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionEntryMutation
}

// Where appends a list predicates to the TransactionEntryUpdate builder.
func (_u *TransactionEntryUpdate) Where(ps ...predicate.TransactionEntry) *TransactionEntryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *TransactionEntryUpdate) SetUpdateTime(v time.Time) *TransactionEntryUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetAmount sets the "amount" field.
func (_u *TransactionEntryUpdate) SetAmount(v decimal.Decimal) *TransactionEntryUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *TransactionEntryUpdate) SetNillableAmount(v *decimal.Decimal) *TransactionEntryUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *TransactionEntryUpdate) AddAmount(v decimal.Decimal) *TransactionEntryUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetValue sets the "value" field.
func (_u *TransactionEntryUpdate) SetValue(v decimal.Decimal) *TransactionEntryUpdate {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *TransactionEntryUpdate) SetNillableValue(v *decimal.Decimal) *TransactionEntryUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *TransactionEntryUpdate) AddValue(v decimal.Decimal) *TransactionEntryUpdate {
	_u.mutation.AddValue(v)
	return _u
}

// SetFxRate sets the "fx_rate" field.
func (_u *TransactionEntryUpdate) SetFxRate(v decimal.Decimal) *TransactionEntryUpdate {
	_u.mutation.ResetFxRate()
	_u.mutation.SetFxRate(v)
	return _u
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (_u *TransactionEntryUpdate) SetNillableFxRate(v *decimal.Decimal) *TransactionEntryUpdate {
	if v != nil {
		_u.SetFxRate(*v)
	}
	return _u
}

// AddFxRate adds value to the "fx_rate" field.
func (_u *TransactionEntryUpdate) AddFxRate(v decimal.Decimal) *TransactionEntryUpdate {
	_u.mutation.AddFxRate(v)
	return _u
}

// SetBalance sets the "balance" field.
func (_u *TransactionEntryUpdate) SetBalance(v decimal.Decimal) *TransactionEntryUpdate {
	_u.mutation.ResetBalance()
	_u.mutation.SetBalance(v)
	return _u
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (_u *TransactionEntryUpdate) SetNillableBalance(v *decimal.Decimal) *TransactionEntryUpdate {
	if v != nil {
		_u.SetBalance(*v)
	}
	return _u
}

// AddBalance adds value to the "balance" field.
func (_u *TransactionEntryUpdate) AddBalance(v decimal.Decimal) *TransactionEntryUpdate {
	_u.mutation.AddBalance(v)
	return _u
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (_u *TransactionEntryUpdate) SetAccountID(id int) *TransactionEntryUpdate {
	_u.mutation.SetAccountID(id)
	return _u
}

// SetAccount sets the "account" edge to the Account entity.
func (_u *TransactionEntryUpdate) SetAccount(v *Account) *TransactionEntryUpdate {
	return _u.SetAccountID(v.ID)
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (_u *TransactionEntryUpdate) SetTransactionID(id int) *TransactionEntryUpdate {
	_u.mutation.SetTransactionID(id)
	return _u
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (_u *TransactionEntryUpdate) SetTransaction(v *Transaction) *TransactionEntryUpdate {
	return _u.SetTransactionID(v.ID)
}

// Mutation returns the TransactionEntryMutation object of the builder.
func (_u *TransactionEntryUpdate) Mutation() *TransactionEntryMutation {
	return _u.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (_u *TransactionEntryUpdate) ClearAccount() *TransactionEntryUpdate {
	_u.mutation.ClearAccount()
	return _u
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (_u *TransactionEntryUpdate) ClearTransaction() *TransactionEntryUpdate {
	_u.mutation.ClearTransaction()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TransactionEntryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransactionEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TransactionEntryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransactionEntryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TransactionEntryUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := transactionentry.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransactionEntryUpdate) check() error {
	if _u.mutation.AccountCleared() && len(_u.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionEntry.account"`)
	}
	if _u.mutation.TransactionCleared() && len(_u.mutation.TransactionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionEntry.transaction"`)
	}
	return nil
}

func (_u *TransactionEntryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transactionentry.Table, transactionentry.Columns, sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(transactionentry.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(transactionentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(transactionentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(transactionentry.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(transactionentry.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.FxRate(); ok {
		_spec.SetField(transactionentry.FieldFxRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedFxRate(); ok {
		_spec.AddField(transactionentry.FieldFxRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Balance(); ok {
		_spec.SetField(transactionentry.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBalance(); ok {
		_spec.AddField(transactionentry.FieldBalance, field.TypeFloat64, value)
	}
	if _u.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TransactionEntryUpdateOne is the builder for updating a single TransactionEntry entity.
type TransactionEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionEntryMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *TransactionEntryUpdateOne) SetUpdateTime(v time.Time) *TransactionEntryUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetAmount sets the "amount" field.
func (_u *TransactionEntryUpdateOne) SetAmount(v decimal.Decimal) *TransactionEntryUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *TransactionEntryUpdateOne) SetNillableAmount(v *decimal.Decimal) *TransactionEntryUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *TransactionEntryUpdateOne) AddAmount(v decimal.Decimal) *TransactionEntryUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetValue sets the "value" field.
func (_u *TransactionEntryUpdateOne) SetValue(v decimal.Decimal) *TransactionEntryUpdateOne {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *TransactionEntryUpdateOne) SetNillableValue(v *decimal.Decimal) *TransactionEntryUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *TransactionEntryUpdateOne) AddValue(v decimal.Decimal) *TransactionEntryUpdateOne {
	_u.mutation.AddValue(v)
	return _u
}

// SetFxRate sets the "fx_rate" field.
func (_u *TransactionEntryUpdateOne) SetFxRate(v decimal.Decimal) *TransactionEntryUpdateOne {
	_u.mutation.ResetFxRate()
	_u.mutation.SetFxRate(v)
	return _u
}

// SetNillableFxRate sets the "fx_rate" field if the given value is not nil.
func (_u *TransactionEntryUpdateOne) SetNillableFxRate(v *decimal.Decimal) *TransactionEntryUpdateOne {
	if v != nil {
		_u.SetFxRate(*v)
	}
	return _u
}

// AddFxRate adds value to the "fx_rate" field.
func (_u *TransactionEntryUpdateOne) AddFxRate(v decimal.Decimal) *TransactionEntryUpdateOne {
	_u.mutation.AddFxRate(v)
	return _u
}

// SetBalance sets the "balance" field.
func (_u *TransactionEntryUpdateOne) SetBalance(v decimal.Decimal) *TransactionEntryUpdateOne {
	_u.mutation.ResetBalance()
	_u.mutation.SetBalance(v)
	return _u
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (_u *TransactionEntryUpdateOne) SetNillableBalance(v *decimal.Decimal) *TransactionEntryUpdateOne {
	if v != nil {
		_u.SetBalance(*v)
	}
	return _u
}

// AddBalance adds value to the "balance" field.
func (_u *TransactionEntryUpdateOne) AddBalance(v decimal.Decimal) *TransactionEntryUpdateOne {
	_u.mutation.AddBalance(v)
	return _u
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (_u *TransactionEntryUpdateOne) SetAccountID(id int) *TransactionEntryUpdateOne {
	_u.mutation.SetAccountID(id)
	return _u
}

// SetAccount sets the "account" edge to the Account entity.
func (_u *TransactionEntryUpdateOne) SetAccount(v *Account) *TransactionEntryUpdateOne {
	return _u.SetAccountID(v.ID)
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (_u *TransactionEntryUpdateOne) SetTransactionID(id int) *TransactionEntryUpdateOne {
	_u.mutation.SetTransactionID(id)
	return _u
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (_u *TransactionEntryUpdateOne) SetTransaction(v *Transaction) *TransactionEntryUpdateOne {
	return _u.SetTransactionID(v.ID)
}

// Mutation returns the TransactionEntryMutation object of the builder.
func (_u *TransactionEntryUpdateOne) Mutation() *TransactionEntryMutation {
	return _u.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (_u *TransactionEntryUpdateOne) ClearAccount() *TransactionEntryUpdateOne {
	_u.mutation.ClearAccount()
	return _u
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (_u *TransactionEntryUpdateOne) ClearTransaction() *TransactionEntryUpdateOne {
	_u.mutation.ClearTransaction()
	return _u
}

// Where appends a list predicates to the TransactionEntryUpdate builder.
func (_u *TransactionEntryUpdateOne) Where(ps ...predicate.TransactionEntry) *TransactionEntryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TransactionEntryUpdateOne) Select(field string, fields ...string) *TransactionEntryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TransactionEntry entity.
func (_u *TransactionEntryUpdateOne) Save(ctx context.Context) (*TransactionEntry, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransactionEntryUpdateOne) SaveX(ctx context.Context) *TransactionEntry {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TransactionEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransactionEntryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TransactionEntryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := transactionentry.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransactionEntryUpdateOne) check() error {
	if _u.mutation.AccountCleared() && len(_u.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionEntry.account"`)
	}
	if _u.mutation.TransactionCleared() && len(_u.mutation.TransactionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionEntry.transaction"`)
	}
	return nil
}

func (_u *TransactionEntryUpdateOne) sqlSave(ctx context.Context) (_node *TransactionEntry, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transactionentry.Table, transactionentry.Columns, sqlgraph.NewFieldSpec(transactionentry.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TransactionEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactionentry.FieldID)
		for _, f := range fields {
			if !transactionentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactionentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(transactionentry.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(transactionentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(transactionentry.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(transactionentry.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(transactionentry.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.FxRate(); ok {
		_spec.SetField(transactionentry.FieldFxRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedFxRate(); ok {
		_spec.AddField(transactionentry.FieldFxRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Balance(); ok {
		_spec.SetField(transactionentry.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBalance(); ok {
		_spec.AddField(transactionentry.FieldBalance, field.TypeFloat64, value)
	}
	if _u.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.AccountTable,
			Columns: []string{transactionentry.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionentry.TransactionTable,
			Columns: []string{transactionentry.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TransactionEntry{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
