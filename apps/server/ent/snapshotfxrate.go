// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/snapshot"
	"fijoy/ent/snapshotfxrate"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// SnapshotFXRate is the model entity for the SnapshotFXRate schema.
type SnapshotFXRate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// FromCurrency holds the value of the "from_currency" field.
	FromCurrency string `json:"from_currency,omitempty"`
	// ToCurrency holds the value of the "to_currency" field.
	ToCurrency string `json:"to_currency,omitempty"`
	// The exchange rate from the native currency to user's default display currency
	FxRate decimal.Decimal `json:"fx_rate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SnapshotFXRateQuery when eager-loading is set.
	Edges                      SnapshotFXRateEdges `json:"edges"`
	snapshot_snapshot_fx_rates *int
	selectValues               sql.SelectValues
}

// SnapshotFXRateEdges holds the relations/edges for other nodes in the graph.
type SnapshotFXRateEdges struct {
	// Snapshot holds the value of the snapshot edge.
	Snapshot *Snapshot `json:"snapshot,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SnapshotOrErr returns the Snapshot value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SnapshotFXRateEdges) SnapshotOrErr() (*Snapshot, error) {
	if e.Snapshot != nil {
		return e.Snapshot, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: snapshot.Label}
	}
	return nil, &NotLoadedError{edge: "snapshot"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SnapshotFXRate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case snapshotfxrate.FieldFxRate:
			values[i] = new(decimal.Decimal)
		case snapshotfxrate.FieldID:
			values[i] = new(sql.NullInt64)
		case snapshotfxrate.FieldFromCurrency, snapshotfxrate.FieldToCurrency:
			values[i] = new(sql.NullString)
		case snapshotfxrate.FieldCreateTime, snapshotfxrate.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case snapshotfxrate.ForeignKeys[0]: // snapshot_snapshot_fx_rates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SnapshotFXRate fields.
func (_m *SnapshotFXRate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case snapshotfxrate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case snapshotfxrate.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case snapshotfxrate.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case snapshotfxrate.FieldFromCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_currency", values[i])
			} else if value.Valid {
				_m.FromCurrency = value.String
			}
		case snapshotfxrate.FieldToCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_currency", values[i])
			} else if value.Valid {
				_m.ToCurrency = value.String
			}
		case snapshotfxrate.FieldFxRate:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field fx_rate", values[i])
			} else if value != nil {
				_m.FxRate = *value
			}
		case snapshotfxrate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field snapshot_snapshot_fx_rates", value)
			} else if value.Valid {
				_m.snapshot_snapshot_fx_rates = new(int)
				*_m.snapshot_snapshot_fx_rates = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SnapshotFXRate.
// This includes values selected through modifiers, order, etc.
func (_m *SnapshotFXRate) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySnapshot queries the "snapshot" edge of the SnapshotFXRate entity.
func (_m *SnapshotFXRate) QuerySnapshot() *SnapshotQuery {
	return NewSnapshotFXRateClient(_m.config).QuerySnapshot(_m)
}

// Update returns a builder for updating this SnapshotFXRate.
// Note that you need to call SnapshotFXRate.Unwrap() before calling this method if this SnapshotFXRate
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SnapshotFXRate) Update() *SnapshotFXRateUpdateOne {
	return NewSnapshotFXRateClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SnapshotFXRate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SnapshotFXRate) Unwrap() *SnapshotFXRate {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SnapshotFXRate is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SnapshotFXRate) String() string {
	var builder strings.Builder
	builder.WriteString("SnapshotFXRate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("from_currency=")
	builder.WriteString(_m.FromCurrency)
	builder.WriteString(", ")
	builder.WriteString("to_currency=")
	builder.WriteString(_m.ToCurrency)
	builder.WriteString(", ")
	builder.WriteString("fx_rate=")
	builder.WriteString(fmt.Sprintf("%v", _m.FxRate))
	builder.WriteByte(')')
	return builder.String()
}

// SnapshotFXRates is a parsable slice of SnapshotFXRate.
type SnapshotFXRates []*SnapshotFXRate
