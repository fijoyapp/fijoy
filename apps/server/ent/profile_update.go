// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/account"
	"fijoy/ent/predicate"
	"fijoy/ent/profile"
	"fijoy/ent/transaction"
	"fijoy/ent/user"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *ProfileUpdate) SetUpdateTime(t time.Time) *ProfileUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetLocale sets the "locale" field.
func (pu *ProfileUpdate) SetLocale(s string) *ProfileUpdate {
	pu.mutation.SetLocale(s)
	return pu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableLocale(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetLocale(*s)
	}
	return pu
}

// SetCurrencies sets the "currencies" field.
func (pu *ProfileUpdate) SetCurrencies(s []string) *ProfileUpdate {
	pu.mutation.SetCurrencies(s)
	return pu
}

// AppendCurrencies appends s to the "currencies" field.
func (pu *ProfileUpdate) AppendCurrencies(s []string) *ProfileUpdate {
	pu.mutation.AppendCurrencies(s)
	return pu
}

// SetNetWorthGoal sets the "net_worth_goal" field.
func (pu *ProfileUpdate) SetNetWorthGoal(d decimal.Decimal) *ProfileUpdate {
	pu.mutation.ResetNetWorthGoal()
	pu.mutation.SetNetWorthGoal(d)
	return pu
}

// SetNillableNetWorthGoal sets the "net_worth_goal" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableNetWorthGoal(d *decimal.Decimal) *ProfileUpdate {
	if d != nil {
		pu.SetNetWorthGoal(*d)
	}
	return pu
}

// AddNetWorthGoal adds d to the "net_worth_goal" field.
func (pu *ProfileUpdate) AddNetWorthGoal(d decimal.Decimal) *ProfileUpdate {
	pu.mutation.AddNetWorthGoal(d)
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *ProfileUpdate) SetUserID(id string) *ProfileUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProfileUpdate) SetUser(u *User) *ProfileUpdate {
	return pu.SetUserID(u.ID)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (pu *ProfileUpdate) AddAccountIDs(ids ...string) *ProfileUpdate {
	pu.mutation.AddAccountIDs(ids...)
	return pu
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (pu *ProfileUpdate) AddAccounts(a ...*Account) *ProfileUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAccountIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (pu *ProfileUpdate) AddTransactionIDs(ids ...string) *ProfileUpdate {
	pu.mutation.AddTransactionIDs(ids...)
	return pu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (pu *ProfileUpdate) AddTransactions(t ...*Transaction) *ProfileUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTransactionIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProfileUpdate) ClearUser() *ProfileUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (pu *ProfileUpdate) ClearAccounts() *ProfileUpdate {
	pu.mutation.ClearAccounts()
	return pu
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (pu *ProfileUpdate) RemoveAccountIDs(ids ...string) *ProfileUpdate {
	pu.mutation.RemoveAccountIDs(ids...)
	return pu
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (pu *ProfileUpdate) RemoveAccounts(a ...*Account) *ProfileUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAccountIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (pu *ProfileUpdate) ClearTransactions() *ProfileUpdate {
	pu.mutation.ClearTransactions()
	return pu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (pu *ProfileUpdate) RemoveTransactionIDs(ids ...string) *ProfileUpdate {
	pu.mutation.RemoveTransactionIDs(ids...)
	return pu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (pu *ProfileUpdate) RemoveTransactions(t ...*Transaction) *ProfileUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfileUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := profile.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfileUpdate) check() error {
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(profile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Locale(); ok {
		_spec.SetField(profile.FieldLocale, field.TypeString, value)
	}
	if value, ok := pu.mutation.Currencies(); ok {
		_spec.SetField(profile.FieldCurrencies, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedCurrencies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, profile.FieldCurrencies, value)
		})
	}
	if value, ok := pu.mutation.NetWorthGoal(); ok {
		_spec.SetField(profile.FieldNetWorthGoal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedNetWorthGoal(); ok {
		_spec.AddField(profile.FieldNetWorthGoal, field.TypeFloat64, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.AccountsTable,
			Columns: []string{profile.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !pu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.AccountsTable,
			Columns: []string{profile.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.AccountsTable,
			Columns: []string{profile.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.TransactionsTable,
			Columns: []string{profile.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.TransactionsTable,
			Columns: []string{profile.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.TransactionsTable,
			Columns: []string{profile.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *ProfileUpdateOne) SetUpdateTime(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetLocale sets the "locale" field.
func (puo *ProfileUpdateOne) SetLocale(s string) *ProfileUpdateOne {
	puo.mutation.SetLocale(s)
	return puo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableLocale(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetLocale(*s)
	}
	return puo
}

// SetCurrencies sets the "currencies" field.
func (puo *ProfileUpdateOne) SetCurrencies(s []string) *ProfileUpdateOne {
	puo.mutation.SetCurrencies(s)
	return puo
}

// AppendCurrencies appends s to the "currencies" field.
func (puo *ProfileUpdateOne) AppendCurrencies(s []string) *ProfileUpdateOne {
	puo.mutation.AppendCurrencies(s)
	return puo
}

// SetNetWorthGoal sets the "net_worth_goal" field.
func (puo *ProfileUpdateOne) SetNetWorthGoal(d decimal.Decimal) *ProfileUpdateOne {
	puo.mutation.ResetNetWorthGoal()
	puo.mutation.SetNetWorthGoal(d)
	return puo
}

// SetNillableNetWorthGoal sets the "net_worth_goal" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableNetWorthGoal(d *decimal.Decimal) *ProfileUpdateOne {
	if d != nil {
		puo.SetNetWorthGoal(*d)
	}
	return puo
}

// AddNetWorthGoal adds d to the "net_worth_goal" field.
func (puo *ProfileUpdateOne) AddNetWorthGoal(d decimal.Decimal) *ProfileUpdateOne {
	puo.mutation.AddNetWorthGoal(d)
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *ProfileUpdateOne) SetUserID(id string) *ProfileUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProfileUpdateOne) SetUser(u *User) *ProfileUpdateOne {
	return puo.SetUserID(u.ID)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (puo *ProfileUpdateOne) AddAccountIDs(ids ...string) *ProfileUpdateOne {
	puo.mutation.AddAccountIDs(ids...)
	return puo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (puo *ProfileUpdateOne) AddAccounts(a ...*Account) *ProfileUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAccountIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (puo *ProfileUpdateOne) AddTransactionIDs(ids ...string) *ProfileUpdateOne {
	puo.mutation.AddTransactionIDs(ids...)
	return puo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (puo *ProfileUpdateOne) AddTransactions(t ...*Transaction) *ProfileUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTransactionIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProfileUpdateOne) ClearUser() *ProfileUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (puo *ProfileUpdateOne) ClearAccounts() *ProfileUpdateOne {
	puo.mutation.ClearAccounts()
	return puo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (puo *ProfileUpdateOne) RemoveAccountIDs(ids ...string) *ProfileUpdateOne {
	puo.mutation.RemoveAccountIDs(ids...)
	return puo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (puo *ProfileUpdateOne) RemoveAccounts(a ...*Account) *ProfileUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAccountIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (puo *ProfileUpdateOne) ClearTransactions() *ProfileUpdateOne {
	puo.mutation.ClearTransactions()
	return puo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (puo *ProfileUpdateOne) RemoveTransactionIDs(ids ...string) *ProfileUpdateOne {
	puo.mutation.RemoveTransactionIDs(ids...)
	return puo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (puo *ProfileUpdateOne) RemoveTransactions(t ...*Transaction) *ProfileUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the ProfileUpdate builder.
func (puo *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfileUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := profile.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfileUpdateOne) check() error {
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(profile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Locale(); ok {
		_spec.SetField(profile.FieldLocale, field.TypeString, value)
	}
	if value, ok := puo.mutation.Currencies(); ok {
		_spec.SetField(profile.FieldCurrencies, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedCurrencies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, profile.FieldCurrencies, value)
		})
	}
	if value, ok := puo.mutation.NetWorthGoal(); ok {
		_spec.SetField(profile.FieldNetWorthGoal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedNetWorthGoal(); ok {
		_spec.AddField(profile.FieldNetWorthGoal, field.TypeFloat64, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.AccountsTable,
			Columns: []string{profile.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !puo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.AccountsTable,
			Columns: []string{profile.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.AccountsTable,
			Columns: []string{profile.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.TransactionsTable,
			Columns: []string{profile.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !puo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.TransactionsTable,
			Columns: []string{profile.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.TransactionsTable,
			Columns: []string{profile.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
