// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/overallsnapshot"
	"fijoy/ent/profile"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// OverallSnapshot is the model entity for the OverallSnapshot schema.
type OverallSnapshot struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Datehour holds the value of the "datehour" field.
	Datehour time.Time `json:"datehour,omitempty"`
	// Liquidity holds the value of the "liquidity" field.
	Liquidity decimal.Decimal `json:"liquidity,omitempty"`
	// Investment holds the value of the "investment" field.
	Investment decimal.Decimal `json:"investment,omitempty"`
	// Property holds the value of the "property" field.
	Property decimal.Decimal `json:"property,omitempty"`
	// Receivable holds the value of the "receivable" field.
	Receivable decimal.Decimal `json:"receivable,omitempty"`
	// Liablity holds the value of the "liablity" field.
	Liablity decimal.Decimal `json:"liablity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OverallSnapshotQuery when eager-loading is set.
	Edges                    OverallSnapshotEdges `json:"edges"`
	profile_overall_snapshot *string
	selectValues             sql.SelectValues
}

// OverallSnapshotEdges holds the relations/edges for other nodes in the graph.
type OverallSnapshotEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OverallSnapshotEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OverallSnapshot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case overallsnapshot.FieldLiquidity, overallsnapshot.FieldInvestment, overallsnapshot.FieldProperty, overallsnapshot.FieldReceivable, overallsnapshot.FieldLiablity:
			values[i] = new(decimal.Decimal)
		case overallsnapshot.FieldID:
			values[i] = new(sql.NullString)
		case overallsnapshot.FieldDatehour:
			values[i] = new(sql.NullTime)
		case overallsnapshot.ForeignKeys[0]: // profile_overall_snapshot
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OverallSnapshot fields.
func (os *OverallSnapshot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case overallsnapshot.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				os.ID = value.String
			}
		case overallsnapshot.FieldDatehour:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field datehour", values[i])
			} else if value.Valid {
				os.Datehour = value.Time
			}
		case overallsnapshot.FieldLiquidity:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field liquidity", values[i])
			} else if value != nil {
				os.Liquidity = *value
			}
		case overallsnapshot.FieldInvestment:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field investment", values[i])
			} else if value != nil {
				os.Investment = *value
			}
		case overallsnapshot.FieldProperty:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field property", values[i])
			} else if value != nil {
				os.Property = *value
			}
		case overallsnapshot.FieldReceivable:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field receivable", values[i])
			} else if value != nil {
				os.Receivable = *value
			}
		case overallsnapshot.FieldLiablity:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field liablity", values[i])
			} else if value != nil {
				os.Liablity = *value
			}
		case overallsnapshot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_overall_snapshot", values[i])
			} else if value.Valid {
				os.profile_overall_snapshot = new(string)
				*os.profile_overall_snapshot = value.String
			}
		default:
			os.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OverallSnapshot.
// This includes values selected through modifiers, order, etc.
func (os *OverallSnapshot) Value(name string) (ent.Value, error) {
	return os.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the OverallSnapshot entity.
func (os *OverallSnapshot) QueryProfile() *ProfileQuery {
	return NewOverallSnapshotClient(os.config).QueryProfile(os)
}

// Update returns a builder for updating this OverallSnapshot.
// Note that you need to call OverallSnapshot.Unwrap() before calling this method if this OverallSnapshot
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OverallSnapshot) Update() *OverallSnapshotUpdateOne {
	return NewOverallSnapshotClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OverallSnapshot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OverallSnapshot) Unwrap() *OverallSnapshot {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OverallSnapshot is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OverallSnapshot) String() string {
	var builder strings.Builder
	builder.WriteString("OverallSnapshot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("datehour=")
	builder.WriteString(os.Datehour.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("liquidity=")
	builder.WriteString(fmt.Sprintf("%v", os.Liquidity))
	builder.WriteString(", ")
	builder.WriteString("investment=")
	builder.WriteString(fmt.Sprintf("%v", os.Investment))
	builder.WriteString(", ")
	builder.WriteString("property=")
	builder.WriteString(fmt.Sprintf("%v", os.Property))
	builder.WriteString(", ")
	builder.WriteString("receivable=")
	builder.WriteString(fmt.Sprintf("%v", os.Receivable))
	builder.WriteString(", ")
	builder.WriteString("liablity=")
	builder.WriteString(fmt.Sprintf("%v", os.Liablity))
	builder.WriteByte(')')
	return builder.String()
}

// OverallSnapshots is a parsable slice of OverallSnapshot.
type OverallSnapshots []*OverallSnapshot
