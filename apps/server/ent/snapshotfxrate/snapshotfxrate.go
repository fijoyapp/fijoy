// Code generated by ent, DO NOT EDIT.

package snapshotfxrate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the snapshotfxrate type in the database.
	Label = "snapshot_fx_rate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldFromCurrency holds the string denoting the from_currency field in the database.
	FieldFromCurrency = "from_currency"
	// FieldToCurrency holds the string denoting the to_currency field in the database.
	FieldToCurrency = "to_currency"
	// FieldFxRate holds the string denoting the fx_rate field in the database.
	FieldFxRate = "fx_rate"
	// EdgeSnapshot holds the string denoting the snapshot edge name in mutations.
	EdgeSnapshot = "snapshot"
	// Table holds the table name of the snapshotfxrate in the database.
	Table = "snapshot_fx_rates"
	// SnapshotTable is the table that holds the snapshot relation/edge.
	SnapshotTable = "snapshot_fx_rates"
	// SnapshotInverseTable is the table name for the Snapshot entity.
	// It exists in this package in order to avoid circular dependency with the "snapshot" package.
	SnapshotInverseTable = "snapshots"
	// SnapshotColumn is the table column denoting the snapshot relation/edge.
	SnapshotColumn = "snapshot_snapshot_fx_rates"
)

// Columns holds all SQL columns for snapshotfxrate fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldFromCurrency,
	FieldToCurrency,
	FieldFxRate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "snapshot_fx_rates"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"snapshot_snapshot_fx_rates",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the SnapshotFXRate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByFromCurrency orders the results by the from_currency field.
func ByFromCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromCurrency, opts...).ToFunc()
}

// ByToCurrency orders the results by the to_currency field.
func ByToCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToCurrency, opts...).ToFunc()
}

// ByFxRate orders the results by the fx_rate field.
func ByFxRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFxRate, opts...).ToFunc()
}

// BySnapshotField orders the results by snapshot field.
func BySnapshotField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSnapshotStep(), sql.OrderByField(field, opts...))
	}
}
func newSnapshotStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SnapshotInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SnapshotTable, SnapshotColumn),
	)
}
