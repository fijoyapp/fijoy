// Code generated by ent, DO NOT EDIT.

package snapshotfxrate

import (
	"fijoy/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldUpdateTime, v))
}

// FromCurrency applies equality check predicate on the "from_currency" field. It's identical to FromCurrencyEQ.
func FromCurrency(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldFromCurrency, v))
}

// ToCurrency applies equality check predicate on the "to_currency" field. It's identical to ToCurrencyEQ.
func ToCurrency(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldToCurrency, v))
}

// FxRate applies equality check predicate on the "fx_rate" field. It's identical to FxRateEQ.
func FxRate(v decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldFxRate, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLTE(FieldUpdateTime, v))
}

// FromCurrencyEQ applies the EQ predicate on the "from_currency" field.
func FromCurrencyEQ(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldFromCurrency, v))
}

// FromCurrencyNEQ applies the NEQ predicate on the "from_currency" field.
func FromCurrencyNEQ(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNEQ(FieldFromCurrency, v))
}

// FromCurrencyIn applies the In predicate on the "from_currency" field.
func FromCurrencyIn(vs ...string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldIn(FieldFromCurrency, vs...))
}

// FromCurrencyNotIn applies the NotIn predicate on the "from_currency" field.
func FromCurrencyNotIn(vs ...string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNotIn(FieldFromCurrency, vs...))
}

// FromCurrencyGT applies the GT predicate on the "from_currency" field.
func FromCurrencyGT(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGT(FieldFromCurrency, v))
}

// FromCurrencyGTE applies the GTE predicate on the "from_currency" field.
func FromCurrencyGTE(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGTE(FieldFromCurrency, v))
}

// FromCurrencyLT applies the LT predicate on the "from_currency" field.
func FromCurrencyLT(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLT(FieldFromCurrency, v))
}

// FromCurrencyLTE applies the LTE predicate on the "from_currency" field.
func FromCurrencyLTE(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLTE(FieldFromCurrency, v))
}

// FromCurrencyContains applies the Contains predicate on the "from_currency" field.
func FromCurrencyContains(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldContains(FieldFromCurrency, v))
}

// FromCurrencyHasPrefix applies the HasPrefix predicate on the "from_currency" field.
func FromCurrencyHasPrefix(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldHasPrefix(FieldFromCurrency, v))
}

// FromCurrencyHasSuffix applies the HasSuffix predicate on the "from_currency" field.
func FromCurrencyHasSuffix(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldHasSuffix(FieldFromCurrency, v))
}

// FromCurrencyEqualFold applies the EqualFold predicate on the "from_currency" field.
func FromCurrencyEqualFold(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEqualFold(FieldFromCurrency, v))
}

// FromCurrencyContainsFold applies the ContainsFold predicate on the "from_currency" field.
func FromCurrencyContainsFold(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldContainsFold(FieldFromCurrency, v))
}

// ToCurrencyEQ applies the EQ predicate on the "to_currency" field.
func ToCurrencyEQ(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldToCurrency, v))
}

// ToCurrencyNEQ applies the NEQ predicate on the "to_currency" field.
func ToCurrencyNEQ(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNEQ(FieldToCurrency, v))
}

// ToCurrencyIn applies the In predicate on the "to_currency" field.
func ToCurrencyIn(vs ...string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldIn(FieldToCurrency, vs...))
}

// ToCurrencyNotIn applies the NotIn predicate on the "to_currency" field.
func ToCurrencyNotIn(vs ...string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNotIn(FieldToCurrency, vs...))
}

// ToCurrencyGT applies the GT predicate on the "to_currency" field.
func ToCurrencyGT(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGT(FieldToCurrency, v))
}

// ToCurrencyGTE applies the GTE predicate on the "to_currency" field.
func ToCurrencyGTE(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGTE(FieldToCurrency, v))
}

// ToCurrencyLT applies the LT predicate on the "to_currency" field.
func ToCurrencyLT(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLT(FieldToCurrency, v))
}

// ToCurrencyLTE applies the LTE predicate on the "to_currency" field.
func ToCurrencyLTE(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLTE(FieldToCurrency, v))
}

// ToCurrencyContains applies the Contains predicate on the "to_currency" field.
func ToCurrencyContains(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldContains(FieldToCurrency, v))
}

// ToCurrencyHasPrefix applies the HasPrefix predicate on the "to_currency" field.
func ToCurrencyHasPrefix(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldHasPrefix(FieldToCurrency, v))
}

// ToCurrencyHasSuffix applies the HasSuffix predicate on the "to_currency" field.
func ToCurrencyHasSuffix(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldHasSuffix(FieldToCurrency, v))
}

// ToCurrencyEqualFold applies the EqualFold predicate on the "to_currency" field.
func ToCurrencyEqualFold(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEqualFold(FieldToCurrency, v))
}

// ToCurrencyContainsFold applies the ContainsFold predicate on the "to_currency" field.
func ToCurrencyContainsFold(v string) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldContainsFold(FieldToCurrency, v))
}

// FxRateEQ applies the EQ predicate on the "fx_rate" field.
func FxRateEQ(v decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldEQ(FieldFxRate, v))
}

// FxRateNEQ applies the NEQ predicate on the "fx_rate" field.
func FxRateNEQ(v decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNEQ(FieldFxRate, v))
}

// FxRateIn applies the In predicate on the "fx_rate" field.
func FxRateIn(vs ...decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldIn(FieldFxRate, vs...))
}

// FxRateNotIn applies the NotIn predicate on the "fx_rate" field.
func FxRateNotIn(vs ...decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldNotIn(FieldFxRate, vs...))
}

// FxRateGT applies the GT predicate on the "fx_rate" field.
func FxRateGT(v decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGT(FieldFxRate, v))
}

// FxRateGTE applies the GTE predicate on the "fx_rate" field.
func FxRateGTE(v decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldGTE(FieldFxRate, v))
}

// FxRateLT applies the LT predicate on the "fx_rate" field.
func FxRateLT(v decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLT(FieldFxRate, v))
}

// FxRateLTE applies the LTE predicate on the "fx_rate" field.
func FxRateLTE(v decimal.Decimal) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.FieldLTE(FieldFxRate, v))
}

// HasSnapshot applies the HasEdge predicate on the "snapshot" edge.
func HasSnapshot() predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SnapshotTable, SnapshotColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSnapshotWith applies the HasEdge predicate on the "snapshot" edge with a given conditions (other predicates).
func HasSnapshotWith(preds ...predicate.Snapshot) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(func(s *sql.Selector) {
		step := newSnapshotStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SnapshotFXRate) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SnapshotFXRate) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SnapshotFXRate) predicate.SnapshotFXRate {
	return predicate.SnapshotFXRate(sql.NotPredicates(p))
}
