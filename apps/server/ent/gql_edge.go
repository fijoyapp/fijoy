// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (_m *Account) Profile(ctx context.Context) (*Profile, error) {
	result, err := _m.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryProfile().Only(ctx)
	}
	return result, err
}

func (_m *Account) TransactionEntries(ctx context.Context) (result []*TransactionEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedTransactionEntries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.TransactionEntriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryTransactionEntries().All(ctx)
	}
	return result, err
}

func (_m *Account) SnapshotAccounts(ctx context.Context) (result []*SnapshotAccount, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedSnapshotAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.SnapshotAccountsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QuerySnapshotAccounts().All(ctx)
	}
	return result, err
}

func (_m *Category) Profile(ctx context.Context) (*Profile, error) {
	result, err := _m.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryProfile().Only(ctx)
	}
	return result, err
}

func (_m *Category) Transactions(ctx context.Context) (result []*Transaction, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedTransactions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.TransactionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryTransactions().All(ctx)
	}
	return result, err
}

func (_m *Profile) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryUsers().All(ctx)
	}
	return result, err
}

func (_m *Profile) Accounts(ctx context.Context) (result []*Account, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.AccountsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryAccounts().All(ctx)
	}
	return result, err
}

func (_m *Profile) Transactions(ctx context.Context) (result []*Transaction, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedTransactions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.TransactionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryTransactions().All(ctx)
	}
	return result, err
}

func (_m *Profile) Snapshots(ctx context.Context) (result []*Snapshot, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedSnapshots(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.SnapshotsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QuerySnapshots().All(ctx)
	}
	return result, err
}

func (_m *Profile) Categories(ctx context.Context) (result []*Category, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedCategories(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.CategoriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryCategories().All(ctx)
	}
	return result, err
}

func (_m *Snapshot) Profile(ctx context.Context) (*Profile, error) {
	result, err := _m.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryProfile().Only(ctx)
	}
	return result, err
}

func (_m *Snapshot) SnapshotAccounts(ctx context.Context) (result []*SnapshotAccount, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedSnapshotAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.SnapshotAccountsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QuerySnapshotAccounts().All(ctx)
	}
	return result, err
}

func (_m *Snapshot) SnapshotFxRates(ctx context.Context) (result []*SnapshotFXRate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedSnapshotFxRates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.SnapshotFxRatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QuerySnapshotFxRates().All(ctx)
	}
	return result, err
}

func (_m *SnapshotAccount) Account(ctx context.Context) (*Account, error) {
	result, err := _m.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryAccount().Only(ctx)
	}
	return result, err
}

func (_m *SnapshotAccount) Snapshot(ctx context.Context) (*Snapshot, error) {
	result, err := _m.Edges.SnapshotOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QuerySnapshot().Only(ctx)
	}
	return result, err
}

func (_m *SnapshotFXRate) Snapshot(ctx context.Context) (*Snapshot, error) {
	result, err := _m.Edges.SnapshotOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QuerySnapshot().Only(ctx)
	}
	return result, err
}

func (_m *Transaction) Profile(ctx context.Context) (*Profile, error) {
	result, err := _m.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryProfile().Only(ctx)
	}
	return result, err
}

func (_m *Transaction) Category(ctx context.Context) (*Category, error) {
	result, err := _m.Edges.CategoryOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryCategory().Only(ctx)
	}
	return result, err
}

func (_m *Transaction) TransactionEntries(ctx context.Context) (result []*TransactionEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedTransactionEntries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.TransactionEntriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryTransactionEntries().All(ctx)
	}
	return result, err
}

func (_m *TransactionEntry) Account(ctx context.Context) (*Account, error) {
	result, err := _m.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryAccount().Only(ctx)
	}
	return result, err
}

func (_m *TransactionEntry) Transaction(ctx context.Context) (*Transaction, error) {
	result, err := _m.Edges.TransactionOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTransaction().Only(ctx)
	}
	return result, err
}

func (_m *User) UserKeys(ctx context.Context) (result []*UserKey, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedUserKeys(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.UserKeysOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryUserKeys().All(ctx)
	}
	return result, err
}

func (_m *User) Profiles(ctx context.Context) (result []*Profile, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedProfiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.ProfilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryProfiles().All(ctx)
	}
	return result, err
}

func (_m *UserKey) User(ctx context.Context) (*User, error) {
	result, err := _m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryUser().Only(ctx)
	}
	return result, err
}
