// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Account) Profile(ctx context.Context) (*Profile, error) {
	result, err := a.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryProfile().Only(ctx)
	}
	return result, err
}

func (a *Account) TransactionEntries(ctx context.Context) (result []*TransactionEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedTransactionEntries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.TransactionEntriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryTransactionEntries().All(ctx)
	}
	return result, err
}

func (pr *Profile) User(ctx context.Context) (*User, error) {
	result, err := pr.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryUser().Only(ctx)
	}
	return result, err
}

func (pr *Profile) Accounts(ctx context.Context) (result []*Account, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.AccountsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryAccounts().All(ctx)
	}
	return result, err
}

func (pr *Profile) Transactions(ctx context.Context) (result []*Transaction, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedTransactions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.TransactionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryTransactions().All(ctx)
	}
	return result, err
}

func (t *Transaction) Profile(ctx context.Context) (*Profile, error) {
	result, err := t.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryProfile().Only(ctx)
	}
	return result, err
}

func (t *Transaction) TransactionEntries(ctx context.Context) (result []*TransactionEntry, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedTransactionEntries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.TransactionEntriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryTransactionEntries().All(ctx)
	}
	return result, err
}

func (te *TransactionEntry) Account(ctx context.Context) (*Account, error) {
	result, err := te.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = te.QueryAccount().Only(ctx)
	}
	return result, err
}

func (te *TransactionEntry) Transaction(ctx context.Context) (*Transaction, error) {
	result, err := te.Edges.TransactionOrErr()
	if IsNotLoaded(err) {
		result, err = te.QueryTransaction().Only(ctx)
	}
	return result, err
}

func (u *User) UserKeys(ctx context.Context) (result []*UserKey, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserKeys(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserKeysOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserKeys().All(ctx)
	}
	return result, err
}

func (u *User) Profiles(ctx context.Context) (result []*Profile, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedProfiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ProfilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryProfiles().All(ctx)
	}
	return result, err
}

func (uk *UserKey) User(ctx context.Context) (*User, error) {
	result, err := uk.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = uk.QueryUser().Only(ctx)
	}
	return result, err
}
