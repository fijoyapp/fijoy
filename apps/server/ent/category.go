// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/category"
	"fijoy/ent/profile"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Category is the model entity for the Category schema.
type Category struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CategoryType holds the value of the "category_type" field.
	CategoryType category.CategoryType `json:"category_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoryQuery when eager-loading is set.
	Edges              CategoryEdges `json:"edges"`
	profile_categories *int
	selectValues       sql.SelectValues
}

// CategoryEdges holds the relations/edges for other nodes in the graph.
type CategoryEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTransactions map[string][]*Transaction
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Category) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			values[i] = new(sql.NullInt64)
		case category.FieldName, category.FieldCategoryType:
			values[i] = new(sql.NullString)
		case category.FieldCreateTime, category.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case category.ForeignKeys[0]: // profile_categories
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Category fields.
func (_m *Category) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case category.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case category.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case category.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case category.FieldCategoryType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_type", values[i])
			} else if value.Valid {
				_m.CategoryType = category.CategoryType(value.String)
			}
		case category.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_categories", value)
			} else if value.Valid {
				_m.profile_categories = new(int)
				*_m.profile_categories = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Category.
// This includes values selected through modifiers, order, etc.
func (_m *Category) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the Category entity.
func (_m *Category) QueryProfile() *ProfileQuery {
	return NewCategoryClient(_m.config).QueryProfile(_m)
}

// QueryTransactions queries the "transactions" edge of the Category entity.
func (_m *Category) QueryTransactions() *TransactionQuery {
	return NewCategoryClient(_m.config).QueryTransactions(_m)
}

// Update returns a builder for updating this Category.
// Note that you need to call Category.Unwrap() before calling this method if this Category
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Category) Update() *CategoryUpdateOne {
	return NewCategoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Category entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Category) Unwrap() *Category {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Category is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Category) String() string {
	var builder strings.Builder
	builder.WriteString("Category(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("category_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.CategoryType))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransactions returns the Transactions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Category) NamedTransactions(name string) ([]*Transaction, error) {
	if _m.Edges.namedTransactions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTransactions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Category) appendNamedTransactions(name string, edges ...*Transaction) {
	if _m.Edges.namedTransactions == nil {
		_m.Edges.namedTransactions = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		_m.Edges.namedTransactions[name] = []*Transaction{}
	} else {
		_m.Edges.namedTransactions[name] = append(_m.Edges.namedTransactions[name], edges...)
	}
}

// Categories is a parsable slice of Category.
type Categories []*Category
