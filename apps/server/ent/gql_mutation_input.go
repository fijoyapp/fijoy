// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/account"
	"time"

	"github.com/shopspring/decimal"
)

// CreateAccountInput represents a mutation input for creating accounts.
type CreateAccountInput struct {
	Name                string
	AccountType         account.AccountType
	CurrencySymbol      string
	Ticker              string
	TickerType          account.TickerType
	Amount              decimal.Decimal
	Archived            *bool
	CreatedAt           *time.Time
	UpdatedAt           *time.Time
	TransactionEntryIDs []string
}

// Mutate applies the CreateAccountInput on the AccountMutation builder.
func (i *CreateAccountInput) Mutate(m *AccountMutation) {
	m.SetName(i.Name)
	m.SetAccountType(i.AccountType)
	m.SetCurrencySymbol(i.CurrencySymbol)
	m.SetTicker(i.Ticker)
	m.SetTickerType(i.TickerType)
	m.SetAmount(i.Amount)
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TransactionEntryIDs; len(v) > 0 {
		m.AddTransactionEntryIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAccountInput on the AccountCreate builder.
func (c *AccountCreate) SetInput(i CreateAccountInput) *AccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAccountInput represents a mutation input for updating accounts.
type UpdateAccountInput struct {
	Name                      *string
	AccountType               *account.AccountType
	CurrencySymbol            *string
	Ticker                    *string
	TickerType                *account.TickerType
	Amount                    *decimal.Decimal
	Archived                  *bool
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	ClearTransactionEntry     bool
	AddTransactionEntryIDs    []string
	RemoveTransactionEntryIDs []string
}

// Mutate applies the UpdateAccountInput on the AccountMutation builder.
func (i *UpdateAccountInput) Mutate(m *AccountMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AccountType; v != nil {
		m.SetAccountType(*v)
	}
	if v := i.CurrencySymbol; v != nil {
		m.SetCurrencySymbol(*v)
	}
	if v := i.Ticker; v != nil {
		m.SetTicker(*v)
	}
	if v := i.TickerType; v != nil {
		m.SetTickerType(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearTransactionEntry {
		m.ClearTransactionEntry()
	}
	if v := i.AddTransactionEntryIDs; len(v) > 0 {
		m.AddTransactionEntryIDs(v...)
	}
	if v := i.RemoveTransactionEntryIDs; len(v) > 0 {
		m.RemoveTransactionEntryIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdate builder.
func (c *AccountUpdate) SetInput(i UpdateAccountInput) *AccountUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdateOne builder.
func (c *AccountUpdateOne) SetInput(i UpdateAccountInput) *AccountUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProfileInput represents a mutation input for creating profiles.
type CreateProfileInput struct {
	Currencies     string
	NetWorthGoal   decimal.Decimal
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	AccountIDs     []string
	TransactionIDs []string
}

// Mutate applies the CreateProfileInput on the ProfileMutation builder.
func (i *CreateProfileInput) Mutate(m *ProfileMutation) {
	m.SetCurrencies(i.Currencies)
	m.SetNetWorthGoal(i.NetWorthGoal)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
	if v := i.TransactionIDs; len(v) > 0 {
		m.AddTransactionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProfileInput on the ProfileCreate builder.
func (c *ProfileCreate) SetInput(i CreateProfileInput) *ProfileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProfileInput represents a mutation input for updating profiles.
type UpdateProfileInput struct {
	Currencies           *string
	NetWorthGoal         *decimal.Decimal
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	ClearAccount         bool
	AddAccountIDs        []string
	RemoveAccountIDs     []string
	ClearTransaction     bool
	AddTransactionIDs    []string
	RemoveTransactionIDs []string
}

// Mutate applies the UpdateProfileInput on the ProfileMutation builder.
func (i *UpdateProfileInput) Mutate(m *ProfileMutation) {
	if v := i.Currencies; v != nil {
		m.SetCurrencies(*v)
	}
	if v := i.NetWorthGoal; v != nil {
		m.SetNetWorthGoal(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAccount {
		m.ClearAccount()
	}
	if v := i.AddAccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
	if v := i.RemoveAccountIDs; len(v) > 0 {
		m.RemoveAccountIDs(v...)
	}
	if i.ClearTransaction {
		m.ClearTransaction()
	}
	if v := i.AddTransactionIDs; len(v) > 0 {
		m.AddTransactionIDs(v...)
	}
	if v := i.RemoveTransactionIDs; len(v) > 0 {
		m.RemoveTransactionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProfileInput on the ProfileUpdate builder.
func (c *ProfileUpdate) SetInput(i UpdateProfileInput) *ProfileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProfileInput on the ProfileUpdateOne builder.
func (c *ProfileUpdateOne) SetInput(i UpdateProfileInput) *ProfileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTransactionInput represents a mutation input for creating transactions.
type CreateTransactionInput struct {
	Note                *string
	Datetime            *time.Time
	CreatedAt           *time.Time
	UpdatedAt           *time.Time
	ProfileID           string
	TransactionEntryIDs []string
}

// Mutate applies the CreateTransactionInput on the TransactionMutation builder.
func (i *CreateTransactionInput) Mutate(m *TransactionMutation) {
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Datetime; v != nil {
		m.SetDatetime(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProfileID(i.ProfileID)
	if v := i.TransactionEntryIDs; len(v) > 0 {
		m.AddTransactionEntryIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTransactionInput on the TransactionCreate builder.
func (c *TransactionCreate) SetInput(i CreateTransactionInput) *TransactionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTransactionInput represents a mutation input for updating transactions.
type UpdateTransactionInput struct {
	ClearNote                 bool
	Note                      *string
	Datetime                  *time.Time
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	ProfileID                 *string
	ClearTransactionEntries   bool
	AddTransactionEntryIDs    []string
	RemoveTransactionEntryIDs []string
}

// Mutate applies the UpdateTransactionInput on the TransactionMutation builder.
func (i *UpdateTransactionInput) Mutate(m *TransactionMutation) {
	if i.ClearNote {
		m.ClearNote()
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Datetime; v != nil {
		m.SetDatetime(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.ProfileID; v != nil {
		m.SetProfileID(*v)
	}
	if i.ClearTransactionEntries {
		m.ClearTransactionEntries()
	}
	if v := i.AddTransactionEntryIDs; len(v) > 0 {
		m.AddTransactionEntryIDs(v...)
	}
	if v := i.RemoveTransactionEntryIDs; len(v) > 0 {
		m.RemoveTransactionEntryIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTransactionInput on the TransactionUpdate builder.
func (c *TransactionUpdate) SetInput(i UpdateTransactionInput) *TransactionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTransactionInput on the TransactionUpdateOne builder.
func (c *TransactionUpdateOne) SetInput(i UpdateTransactionInput) *TransactionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Email      string
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	UserKeyIDs []string
	ProfileIDs []string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UserKeyIDs; len(v) > 0 {
		m.AddUserKeyIDs(v...)
	}
	if v := i.ProfileIDs; len(v) > 0 {
		m.AddProfileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserKeyInput represents a mutation input for creating userkeys.
type CreateUserKeyInput struct {
	HashedPassword *string
	UserID         string
}

// Mutate applies the CreateUserKeyInput on the UserKeyMutation builder.
func (i *CreateUserKeyInput) Mutate(m *UserKeyMutation) {
	if v := i.HashedPassword; v != nil {
		m.SetHashedPassword(*v)
	}
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateUserKeyInput on the UserKeyCreate builder.
func (c *UserKeyCreate) SetInput(i CreateUserKeyInput) *UserKeyCreate {
	i.Mutate(c.Mutation())
	return c
}
