// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/account"
	"fijoy/ent/category"
	"time"

	"github.com/shopspring/decimal"
)

// CreateAccountInput represents a mutation input for creating accounts.
type CreateAccountInput struct {
	CreateTime          *time.Time
	UpdateTime          *time.Time
	Name                string
	Institution         string
	AccountType         account.AccountType
	InvestmentType      account.InvestmentType
	CurrencyCode        string
	Ticker              string
	TickerType          account.TickerType
	Amount              decimal.Decimal
	Archived            *bool
	TransactionEntryIDs []int
	SnapshotAccountIDs  []int
}

// Mutate applies the CreateAccountInput on the AccountMutation builder.
func (i *CreateAccountInput) Mutate(m *AccountMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	m.SetInstitution(i.Institution)
	m.SetAccountType(i.AccountType)
	m.SetInvestmentType(i.InvestmentType)
	m.SetCurrencyCode(i.CurrencyCode)
	m.SetTicker(i.Ticker)
	m.SetTickerType(i.TickerType)
	m.SetAmount(i.Amount)
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	if v := i.TransactionEntryIDs; len(v) > 0 {
		m.AddTransactionEntryIDs(v...)
	}
	if v := i.SnapshotAccountIDs; len(v) > 0 {
		m.AddSnapshotAccountIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAccountInput on the AccountCreate builder.
func (c *AccountCreate) SetInput(i CreateAccountInput) *AccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAccountInput represents a mutation input for updating accounts.
type UpdateAccountInput struct {
	UpdateTime                *time.Time
	Name                      *string
	Institution               *string
	InvestmentType            *account.InvestmentType
	Amount                    *decimal.Decimal
	Archived                  *bool
	ClearTransactionEntries   bool
	AddTransactionEntryIDs    []int
	RemoveTransactionEntryIDs []int
	ClearSnapshotAccounts     bool
	AddSnapshotAccountIDs     []int
	RemoveSnapshotAccountIDs  []int
}

// Mutate applies the UpdateAccountInput on the AccountMutation builder.
func (i *UpdateAccountInput) Mutate(m *AccountMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Institution; v != nil {
		m.SetInstitution(*v)
	}
	if v := i.InvestmentType; v != nil {
		m.SetInvestmentType(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	if i.ClearTransactionEntries {
		m.ClearTransactionEntries()
	}
	if v := i.AddTransactionEntryIDs; len(v) > 0 {
		m.AddTransactionEntryIDs(v...)
	}
	if v := i.RemoveTransactionEntryIDs; len(v) > 0 {
		m.RemoveTransactionEntryIDs(v...)
	}
	if i.ClearSnapshotAccounts {
		m.ClearSnapshotAccounts()
	}
	if v := i.AddSnapshotAccountIDs; len(v) > 0 {
		m.AddSnapshotAccountIDs(v...)
	}
	if v := i.RemoveSnapshotAccountIDs; len(v) > 0 {
		m.RemoveSnapshotAccountIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdate builder.
func (c *AccountUpdate) SetInput(i UpdateAccountInput) *AccountUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdateOne builder.
func (c *AccountUpdateOne) SetInput(i UpdateAccountInput) *AccountUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCategoryInput represents a mutation input for creating categories.
type CreateCategoryInput struct {
	CreateTime     *time.Time
	UpdateTime     *time.Time
	Name           string
	CategoryType   category.CategoryType
	TransactionIDs []int
}

// Mutate applies the CreateCategoryInput on the CategoryMutation builder.
func (i *CreateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	m.SetCategoryType(i.CategoryType)
	if v := i.TransactionIDs; len(v) > 0 {
		m.AddTransactionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCategoryInput on the CategoryCreate builder.
func (c *CategoryCreate) SetInput(i CreateCategoryInput) *CategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCategoryInput represents a mutation input for updating categories.
type UpdateCategoryInput struct {
	UpdateTime           *time.Time
	Name                 *string
	ClearTransactions    bool
	AddTransactionIDs    []int
	RemoveTransactionIDs []int
}

// Mutate applies the UpdateCategoryInput on the CategoryMutation builder.
func (i *UpdateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearTransactions {
		m.ClearTransactions()
	}
	if v := i.AddTransactionIDs; len(v) > 0 {
		m.AddTransactionIDs(v...)
	}
	if v := i.RemoveTransactionIDs; len(v) > 0 {
		m.RemoveTransactionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCategoryInput on the CategoryUpdate builder.
func (c *CategoryUpdate) SetInput(i UpdateCategoryInput) *CategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCategoryInput on the CategoryUpdateOne builder.
func (c *CategoryUpdateOne) SetInput(i UpdateCategoryInput) *CategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProfileInput represents a mutation input for creating profiles.
type CreateProfileInput struct {
	CreateTime     *time.Time
	UpdateTime     *time.Time
	Name           string
	Currencies     []string
	NetWorthGoal   decimal.Decimal
	AccountIDs     []int
	TransactionIDs []int
	SnapshotIDs    []int
	CategoryIDs    []int
}

// Mutate applies the CreateProfileInput on the ProfileMutation builder.
func (i *CreateProfileInput) Mutate(m *ProfileMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if v := i.Currencies; v != nil {
		m.SetCurrencies(v)
	}
	m.SetNetWorthGoal(i.NetWorthGoal)
	if v := i.AccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
	if v := i.TransactionIDs; len(v) > 0 {
		m.AddTransactionIDs(v...)
	}
	if v := i.SnapshotIDs; len(v) > 0 {
		m.AddSnapshotIDs(v...)
	}
	if v := i.CategoryIDs; len(v) > 0 {
		m.AddCategoryIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProfileInput on the ProfileCreate builder.
func (c *ProfileCreate) SetInput(i CreateProfileInput) *ProfileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProfileInput represents a mutation input for updating profiles.
type UpdateProfileInput struct {
	UpdateTime           *time.Time
	Name                 *string
	Currencies           []string
	AppendCurrencies     []string
	NetWorthGoal         *decimal.Decimal
	ClearAccounts        bool
	AddAccountIDs        []int
	RemoveAccountIDs     []int
	ClearTransactions    bool
	AddTransactionIDs    []int
	RemoveTransactionIDs []int
	ClearSnapshots       bool
	AddSnapshotIDs       []int
	RemoveSnapshotIDs    []int
	ClearCategories      bool
	AddCategoryIDs       []int
	RemoveCategoryIDs    []int
}

// Mutate applies the UpdateProfileInput on the ProfileMutation builder.
func (i *UpdateProfileInput) Mutate(m *ProfileMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Currencies; v != nil {
		m.SetCurrencies(v)
	}
	if i.AppendCurrencies != nil {
		m.AppendCurrencies(i.Currencies)
	}
	if v := i.NetWorthGoal; v != nil {
		m.SetNetWorthGoal(*v)
	}
	if i.ClearAccounts {
		m.ClearAccounts()
	}
	if v := i.AddAccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
	if v := i.RemoveAccountIDs; len(v) > 0 {
		m.RemoveAccountIDs(v...)
	}
	if i.ClearTransactions {
		m.ClearTransactions()
	}
	if v := i.AddTransactionIDs; len(v) > 0 {
		m.AddTransactionIDs(v...)
	}
	if v := i.RemoveTransactionIDs; len(v) > 0 {
		m.RemoveTransactionIDs(v...)
	}
	if i.ClearSnapshots {
		m.ClearSnapshots()
	}
	if v := i.AddSnapshotIDs; len(v) > 0 {
		m.AddSnapshotIDs(v...)
	}
	if v := i.RemoveSnapshotIDs; len(v) > 0 {
		m.RemoveSnapshotIDs(v...)
	}
	if i.ClearCategories {
		m.ClearCategories()
	}
	if v := i.AddCategoryIDs; len(v) > 0 {
		m.AddCategoryIDs(v...)
	}
	if v := i.RemoveCategoryIDs; len(v) > 0 {
		m.RemoveCategoryIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProfileInput on the ProfileUpdate builder.
func (c *ProfileUpdate) SetInput(i UpdateProfileInput) *ProfileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProfileInput on the ProfileUpdateOne builder.
func (c *ProfileUpdateOne) SetInput(i UpdateProfileInput) *ProfileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTransactionInput represents a mutation input for creating transactions.
type CreateTransactionInput struct {
	CreateTime          *time.Time
	UpdateTime          *time.Time
	Note                *string
	TransactionEntryIDs []int
}

// Mutate applies the CreateTransactionInput on the TransactionMutation builder.
func (i *CreateTransactionInput) Mutate(m *TransactionMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.TransactionEntryIDs; len(v) > 0 {
		m.AddTransactionEntryIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTransactionInput on the TransactionCreate builder.
func (c *TransactionCreate) SetInput(i CreateTransactionInput) *TransactionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTransactionInput represents a mutation input for updating transactions.
type UpdateTransactionInput struct {
	UpdateTime                *time.Time
	ClearNote                 bool
	Note                      *string
	ClearTransactionEntries   bool
	AddTransactionEntryIDs    []int
	RemoveTransactionEntryIDs []int
}

// Mutate applies the UpdateTransactionInput on the TransactionMutation builder.
func (i *UpdateTransactionInput) Mutate(m *TransactionMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearNote {
		m.ClearNote()
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if i.ClearTransactionEntries {
		m.ClearTransactionEntries()
	}
	if v := i.AddTransactionEntryIDs; len(v) > 0 {
		m.AddTransactionEntryIDs(v...)
	}
	if v := i.RemoveTransactionEntryIDs; len(v) > 0 {
		m.RemoveTransactionEntryIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTransactionInput on the TransactionUpdate builder.
func (c *TransactionUpdate) SetInput(i UpdateTransactionInput) *TransactionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTransactionInput on the TransactionUpdateOne builder.
func (c *TransactionUpdateOne) SetInput(i UpdateTransactionInput) *TransactionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTransactionEntryInput represents a mutation input for creating transactionentries.
type CreateTransactionEntryInput struct {
	CreateTime    *time.Time
	UpdateTime    *time.Time
	Note          *string
	Amount        decimal.Decimal
	AccountID     int
	TransactionID int
}

// Mutate applies the CreateTransactionEntryInput on the TransactionEntryMutation builder.
func (i *CreateTransactionEntryInput) Mutate(m *TransactionEntryMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	m.SetAmount(i.Amount)
	m.SetAccountID(i.AccountID)
	m.SetTransactionID(i.TransactionID)
}

// SetInput applies the change-set in the CreateTransactionEntryInput on the TransactionEntryCreate builder.
func (c *TransactionEntryCreate) SetInput(i CreateTransactionEntryInput) *TransactionEntryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTransactionEntryInput represents a mutation input for updating transactionentries.
type UpdateTransactionEntryInput struct {
	UpdateTime    *time.Time
	ClearNote     bool
	Note          *string
	Amount        *decimal.Decimal
	AccountID     *int
	TransactionID *int
}

// Mutate applies the UpdateTransactionEntryInput on the TransactionEntryMutation builder.
func (i *UpdateTransactionEntryInput) Mutate(m *TransactionEntryMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearNote {
		m.ClearNote()
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if v := i.AccountID; v != nil {
		m.SetAccountID(*v)
	}
	if v := i.TransactionID; v != nil {
		m.SetTransactionID(*v)
	}
}

// SetInput applies the change-set in the UpdateTransactionEntryInput on the TransactionEntryUpdate builder.
func (c *TransactionEntryUpdate) SetInput(i UpdateTransactionEntryInput) *TransactionEntryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTransactionEntryInput on the TransactionEntryUpdateOne builder.
func (c *TransactionEntryUpdateOne) SetInput(i UpdateTransactionEntryInput) *TransactionEntryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Email      string
	UserKeyIDs []int
	ProfileIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetEmail(i.Email)
	if v := i.UserKeyIDs; len(v) > 0 {
		m.AddUserKeyIDs(v...)
	}
	if v := i.ProfileIDs; len(v) > 0 {
		m.AddProfileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserKeyInput represents a mutation input for creating userkeys.
type CreateUserKeyInput struct {
	CreateTime     *time.Time
	UpdateTime     *time.Time
	Key            string
	HashedPassword *string
	UserID         int
}

// Mutate applies the CreateUserKeyInput on the UserKeyMutation builder.
func (i *CreateUserKeyInput) Mutate(m *UserKeyMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetKey(i.Key)
	if v := i.HashedPassword; v != nil {
		m.SetHashedPassword(*v)
	}
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateUserKeyInput on the UserKeyCreate builder.
func (c *UserKeyCreate) SetInput(i CreateUserKeyInput) *UserKeyCreate {
	i.Mutate(c.Mutation())
	return c
}
