// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/account"
	"time"

	"github.com/shopspring/decimal"
)

// CreateAccountInput represents a mutation input for creating accounts.
type CreateAccountInput struct {
	Name           string
	AccountType    account.AccountType
	Symbol         string
	SymbolType     account.SymbolType
	Amount         decimal.Decimal
	Value          decimal.Decimal
	FxRate         *decimal.Decimal
	Balance        decimal.Decimal
	Archived       *bool
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	ProfileID      string
	TransactionIDs []string
}

// Mutate applies the CreateAccountInput on the AccountMutation builder.
func (i *CreateAccountInput) Mutate(m *AccountMutation) {
	m.SetName(i.Name)
	m.SetAccountType(i.AccountType)
	m.SetSymbol(i.Symbol)
	m.SetSymbolType(i.SymbolType)
	m.SetAmount(i.Amount)
	m.SetValue(i.Value)
	if v := i.FxRate; v != nil {
		m.SetFxRate(*v)
	}
	m.SetBalance(i.Balance)
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProfileID(i.ProfileID)
	if v := i.TransactionIDs; len(v) > 0 {
		m.AddTransactionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAccountInput on the AccountCreate builder.
func (c *AccountCreate) SetInput(i CreateAccountInput) *AccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateProfileInput represents a mutation input for creating profiles.
type CreateProfileInput struct {
	Locale         string
	Currencies     string
	NetWorthGoal   decimal.Decimal
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	UserID         string
	AccountIDs     []string
	TransactionIDs []string
}

// Mutate applies the CreateProfileInput on the ProfileMutation builder.
func (i *CreateProfileInput) Mutate(m *ProfileMutation) {
	m.SetLocale(i.Locale)
	m.SetCurrencies(i.Currencies)
	m.SetNetWorthGoal(i.NetWorthGoal)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetUserID(i.UserID)
	if v := i.AccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
	if v := i.TransactionIDs; len(v) > 0 {
		m.AddTransactionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProfileInput on the ProfileCreate builder.
func (c *ProfileCreate) SetInput(i CreateProfileInput) *ProfileCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateTransactionInput represents a mutation input for creating transactions.
type CreateTransactionInput struct {
	Amount    decimal.Decimal
	Note      *string
	Datetime  *time.Time
	CreatedAt *time.Time
	UpdatedAt *time.Time
	ProfileID string
	AccountID string
}

// Mutate applies the CreateTransactionInput on the TransactionMutation builder.
func (i *CreateTransactionInput) Mutate(m *TransactionMutation) {
	m.SetAmount(i.Amount)
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Datetime; v != nil {
		m.SetDatetime(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProfileID(i.ProfileID)
	m.SetAccountID(i.AccountID)
}

// SetInput applies the change-set in the CreateTransactionInput on the TransactionCreate builder.
func (c *TransactionCreate) SetInput(i CreateTransactionInput) *TransactionCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Email      string
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	UserKeyIDs []string
	ProfileIDs []string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UserKeyIDs; len(v) > 0 {
		m.AddUserKeyIDs(v...)
	}
	if v := i.ProfileIDs; len(v) > 0 {
		m.AddProfileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserKeyInput represents a mutation input for creating userkeys.
type CreateUserKeyInput struct {
	HashedPassword *string
	UserID         string
}

// Mutate applies the CreateUserKeyInput on the UserKeyMutation builder.
func (i *CreateUserKeyInput) Mutate(m *UserKeyMutation) {
	if v := i.HashedPassword; v != nil {
		m.SetHashedPassword(*v)
	}
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateUserKeyInput on the UserKeyCreate builder.
func (c *UserKeyCreate) SetInput(i CreateUserKeyInput) *UserKeyCreate {
	i.Mutate(c.Mutation())
	return c
}
