// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/profile"
	"fijoy/ent/transaction"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// The total balance of this transaction entry in user's display currency. Note that this is an aggregate of all the transaction entries belong to this transaction
	Balance decimal.Decimal `json:"balance,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Datetime holds the value of the "datetime" field.
	Datetime time.Time `json:"datetime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges                TransactionEdges `json:"edges"`
	profile_transactions *string
	selectValues         sql.SelectValues
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// TransactionEntries holds the value of the transaction_entries edge.
	TransactionEntries []*TransactionEntry `json:"transaction_entries,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTransactionEntries map[string][]*TransactionEntry
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// TransactionEntriesOrErr returns the TransactionEntries value or an error if the edge
// was not loaded in eager-loading.
func (e TransactionEdges) TransactionEntriesOrErr() ([]*TransactionEntry, error) {
	if e.loadedTypes[1] {
		return e.TransactionEntries, nil
	}
	return nil, &NotLoadedError{edge: "transaction_entries"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldBalance:
			values[i] = new(decimal.Decimal)
		case transaction.FieldID, transaction.FieldNote:
			values[i] = new(sql.NullString)
		case transaction.FieldCreateTime, transaction.FieldUpdateTime, transaction.FieldDatetime:
			values[i] = new(sql.NullTime)
		case transaction.ForeignKeys[0]: // profile_transactions
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case transaction.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case transaction.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case transaction.FieldBalance:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value != nil {
				t.Balance = *value
			}
		case transaction.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				t.Note = value.String
			}
		case transaction.FieldDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field datetime", values[i])
			} else if value.Valid {
				t.Datetime = value.Time
			}
		case transaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_transactions", values[i])
			} else if value.Valid {
				t.profile_transactions = new(string)
				*t.profile_transactions = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the Transaction entity.
func (t *Transaction) QueryProfile() *ProfileQuery {
	return NewTransactionClient(t.config).QueryProfile(t)
}

// QueryTransactionEntries queries the "transaction_entries" edge of the Transaction entity.
func (t *Transaction) QueryTransactionEntries() *TransactionEntryQuery {
	return NewTransactionClient(t.config).QueryTransactionEntries(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", t.Balance))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(t.Note)
	builder.WriteString(", ")
	builder.WriteString("datetime=")
	builder.WriteString(t.Datetime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransactionEntries returns the TransactionEntries named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Transaction) NamedTransactionEntries(name string) ([]*TransactionEntry, error) {
	if t.Edges.namedTransactionEntries == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedTransactionEntries[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Transaction) appendNamedTransactionEntries(name string, edges ...*TransactionEntry) {
	if t.Edges.namedTransactionEntries == nil {
		t.Edges.namedTransactionEntries = make(map[string][]*TransactionEntry)
	}
	if len(edges) == 0 {
		t.Edges.namedTransactionEntries[name] = []*TransactionEntry{}
	} else {
		t.Edges.namedTransactionEntries[name] = append(t.Edges.namedTransactionEntries[name], edges...)
	}
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
