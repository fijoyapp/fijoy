// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/predicate"
	"fijoy/ent/user"
	"fijoy/ent/userkey"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserKeyUpdate is the builder for updating UserKey entities.
type UserKeyUpdate struct {
	config
	hooks    []Hook
	mutation *UserKeyMutation
}

// Where appends a list predicates to the UserKeyUpdate builder.
func (uku *UserKeyUpdate) Where(ps ...predicate.UserKey) *UserKeyUpdate {
	uku.mutation.Where(ps...)
	return uku
}

// SetUpdateTime sets the "update_time" field.
func (uku *UserKeyUpdate) SetUpdateTime(t time.Time) *UserKeyUpdate {
	uku.mutation.SetUpdateTime(t)
	return uku
}

// SetHashedPassword sets the "hashed_password" field.
func (uku *UserKeyUpdate) SetHashedPassword(s string) *UserKeyUpdate {
	uku.mutation.SetHashedPassword(s)
	return uku
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (uku *UserKeyUpdate) SetNillableHashedPassword(s *string) *UserKeyUpdate {
	if s != nil {
		uku.SetHashedPassword(*s)
	}
	return uku
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (uku *UserKeyUpdate) ClearHashedPassword() *UserKeyUpdate {
	uku.mutation.ClearHashedPassword()
	return uku
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uku *UserKeyUpdate) SetUserID(id string) *UserKeyUpdate {
	uku.mutation.SetUserID(id)
	return uku
}

// SetUser sets the "user" edge to the User entity.
func (uku *UserKeyUpdate) SetUser(u *User) *UserKeyUpdate {
	return uku.SetUserID(u.ID)
}

// Mutation returns the UserKeyMutation object of the builder.
func (uku *UserKeyUpdate) Mutation() *UserKeyMutation {
	return uku.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uku *UserKeyUpdate) ClearUser() *UserKeyUpdate {
	uku.mutation.ClearUser()
	return uku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uku *UserKeyUpdate) Save(ctx context.Context) (int, error) {
	uku.defaults()
	return withHooks(ctx, uku.sqlSave, uku.mutation, uku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uku *UserKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := uku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uku *UserKeyUpdate) Exec(ctx context.Context) error {
	_, err := uku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uku *UserKeyUpdate) ExecX(ctx context.Context) {
	if err := uku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uku *UserKeyUpdate) defaults() {
	if _, ok := uku.mutation.UpdateTime(); !ok {
		v := userkey.UpdateDefaultUpdateTime()
		uku.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uku *UserKeyUpdate) check() error {
	if uku.mutation.UserCleared() && len(uku.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserKey.user"`)
	}
	return nil
}

func (uku *UserKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userkey.Table, userkey.Columns, sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString))
	if ps := uku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uku.mutation.UpdateTime(); ok {
		_spec.SetField(userkey.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uku.mutation.HashedPassword(); ok {
		_spec.SetField(userkey.FieldHashedPassword, field.TypeString, value)
	}
	if uku.mutation.HashedPasswordCleared() {
		_spec.ClearField(userkey.FieldHashedPassword, field.TypeString)
	}
	if uku.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.UserTable,
			Columns: []string{userkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uku.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.UserTable,
			Columns: []string{userkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uku.mutation.done = true
	return n, nil
}

// UserKeyUpdateOne is the builder for updating a single UserKey entity.
type UserKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserKeyMutation
}

// SetUpdateTime sets the "update_time" field.
func (ukuo *UserKeyUpdateOne) SetUpdateTime(t time.Time) *UserKeyUpdateOne {
	ukuo.mutation.SetUpdateTime(t)
	return ukuo
}

// SetHashedPassword sets the "hashed_password" field.
func (ukuo *UserKeyUpdateOne) SetHashedPassword(s string) *UserKeyUpdateOne {
	ukuo.mutation.SetHashedPassword(s)
	return ukuo
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (ukuo *UserKeyUpdateOne) SetNillableHashedPassword(s *string) *UserKeyUpdateOne {
	if s != nil {
		ukuo.SetHashedPassword(*s)
	}
	return ukuo
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (ukuo *UserKeyUpdateOne) ClearHashedPassword() *UserKeyUpdateOne {
	ukuo.mutation.ClearHashedPassword()
	return ukuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ukuo *UserKeyUpdateOne) SetUserID(id string) *UserKeyUpdateOne {
	ukuo.mutation.SetUserID(id)
	return ukuo
}

// SetUser sets the "user" edge to the User entity.
func (ukuo *UserKeyUpdateOne) SetUser(u *User) *UserKeyUpdateOne {
	return ukuo.SetUserID(u.ID)
}

// Mutation returns the UserKeyMutation object of the builder.
func (ukuo *UserKeyUpdateOne) Mutation() *UserKeyMutation {
	return ukuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ukuo *UserKeyUpdateOne) ClearUser() *UserKeyUpdateOne {
	ukuo.mutation.ClearUser()
	return ukuo
}

// Where appends a list predicates to the UserKeyUpdate builder.
func (ukuo *UserKeyUpdateOne) Where(ps ...predicate.UserKey) *UserKeyUpdateOne {
	ukuo.mutation.Where(ps...)
	return ukuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ukuo *UserKeyUpdateOne) Select(field string, fields ...string) *UserKeyUpdateOne {
	ukuo.fields = append([]string{field}, fields...)
	return ukuo
}

// Save executes the query and returns the updated UserKey entity.
func (ukuo *UserKeyUpdateOne) Save(ctx context.Context) (*UserKey, error) {
	ukuo.defaults()
	return withHooks(ctx, ukuo.sqlSave, ukuo.mutation, ukuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ukuo *UserKeyUpdateOne) SaveX(ctx context.Context) *UserKey {
	node, err := ukuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ukuo *UserKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := ukuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ukuo *UserKeyUpdateOne) ExecX(ctx context.Context) {
	if err := ukuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ukuo *UserKeyUpdateOne) defaults() {
	if _, ok := ukuo.mutation.UpdateTime(); !ok {
		v := userkey.UpdateDefaultUpdateTime()
		ukuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ukuo *UserKeyUpdateOne) check() error {
	if ukuo.mutation.UserCleared() && len(ukuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserKey.user"`)
	}
	return nil
}

func (ukuo *UserKeyUpdateOne) sqlSave(ctx context.Context) (_node *UserKey, err error) {
	if err := ukuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userkey.Table, userkey.Columns, sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString))
	id, ok := ukuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ukuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userkey.FieldID)
		for _, f := range fields {
			if !userkey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userkey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ukuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ukuo.mutation.UpdateTime(); ok {
		_spec.SetField(userkey.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ukuo.mutation.HashedPassword(); ok {
		_spec.SetField(userkey.FieldHashedPassword, field.TypeString, value)
	}
	if ukuo.mutation.HashedPasswordCleared() {
		_spec.ClearField(userkey.FieldHashedPassword, field.TypeString)
	}
	if ukuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.UserTable,
			Columns: []string{userkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ukuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.UserTable,
			Columns: []string{userkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserKey{config: ukuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ukuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ukuo.mutation.done = true
	return _node, nil
}
