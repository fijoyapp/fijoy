// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/predicate"
	"fijoy/ent/user"
	"fijoy/ent/userkey"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserKeyUpdate is the builder for updating UserKey entities.
type UserKeyUpdate struct {
	config
	hooks    []Hook
	mutation *UserKeyMutation
}

// Where appends a list predicates to the UserKeyUpdate builder.
func (_u *UserKeyUpdate) Where(ps ...predicate.UserKey) *UserKeyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *UserKeyUpdate) SetUpdateTime(v time.Time) *UserKeyUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetKey sets the "key" field.
func (_u *UserKeyUpdate) SetKey(v string) *UserKeyUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *UserKeyUpdate) SetNillableKey(v *string) *UserKeyUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *UserKeyUpdate) SetHashedPassword(v string) *UserKeyUpdate {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *UserKeyUpdate) SetNillableHashedPassword(v *string) *UserKeyUpdate {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (_u *UserKeyUpdate) ClearHashedPassword() *UserKeyUpdate {
	_u.mutation.ClearHashedPassword()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserKeyUpdate) SetUserID(id int) *UserKeyUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserKeyUpdate) SetUser(v *User) *UserKeyUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the UserKeyMutation object of the builder.
func (_u *UserKeyUpdate) Mutation() *UserKeyMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserKeyUpdate) ClearUser() *UserKeyUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserKeyUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserKeyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserKeyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserKeyUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := userkey.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserKeyUpdate) check() error {
	if v, ok := _u.mutation.Key(); ok {
		if err := userkey.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "UserKey.key": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserKey.user"`)
	}
	return nil
}

func (_u *UserKeyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userkey.Table, userkey.Columns, sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(userkey.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(userkey.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(userkey.FieldHashedPassword, field.TypeString, value)
	}
	if _u.mutation.HashedPasswordCleared() {
		_spec.ClearField(userkey.FieldHashedPassword, field.TypeString)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.UserTable,
			Columns: []string{userkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.UserTable,
			Columns: []string{userkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserKeyUpdateOne is the builder for updating a single UserKey entity.
type UserKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserKeyMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *UserKeyUpdateOne) SetUpdateTime(v time.Time) *UserKeyUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetKey sets the "key" field.
func (_u *UserKeyUpdateOne) SetKey(v string) *UserKeyUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *UserKeyUpdateOne) SetNillableKey(v *string) *UserKeyUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *UserKeyUpdateOne) SetHashedPassword(v string) *UserKeyUpdateOne {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *UserKeyUpdateOne) SetNillableHashedPassword(v *string) *UserKeyUpdateOne {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (_u *UserKeyUpdateOne) ClearHashedPassword() *UserKeyUpdateOne {
	_u.mutation.ClearHashedPassword()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserKeyUpdateOne) SetUserID(id int) *UserKeyUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserKeyUpdateOne) SetUser(v *User) *UserKeyUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the UserKeyMutation object of the builder.
func (_u *UserKeyUpdateOne) Mutation() *UserKeyMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserKeyUpdateOne) ClearUser() *UserKeyUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the UserKeyUpdate builder.
func (_u *UserKeyUpdateOne) Where(ps ...predicate.UserKey) *UserKeyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserKeyUpdateOne) Select(field string, fields ...string) *UserKeyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserKey entity.
func (_u *UserKeyUpdateOne) Save(ctx context.Context) (*UserKey, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserKeyUpdateOne) SaveX(ctx context.Context) *UserKey {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserKeyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserKeyUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := userkey.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserKeyUpdateOne) check() error {
	if v, ok := _u.mutation.Key(); ok {
		if err := userkey.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "UserKey.key": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserKey.user"`)
	}
	return nil
}

func (_u *UserKeyUpdateOne) sqlSave(ctx context.Context) (_node *UserKey, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userkey.Table, userkey.Columns, sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userkey.FieldID)
		for _, f := range fields {
			if !userkey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userkey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(userkey.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(userkey.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(userkey.FieldHashedPassword, field.TypeString, value)
	}
	if _u.mutation.HashedPasswordCleared() {
		_spec.ClearField(userkey.FieldHashedPassword, field.TypeString)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.UserTable,
			Columns: []string{userkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.UserTable,
			Columns: []string{userkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserKey{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
