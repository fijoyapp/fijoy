// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/overallsnapshot"
	"fijoy/ent/profile"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// OverallSnapshotCreate is the builder for creating a OverallSnapshot entity.
type OverallSnapshotCreate struct {
	config
	mutation *OverallSnapshotMutation
	hooks    []Hook
}

// SetDatehour sets the "datehour" field.
func (osc *OverallSnapshotCreate) SetDatehour(t time.Time) *OverallSnapshotCreate {
	osc.mutation.SetDatehour(t)
	return osc
}

// SetLiquidity sets the "liquidity" field.
func (osc *OverallSnapshotCreate) SetLiquidity(d decimal.Decimal) *OverallSnapshotCreate {
	osc.mutation.SetLiquidity(d)
	return osc
}

// SetInvestment sets the "investment" field.
func (osc *OverallSnapshotCreate) SetInvestment(d decimal.Decimal) *OverallSnapshotCreate {
	osc.mutation.SetInvestment(d)
	return osc
}

// SetProperty sets the "property" field.
func (osc *OverallSnapshotCreate) SetProperty(d decimal.Decimal) *OverallSnapshotCreate {
	osc.mutation.SetProperty(d)
	return osc
}

// SetReceivable sets the "receivable" field.
func (osc *OverallSnapshotCreate) SetReceivable(d decimal.Decimal) *OverallSnapshotCreate {
	osc.mutation.SetReceivable(d)
	return osc
}

// SetLiability sets the "liability" field.
func (osc *OverallSnapshotCreate) SetLiability(d decimal.Decimal) *OverallSnapshotCreate {
	osc.mutation.SetLiability(d)
	return osc
}

// SetID sets the "id" field.
func (osc *OverallSnapshotCreate) SetID(s string) *OverallSnapshotCreate {
	osc.mutation.SetID(s)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OverallSnapshotCreate) SetNillableID(s *string) *OverallSnapshotCreate {
	if s != nil {
		osc.SetID(*s)
	}
	return osc
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (osc *OverallSnapshotCreate) SetProfileID(id string) *OverallSnapshotCreate {
	osc.mutation.SetProfileID(id)
	return osc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (osc *OverallSnapshotCreate) SetProfile(p *Profile) *OverallSnapshotCreate {
	return osc.SetProfileID(p.ID)
}

// Mutation returns the OverallSnapshotMutation object of the builder.
func (osc *OverallSnapshotCreate) Mutation() *OverallSnapshotMutation {
	return osc.mutation
}

// Save creates the OverallSnapshot in the database.
func (osc *OverallSnapshotCreate) Save(ctx context.Context) (*OverallSnapshot, error) {
	osc.defaults()
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OverallSnapshotCreate) SaveX(ctx context.Context) *OverallSnapshot {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OverallSnapshotCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OverallSnapshotCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OverallSnapshotCreate) defaults() {
	if _, ok := osc.mutation.ID(); !ok {
		v := overallsnapshot.DefaultID()
		osc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OverallSnapshotCreate) check() error {
	switch osc.driver.Dialect() {
	case dialect.MySQL, dialect.SQLite:
		if _, ok := osc.mutation.Datehour(); !ok {
			return &ValidationError{Name: "datehour", err: errors.New(`ent: missing required field "OverallSnapshot.datehour"`)}
		}
	}
	if _, ok := osc.mutation.Liquidity(); !ok {
		return &ValidationError{Name: "liquidity", err: errors.New(`ent: missing required field "OverallSnapshot.liquidity"`)}
	}
	if _, ok := osc.mutation.Investment(); !ok {
		return &ValidationError{Name: "investment", err: errors.New(`ent: missing required field "OverallSnapshot.investment"`)}
	}
	if _, ok := osc.mutation.Property(); !ok {
		return &ValidationError{Name: "property", err: errors.New(`ent: missing required field "OverallSnapshot.property"`)}
	}
	if _, ok := osc.mutation.Receivable(); !ok {
		return &ValidationError{Name: "receivable", err: errors.New(`ent: missing required field "OverallSnapshot.receivable"`)}
	}
	if _, ok := osc.mutation.Liability(); !ok {
		return &ValidationError{Name: "liability", err: errors.New(`ent: missing required field "OverallSnapshot.liability"`)}
	}
	if len(osc.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "OverallSnapshot.profile"`)}
	}
	return nil
}

func (osc *OverallSnapshotCreate) sqlSave(ctx context.Context) (*OverallSnapshot, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OverallSnapshot.ID type: %T", _spec.ID.Value)
		}
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OverallSnapshotCreate) createSpec() (*OverallSnapshot, *sqlgraph.CreateSpec) {
	var (
		_node = &OverallSnapshot{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(overallsnapshot.Table, sqlgraph.NewFieldSpec(overallsnapshot.FieldID, field.TypeString))
	)
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osc.mutation.Datehour(); ok {
		_spec.SetField(overallsnapshot.FieldDatehour, field.TypeTime, value)
		_node.Datehour = value
	}
	if value, ok := osc.mutation.Liquidity(); ok {
		_spec.SetField(overallsnapshot.FieldLiquidity, field.TypeFloat64, value)
		_node.Liquidity = value
	}
	if value, ok := osc.mutation.Investment(); ok {
		_spec.SetField(overallsnapshot.FieldInvestment, field.TypeFloat64, value)
		_node.Investment = value
	}
	if value, ok := osc.mutation.Property(); ok {
		_spec.SetField(overallsnapshot.FieldProperty, field.TypeFloat64, value)
		_node.Property = value
	}
	if value, ok := osc.mutation.Receivable(); ok {
		_spec.SetField(overallsnapshot.FieldReceivable, field.TypeFloat64, value)
		_node.Receivable = value
	}
	if value, ok := osc.mutation.Liability(); ok {
		_spec.SetField(overallsnapshot.FieldLiability, field.TypeFloat64, value)
		_node.Liability = value
	}
	if nodes := osc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   overallsnapshot.ProfileTable,
			Columns: []string{overallsnapshot.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_overall_snapshot = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OverallSnapshotCreateBulk is the builder for creating many OverallSnapshot entities in bulk.
type OverallSnapshotCreateBulk struct {
	config
	err      error
	builders []*OverallSnapshotCreate
}

// Save creates the OverallSnapshot entities in the database.
func (oscb *OverallSnapshotCreateBulk) Save(ctx context.Context) ([]*OverallSnapshot, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OverallSnapshot, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OverallSnapshotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OverallSnapshotCreateBulk) SaveX(ctx context.Context) []*OverallSnapshot {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OverallSnapshotCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OverallSnapshotCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
