// Code generated by ent, DO NOT EDIT.

package overallsnapshot

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the overallsnapshot type in the database.
	Label = "overall_snapshot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDatehour holds the string denoting the datehour field in the database.
	FieldDatehour = "datehour"
	// FieldLiquidity holds the string denoting the liquidity field in the database.
	FieldLiquidity = "liquidity"
	// FieldInvestment holds the string denoting the investment field in the database.
	FieldInvestment = "investment"
	// FieldProperty holds the string denoting the property field in the database.
	FieldProperty = "property"
	// FieldReceivable holds the string denoting the receivable field in the database.
	FieldReceivable = "receivable"
	// FieldLiablity holds the string denoting the liablity field in the database.
	FieldLiablity = "liablity"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// Table holds the table name of the overallsnapshot in the database.
	Table = "overall_snapshots"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "overall_snapshots"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_overall_snapshot"
)

// Columns holds all SQL columns for overallsnapshot fields.
var Columns = []string{
	FieldID,
	FieldDatehour,
	FieldLiquidity,
	FieldInvestment,
	FieldProperty,
	FieldReceivable,
	FieldLiablity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "overall_snapshots"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"profile_overall_snapshot",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID string
)

// OrderOption defines the ordering options for the OverallSnapshot queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDatehour orders the results by the datehour field.
func ByDatehour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatehour, opts...).ToFunc()
}

// ByLiquidity orders the results by the liquidity field.
func ByLiquidity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLiquidity, opts...).ToFunc()
}

// ByInvestment orders the results by the investment field.
func ByInvestment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvestment, opts...).ToFunc()
}

// ByProperty orders the results by the property field.
func ByProperty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProperty, opts...).ToFunc()
}

// ByReceivable orders the results by the receivable field.
func ByReceivable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceivable, opts...).ToFunc()
}

// ByLiablity orders the results by the liablity field.
func ByLiablity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLiablity, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
