// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fijoy/ent/account"
	"fijoy/ent/profile"
	"fijoy/ent/transaction"
	"fijoy/ent/transactionentry"
	"fijoy/ent/user"
	"fijoy/ent/userkey"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *AccountQuery) CollectFields(ctx context.Context, satisfies ...string) (*AccountQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *AccountQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(account.Columns))
		selectedFields = []string{account.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "profile":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProfileClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, profileImplementors)...); err != nil {
				return err
			}
			_q.withProfile = query

		case "transactionEntries":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TransactionEntryClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, transactionentryImplementors)...); err != nil {
				return err
			}
			_q.WithNamedTransactionEntries(alias, func(wq *TransactionEntryQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[account.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, account.FieldCreateTime)
				fieldSeen[account.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[account.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, account.FieldUpdateTime)
				fieldSeen[account.FieldUpdateTime] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[account.FieldName]; !ok {
				selectedFields = append(selectedFields, account.FieldName)
				fieldSeen[account.FieldName] = struct{}{}
			}
		case "institution":
			if _, ok := fieldSeen[account.FieldInstitution]; !ok {
				selectedFields = append(selectedFields, account.FieldInstitution)
				fieldSeen[account.FieldInstitution] = struct{}{}
			}
		case "accountType":
			if _, ok := fieldSeen[account.FieldAccountType]; !ok {
				selectedFields = append(selectedFields, account.FieldAccountType)
				fieldSeen[account.FieldAccountType] = struct{}{}
			}
		case "investmentType":
			if _, ok := fieldSeen[account.FieldInvestmentType]; !ok {
				selectedFields = append(selectedFields, account.FieldInvestmentType)
				fieldSeen[account.FieldInvestmentType] = struct{}{}
			}
		case "currencySymbol":
			if _, ok := fieldSeen[account.FieldCurrencySymbol]; !ok {
				selectedFields = append(selectedFields, account.FieldCurrencySymbol)
				fieldSeen[account.FieldCurrencySymbol] = struct{}{}
			}
		case "ticker":
			if _, ok := fieldSeen[account.FieldTicker]; !ok {
				selectedFields = append(selectedFields, account.FieldTicker)
				fieldSeen[account.FieldTicker] = struct{}{}
			}
		case "tickerType":
			if _, ok := fieldSeen[account.FieldTickerType]; !ok {
				selectedFields = append(selectedFields, account.FieldTickerType)
				fieldSeen[account.FieldTickerType] = struct{}{}
			}
		case "amount":
			if _, ok := fieldSeen[account.FieldAmount]; !ok {
				selectedFields = append(selectedFields, account.FieldAmount)
				fieldSeen[account.FieldAmount] = struct{}{}
			}
		case "value":
			if _, ok := fieldSeen[account.FieldValue]; !ok {
				selectedFields = append(selectedFields, account.FieldValue)
				fieldSeen[account.FieldValue] = struct{}{}
			}
		case "fxRate":
			if _, ok := fieldSeen[account.FieldFxRate]; !ok {
				selectedFields = append(selectedFields, account.FieldFxRate)
				fieldSeen[account.FieldFxRate] = struct{}{}
			}
		case "balance":
			if _, ok := fieldSeen[account.FieldBalance]; !ok {
				selectedFields = append(selectedFields, account.FieldBalance)
				fieldSeen[account.FieldBalance] = struct{}{}
			}
		case "archived":
			if _, ok := fieldSeen[account.FieldArchived]; !ok {
				selectedFields = append(selectedFields, account.FieldArchived)
				fieldSeen[account.FieldArchived] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type accountPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AccountPaginateOption
}

func newAccountPaginateArgs(rv map[string]any) *accountPaginateArgs {
	args := &accountPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *ProfileQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProfileQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *ProfileQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(profile.Columns))
		selectedFields = []string{profile.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.withUser = query

		case "accounts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AccountClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, accountImplementors)...); err != nil {
				return err
			}
			_q.WithNamedAccounts(alias, func(wq *AccountQuery) {
				*wq = *query
			})

		case "transactions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TransactionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, transactionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedTransactions(alias, func(wq *TransactionQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[profile.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, profile.FieldCreateTime)
				fieldSeen[profile.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[profile.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, profile.FieldUpdateTime)
				fieldSeen[profile.FieldUpdateTime] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[profile.FieldName]; !ok {
				selectedFields = append(selectedFields, profile.FieldName)
				fieldSeen[profile.FieldName] = struct{}{}
			}
		case "locale":
			if _, ok := fieldSeen[profile.FieldLocale]; !ok {
				selectedFields = append(selectedFields, profile.FieldLocale)
				fieldSeen[profile.FieldLocale] = struct{}{}
			}
		case "currencies":
			if _, ok := fieldSeen[profile.FieldCurrencies]; !ok {
				selectedFields = append(selectedFields, profile.FieldCurrencies)
				fieldSeen[profile.FieldCurrencies] = struct{}{}
			}
		case "netWorthGoal":
			if _, ok := fieldSeen[profile.FieldNetWorthGoal]; !ok {
				selectedFields = append(selectedFields, profile.FieldNetWorthGoal)
				fieldSeen[profile.FieldNetWorthGoal] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type profilePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProfilePaginateOption
}

func newProfilePaginateArgs(rv map[string]any) *profilePaginateArgs {
	args := &profilePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *TransactionQuery) CollectFields(ctx context.Context, satisfies ...string) (*TransactionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *TransactionQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(transaction.Columns))
		selectedFields = []string{transaction.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "profile":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProfileClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, profileImplementors)...); err != nil {
				return err
			}
			_q.withProfile = query

		case "transactionEntries":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TransactionEntryClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, transactionentryImplementors)...); err != nil {
				return err
			}
			_q.WithNamedTransactionEntries(alias, func(wq *TransactionEntryQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[transaction.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, transaction.FieldCreateTime)
				fieldSeen[transaction.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[transaction.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, transaction.FieldUpdateTime)
				fieldSeen[transaction.FieldUpdateTime] = struct{}{}
			}
		case "balance":
			if _, ok := fieldSeen[transaction.FieldBalance]; !ok {
				selectedFields = append(selectedFields, transaction.FieldBalance)
				fieldSeen[transaction.FieldBalance] = struct{}{}
			}
		case "note":
			if _, ok := fieldSeen[transaction.FieldNote]; !ok {
				selectedFields = append(selectedFields, transaction.FieldNote)
				fieldSeen[transaction.FieldNote] = struct{}{}
			}
		case "datetime":
			if _, ok := fieldSeen[transaction.FieldDatetime]; !ok {
				selectedFields = append(selectedFields, transaction.FieldDatetime)
				fieldSeen[transaction.FieldDatetime] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type transactionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TransactionPaginateOption
}

func newTransactionPaginateArgs(rv map[string]any) *transactionPaginateArgs {
	args := &transactionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *TransactionEntryQuery) CollectFields(ctx context.Context, satisfies ...string) (*TransactionEntryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *TransactionEntryQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(transactionentry.Columns))
		selectedFields = []string{transactionentry.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "account":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AccountClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, accountImplementors)...); err != nil {
				return err
			}
			_q.withAccount = query

		case "transaction":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TransactionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, transactionImplementors)...); err != nil {
				return err
			}
			_q.withTransaction = query
		case "createTime":
			if _, ok := fieldSeen[transactionentry.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, transactionentry.FieldCreateTime)
				fieldSeen[transactionentry.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[transactionentry.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, transactionentry.FieldUpdateTime)
				fieldSeen[transactionentry.FieldUpdateTime] = struct{}{}
			}
		case "amount":
			if _, ok := fieldSeen[transactionentry.FieldAmount]; !ok {
				selectedFields = append(selectedFields, transactionentry.FieldAmount)
				fieldSeen[transactionentry.FieldAmount] = struct{}{}
			}
		case "value":
			if _, ok := fieldSeen[transactionentry.FieldValue]; !ok {
				selectedFields = append(selectedFields, transactionentry.FieldValue)
				fieldSeen[transactionentry.FieldValue] = struct{}{}
			}
		case "fxRate":
			if _, ok := fieldSeen[transactionentry.FieldFxRate]; !ok {
				selectedFields = append(selectedFields, transactionentry.FieldFxRate)
				fieldSeen[transactionentry.FieldFxRate] = struct{}{}
			}
		case "balance":
			if _, ok := fieldSeen[transactionentry.FieldBalance]; !ok {
				selectedFields = append(selectedFields, transactionentry.FieldBalance)
				fieldSeen[transactionentry.FieldBalance] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type transactionentryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TransactionEntryPaginateOption
}

func newTransactionEntryPaginateArgs(rv map[string]any) *transactionentryPaginateArgs {
	args := &transactionentryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *UserQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "userKeys":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserKeyClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, userkeyImplementors)...); err != nil {
				return err
			}
			_q.WithNamedUserKeys(alias, func(wq *UserKeyQuery) {
				*wq = *query
			})

		case "profiles":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProfileClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, profileImplementors)...); err != nil {
				return err
			}
			_q.WithNamedProfiles(alias, func(wq *ProfileQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[user.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, user.FieldCreateTime)
				fieldSeen[user.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[user.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdateTime)
				fieldSeen[user.FieldUpdateTime] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *UserKeyQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserKeyQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *UserKeyQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(userkey.Columns))
		selectedFields = []string{userkey.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.withUser = query
		case "createTime":
			if _, ok := fieldSeen[userkey.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, userkey.FieldCreateTime)
				fieldSeen[userkey.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[userkey.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, userkey.FieldUpdateTime)
				fieldSeen[userkey.FieldUpdateTime] = struct{}{}
			}
		case "key":
			if _, ok := fieldSeen[userkey.FieldKey]; !ok {
				selectedFields = append(selectedFields, userkey.FieldKey)
				fieldSeen[userkey.FieldKey] = struct{}{}
			}
		case "hashedPassword":
			if _, ok := fieldSeen[userkey.FieldHashedPassword]; !ok {
				selectedFields = append(selectedFields, userkey.FieldHashedPassword)
				fieldSeen[userkey.FieldHashedPassword] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type userkeyPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserKeyPaginateOption
}

func newUserKeyPaginateArgs(rv map[string]any) *userkeyPaginateArgs {
	args := &userkeyPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok || v == nil {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
