// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/user"
	"fijoy/ent/userkey"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserKey is the model entity for the UserKey schema.
type UserKey struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// HashedPassword holds the value of the "hashed_password" field.
	HashedPassword string `json:"hashed_password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserKeyQuery when eager-loading is set.
	Edges          UserKeyEdges `json:"edges"`
	user_user_keys *string
	selectValues   sql.SelectValues
}

// UserKeyEdges holds the relations/edges for other nodes in the graph.
type UserKeyEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserKeyEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userkey.FieldID, userkey.FieldHashedPassword:
			values[i] = new(sql.NullString)
		case userkey.FieldCreateTime, userkey.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case userkey.ForeignKeys[0]: // user_user_keys
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserKey fields.
func (uk *UserKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userkey.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				uk.ID = value.String
			}
		case userkey.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				uk.CreateTime = value.Time
			}
		case userkey.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				uk.UpdateTime = value.Time
			}
		case userkey.FieldHashedPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_password", values[i])
			} else if value.Valid {
				uk.HashedPassword = value.String
			}
		case userkey.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_user_keys", values[i])
			} else if value.Valid {
				uk.user_user_keys = new(string)
				*uk.user_user_keys = value.String
			}
		default:
			uk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserKey.
// This includes values selected through modifiers, order, etc.
func (uk *UserKey) Value(name string) (ent.Value, error) {
	return uk.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserKey entity.
func (uk *UserKey) QueryUser() *UserQuery {
	return NewUserKeyClient(uk.config).QueryUser(uk)
}

// Update returns a builder for updating this UserKey.
// Note that you need to call UserKey.Unwrap() before calling this method if this UserKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (uk *UserKey) Update() *UserKeyUpdateOne {
	return NewUserKeyClient(uk.config).UpdateOne(uk)
}

// Unwrap unwraps the UserKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uk *UserKey) Unwrap() *UserKey {
	_tx, ok := uk.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserKey is not a transactional entity")
	}
	uk.config.driver = _tx.drv
	return uk
}

// String implements the fmt.Stringer.
func (uk *UserKey) String() string {
	var builder strings.Builder
	builder.WriteString("UserKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uk.ID))
	builder.WriteString("create_time=")
	builder.WriteString(uk.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(uk.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hashed_password=")
	builder.WriteString(uk.HashedPassword)
	builder.WriteByte(')')
	return builder.String()
}

// UserKeys is a parsable slice of UserKey.
type UserKeys []*UserKey
