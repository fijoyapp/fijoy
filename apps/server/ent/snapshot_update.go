// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/predicate"
	"fijoy/ent/profile"
	"fijoy/ent/snapshot"
	"fijoy/ent/snapshotaccount"
	"fijoy/ent/snapshotfxrate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SnapshotUpdate is the builder for updating Snapshot entities.
type SnapshotUpdate struct {
	config
	hooks    []Hook
	mutation *SnapshotMutation
}

// Where appends a list predicates to the SnapshotUpdate builder.
func (_u *SnapshotUpdate) Where(ps ...predicate.Snapshot) *SnapshotUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *SnapshotUpdate) SetUpdateTime(v time.Time) *SnapshotUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNote sets the "note" field.
func (_u *SnapshotUpdate) SetNote(v string) *SnapshotUpdate {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *SnapshotUpdate) SetNillableNote(v *string) *SnapshotUpdate {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// ClearNote clears the value of the "note" field.
func (_u *SnapshotUpdate) ClearNote() *SnapshotUpdate {
	_u.mutation.ClearNote()
	return _u
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (_u *SnapshotUpdate) SetProfileID(id int) *SnapshotUpdate {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *SnapshotUpdate) SetProfile(v *Profile) *SnapshotUpdate {
	return _u.SetProfileID(v.ID)
}

// AddSnapshotAccountIDs adds the "snapshot_accounts" edge to the SnapshotAccount entity by IDs.
func (_u *SnapshotUpdate) AddSnapshotAccountIDs(ids ...int) *SnapshotUpdate {
	_u.mutation.AddSnapshotAccountIDs(ids...)
	return _u
}

// AddSnapshotAccounts adds the "snapshot_accounts" edges to the SnapshotAccount entity.
func (_u *SnapshotUpdate) AddSnapshotAccounts(v ...*SnapshotAccount) *SnapshotUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSnapshotAccountIDs(ids...)
}

// AddSnapshotFxRateIDs adds the "snapshot_fx_rates" edge to the SnapshotFXRate entity by IDs.
func (_u *SnapshotUpdate) AddSnapshotFxRateIDs(ids ...int) *SnapshotUpdate {
	_u.mutation.AddSnapshotFxRateIDs(ids...)
	return _u
}

// AddSnapshotFxRates adds the "snapshot_fx_rates" edges to the SnapshotFXRate entity.
func (_u *SnapshotUpdate) AddSnapshotFxRates(v ...*SnapshotFXRate) *SnapshotUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSnapshotFxRateIDs(ids...)
}

// Mutation returns the SnapshotMutation object of the builder.
func (_u *SnapshotUpdate) Mutation() *SnapshotMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *SnapshotUpdate) ClearProfile() *SnapshotUpdate {
	_u.mutation.ClearProfile()
	return _u
}

// ClearSnapshotAccounts clears all "snapshot_accounts" edges to the SnapshotAccount entity.
func (_u *SnapshotUpdate) ClearSnapshotAccounts() *SnapshotUpdate {
	_u.mutation.ClearSnapshotAccounts()
	return _u
}

// RemoveSnapshotAccountIDs removes the "snapshot_accounts" edge to SnapshotAccount entities by IDs.
func (_u *SnapshotUpdate) RemoveSnapshotAccountIDs(ids ...int) *SnapshotUpdate {
	_u.mutation.RemoveSnapshotAccountIDs(ids...)
	return _u
}

// RemoveSnapshotAccounts removes "snapshot_accounts" edges to SnapshotAccount entities.
func (_u *SnapshotUpdate) RemoveSnapshotAccounts(v ...*SnapshotAccount) *SnapshotUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSnapshotAccountIDs(ids...)
}

// ClearSnapshotFxRates clears all "snapshot_fx_rates" edges to the SnapshotFXRate entity.
func (_u *SnapshotUpdate) ClearSnapshotFxRates() *SnapshotUpdate {
	_u.mutation.ClearSnapshotFxRates()
	return _u
}

// RemoveSnapshotFxRateIDs removes the "snapshot_fx_rates" edge to SnapshotFXRate entities by IDs.
func (_u *SnapshotUpdate) RemoveSnapshotFxRateIDs(ids ...int) *SnapshotUpdate {
	_u.mutation.RemoveSnapshotFxRateIDs(ids...)
	return _u
}

// RemoveSnapshotFxRates removes "snapshot_fx_rates" edges to SnapshotFXRate entities.
func (_u *SnapshotUpdate) RemoveSnapshotFxRates(v ...*SnapshotFXRate) *SnapshotUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSnapshotFxRateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SnapshotUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SnapshotUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SnapshotUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SnapshotUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SnapshotUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := snapshot.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SnapshotUpdate) check() error {
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Snapshot.profile"`)
	}
	return nil
}

func (_u *SnapshotUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(snapshot.Table, snapshot.Columns, sqlgraph.NewFieldSpec(snapshot.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(snapshot.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(snapshot.FieldNote, field.TypeString, value)
	}
	if _u.mutation.NoteCleared() {
		_spec.ClearField(snapshot.FieldNote, field.TypeString)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   snapshot.ProfileTable,
			Columns: []string{snapshot.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   snapshot.ProfileTable,
			Columns: []string{snapshot.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SnapshotAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotAccountsTable,
			Columns: []string{snapshot.SnapshotAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSnapshotAccountsIDs(); len(nodes) > 0 && !_u.mutation.SnapshotAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotAccountsTable,
			Columns: []string{snapshot.SnapshotAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SnapshotAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotAccountsTable,
			Columns: []string{snapshot.SnapshotAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SnapshotFxRatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotFxRatesTable,
			Columns: []string{snapshot.SnapshotFxRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotfxrate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSnapshotFxRatesIDs(); len(nodes) > 0 && !_u.mutation.SnapshotFxRatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotFxRatesTable,
			Columns: []string{snapshot.SnapshotFxRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotfxrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SnapshotFxRatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotFxRatesTable,
			Columns: []string{snapshot.SnapshotFxRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotfxrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{snapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SnapshotUpdateOne is the builder for updating a single Snapshot entity.
type SnapshotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SnapshotMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *SnapshotUpdateOne) SetUpdateTime(v time.Time) *SnapshotUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNote sets the "note" field.
func (_u *SnapshotUpdateOne) SetNote(v string) *SnapshotUpdateOne {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *SnapshotUpdateOne) SetNillableNote(v *string) *SnapshotUpdateOne {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// ClearNote clears the value of the "note" field.
func (_u *SnapshotUpdateOne) ClearNote() *SnapshotUpdateOne {
	_u.mutation.ClearNote()
	return _u
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (_u *SnapshotUpdateOne) SetProfileID(id int) *SnapshotUpdateOne {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *SnapshotUpdateOne) SetProfile(v *Profile) *SnapshotUpdateOne {
	return _u.SetProfileID(v.ID)
}

// AddSnapshotAccountIDs adds the "snapshot_accounts" edge to the SnapshotAccount entity by IDs.
func (_u *SnapshotUpdateOne) AddSnapshotAccountIDs(ids ...int) *SnapshotUpdateOne {
	_u.mutation.AddSnapshotAccountIDs(ids...)
	return _u
}

// AddSnapshotAccounts adds the "snapshot_accounts" edges to the SnapshotAccount entity.
func (_u *SnapshotUpdateOne) AddSnapshotAccounts(v ...*SnapshotAccount) *SnapshotUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSnapshotAccountIDs(ids...)
}

// AddSnapshotFxRateIDs adds the "snapshot_fx_rates" edge to the SnapshotFXRate entity by IDs.
func (_u *SnapshotUpdateOne) AddSnapshotFxRateIDs(ids ...int) *SnapshotUpdateOne {
	_u.mutation.AddSnapshotFxRateIDs(ids...)
	return _u
}

// AddSnapshotFxRates adds the "snapshot_fx_rates" edges to the SnapshotFXRate entity.
func (_u *SnapshotUpdateOne) AddSnapshotFxRates(v ...*SnapshotFXRate) *SnapshotUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSnapshotFxRateIDs(ids...)
}

// Mutation returns the SnapshotMutation object of the builder.
func (_u *SnapshotUpdateOne) Mutation() *SnapshotMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *SnapshotUpdateOne) ClearProfile() *SnapshotUpdateOne {
	_u.mutation.ClearProfile()
	return _u
}

// ClearSnapshotAccounts clears all "snapshot_accounts" edges to the SnapshotAccount entity.
func (_u *SnapshotUpdateOne) ClearSnapshotAccounts() *SnapshotUpdateOne {
	_u.mutation.ClearSnapshotAccounts()
	return _u
}

// RemoveSnapshotAccountIDs removes the "snapshot_accounts" edge to SnapshotAccount entities by IDs.
func (_u *SnapshotUpdateOne) RemoveSnapshotAccountIDs(ids ...int) *SnapshotUpdateOne {
	_u.mutation.RemoveSnapshotAccountIDs(ids...)
	return _u
}

// RemoveSnapshotAccounts removes "snapshot_accounts" edges to SnapshotAccount entities.
func (_u *SnapshotUpdateOne) RemoveSnapshotAccounts(v ...*SnapshotAccount) *SnapshotUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSnapshotAccountIDs(ids...)
}

// ClearSnapshotFxRates clears all "snapshot_fx_rates" edges to the SnapshotFXRate entity.
func (_u *SnapshotUpdateOne) ClearSnapshotFxRates() *SnapshotUpdateOne {
	_u.mutation.ClearSnapshotFxRates()
	return _u
}

// RemoveSnapshotFxRateIDs removes the "snapshot_fx_rates" edge to SnapshotFXRate entities by IDs.
func (_u *SnapshotUpdateOne) RemoveSnapshotFxRateIDs(ids ...int) *SnapshotUpdateOne {
	_u.mutation.RemoveSnapshotFxRateIDs(ids...)
	return _u
}

// RemoveSnapshotFxRates removes "snapshot_fx_rates" edges to SnapshotFXRate entities.
func (_u *SnapshotUpdateOne) RemoveSnapshotFxRates(v ...*SnapshotFXRate) *SnapshotUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSnapshotFxRateIDs(ids...)
}

// Where appends a list predicates to the SnapshotUpdate builder.
func (_u *SnapshotUpdateOne) Where(ps ...predicate.Snapshot) *SnapshotUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SnapshotUpdateOne) Select(field string, fields ...string) *SnapshotUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Snapshot entity.
func (_u *SnapshotUpdateOne) Save(ctx context.Context) (*Snapshot, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SnapshotUpdateOne) SaveX(ctx context.Context) *Snapshot {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SnapshotUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SnapshotUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SnapshotUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := snapshot.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SnapshotUpdateOne) check() error {
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Snapshot.profile"`)
	}
	return nil
}

func (_u *SnapshotUpdateOne) sqlSave(ctx context.Context) (_node *Snapshot, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(snapshot.Table, snapshot.Columns, sqlgraph.NewFieldSpec(snapshot.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Snapshot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, snapshot.FieldID)
		for _, f := range fields {
			if !snapshot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != snapshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(snapshot.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(snapshot.FieldNote, field.TypeString, value)
	}
	if _u.mutation.NoteCleared() {
		_spec.ClearField(snapshot.FieldNote, field.TypeString)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   snapshot.ProfileTable,
			Columns: []string{snapshot.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   snapshot.ProfileTable,
			Columns: []string{snapshot.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SnapshotAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotAccountsTable,
			Columns: []string{snapshot.SnapshotAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSnapshotAccountsIDs(); len(nodes) > 0 && !_u.mutation.SnapshotAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotAccountsTable,
			Columns: []string{snapshot.SnapshotAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SnapshotAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotAccountsTable,
			Columns: []string{snapshot.SnapshotAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SnapshotFxRatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotFxRatesTable,
			Columns: []string{snapshot.SnapshotFxRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotfxrate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSnapshotFxRatesIDs(); len(nodes) > 0 && !_u.mutation.SnapshotFxRatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotFxRatesTable,
			Columns: []string{snapshot.SnapshotFxRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotfxrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SnapshotFxRatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   snapshot.SnapshotFxRatesTable,
			Columns: []string{snapshot.SnapshotFxRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(snapshotfxrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Snapshot{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{snapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
