// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/profile"
	"fijoy/ent/snapshot"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Snapshot is the model entity for the Snapshot schema.
type Snapshot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SnapshotQuery when eager-loading is set.
	Edges             SnapshotEdges `json:"edges"`
	profile_snapshots *int
	selectValues      sql.SelectValues
}

// SnapshotEdges holds the relations/edges for other nodes in the graph.
type SnapshotEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// SnapshotAccounts holds the value of the snapshot_accounts edge.
	SnapshotAccounts []*SnapshotAccount `json:"snapshot_accounts,omitempty"`
	// SnapshotFxRates holds the value of the snapshot_fx_rates edge.
	SnapshotFxRates []*SnapshotFXRate `json:"snapshot_fx_rates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedSnapshotAccounts map[string][]*SnapshotAccount
	namedSnapshotFxRates  map[string][]*SnapshotFXRate
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SnapshotEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// SnapshotAccountsOrErr returns the SnapshotAccounts value or an error if the edge
// was not loaded in eager-loading.
func (e SnapshotEdges) SnapshotAccountsOrErr() ([]*SnapshotAccount, error) {
	if e.loadedTypes[1] {
		return e.SnapshotAccounts, nil
	}
	return nil, &NotLoadedError{edge: "snapshot_accounts"}
}

// SnapshotFxRatesOrErr returns the SnapshotFxRates value or an error if the edge
// was not loaded in eager-loading.
func (e SnapshotEdges) SnapshotFxRatesOrErr() ([]*SnapshotFXRate, error) {
	if e.loadedTypes[2] {
		return e.SnapshotFxRates, nil
	}
	return nil, &NotLoadedError{edge: "snapshot_fx_rates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Snapshot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case snapshot.FieldID:
			values[i] = new(sql.NullInt64)
		case snapshot.FieldNote:
			values[i] = new(sql.NullString)
		case snapshot.FieldCreateTime, snapshot.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case snapshot.ForeignKeys[0]: // profile_snapshots
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Snapshot fields.
func (_m *Snapshot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case snapshot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case snapshot.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case snapshot.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case snapshot.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				_m.Note = value.String
			}
		case snapshot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_snapshots", value)
			} else if value.Valid {
				_m.profile_snapshots = new(int)
				*_m.profile_snapshots = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Snapshot.
// This includes values selected through modifiers, order, etc.
func (_m *Snapshot) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the Snapshot entity.
func (_m *Snapshot) QueryProfile() *ProfileQuery {
	return NewSnapshotClient(_m.config).QueryProfile(_m)
}

// QuerySnapshotAccounts queries the "snapshot_accounts" edge of the Snapshot entity.
func (_m *Snapshot) QuerySnapshotAccounts() *SnapshotAccountQuery {
	return NewSnapshotClient(_m.config).QuerySnapshotAccounts(_m)
}

// QuerySnapshotFxRates queries the "snapshot_fx_rates" edge of the Snapshot entity.
func (_m *Snapshot) QuerySnapshotFxRates() *SnapshotFXRateQuery {
	return NewSnapshotClient(_m.config).QuerySnapshotFxRates(_m)
}

// Update returns a builder for updating this Snapshot.
// Note that you need to call Snapshot.Unwrap() before calling this method if this Snapshot
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Snapshot) Update() *SnapshotUpdateOne {
	return NewSnapshotClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Snapshot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Snapshot) Unwrap() *Snapshot {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Snapshot is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Snapshot) String() string {
	var builder strings.Builder
	builder.WriteString("Snapshot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(_m.Note)
	builder.WriteByte(')')
	return builder.String()
}

// NamedSnapshotAccounts returns the SnapshotAccounts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Snapshot) NamedSnapshotAccounts(name string) ([]*SnapshotAccount, error) {
	if _m.Edges.namedSnapshotAccounts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSnapshotAccounts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Snapshot) appendNamedSnapshotAccounts(name string, edges ...*SnapshotAccount) {
	if _m.Edges.namedSnapshotAccounts == nil {
		_m.Edges.namedSnapshotAccounts = make(map[string][]*SnapshotAccount)
	}
	if len(edges) == 0 {
		_m.Edges.namedSnapshotAccounts[name] = []*SnapshotAccount{}
	} else {
		_m.Edges.namedSnapshotAccounts[name] = append(_m.Edges.namedSnapshotAccounts[name], edges...)
	}
}

// NamedSnapshotFxRates returns the SnapshotFxRates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Snapshot) NamedSnapshotFxRates(name string) ([]*SnapshotFXRate, error) {
	if _m.Edges.namedSnapshotFxRates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSnapshotFxRates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Snapshot) appendNamedSnapshotFxRates(name string, edges ...*SnapshotFXRate) {
	if _m.Edges.namedSnapshotFxRates == nil {
		_m.Edges.namedSnapshotFxRates = make(map[string][]*SnapshotFXRate)
	}
	if len(edges) == 0 {
		_m.Edges.namedSnapshotFxRates[name] = []*SnapshotFXRate{}
	} else {
		_m.Edges.namedSnapshotFxRates[name] = append(_m.Edges.namedSnapshotFxRates[name], edges...)
	}
}

// Snapshots is a parsable slice of Snapshot.
type Snapshots []*Snapshot
