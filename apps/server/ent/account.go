// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/account"
	"fijoy/ent/profile"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// The financial institution that holds this account
	Institution string `json:"institution,omitempty"`
	// AccountType holds the value of the "account_type" field.
	AccountType account.AccountType `json:"account_type,omitempty"`
	// InvestmentType holds the value of the "investment_type" field.
	InvestmentType account.InvestmentType `json:"investment_type,omitempty"`
	// CurrencyCode holds the value of the "currency_code" field.
	CurrencyCode string `json:"currency_code,omitempty"`
	// Ticker holds the value of the "ticker" field.
	Ticker string `json:"ticker,omitempty"`
	// TickerType holds the value of the "ticker_type" field.
	TickerType account.TickerType `json:"ticker_type,omitempty"`
	// The unit amount of share or money in this account
	Amount decimal.Decimal `json:"amount,omitempty"`
	// The value of 1 share in the native currency. If this is just a currency account, then this field will be 1
	Value decimal.Decimal `json:"value,omitempty"`
	// The total balance of this account in its currency
	Balance decimal.Decimal `json:"balance,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges            AccountEdges `json:"edges"`
	profile_accounts *int
	selectValues     sql.SelectValues
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// TransactionEntries holds the value of the transaction_entries edge.
	TransactionEntries []*TransactionEntry `json:"transaction_entries,omitempty"`
	// SnapshotAccounts holds the value of the snapshot_accounts edge.
	SnapshotAccounts []*SnapshotAccount `json:"snapshot_accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTransactionEntries map[string][]*TransactionEntry
	namedSnapshotAccounts   map[string][]*SnapshotAccount
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// TransactionEntriesOrErr returns the TransactionEntries value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) TransactionEntriesOrErr() ([]*TransactionEntry, error) {
	if e.loadedTypes[1] {
		return e.TransactionEntries, nil
	}
	return nil, &NotLoadedError{edge: "transaction_entries"}
}

// SnapshotAccountsOrErr returns the SnapshotAccounts value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) SnapshotAccountsOrErr() ([]*SnapshotAccount, error) {
	if e.loadedTypes[2] {
		return e.SnapshotAccounts, nil
	}
	return nil, &NotLoadedError{edge: "snapshot_accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldAmount, account.FieldValue, account.FieldBalance:
			values[i] = new(decimal.Decimal)
		case account.FieldArchived:
			values[i] = new(sql.NullBool)
		case account.FieldID:
			values[i] = new(sql.NullInt64)
		case account.FieldName, account.FieldInstitution, account.FieldAccountType, account.FieldInvestmentType, account.FieldCurrencyCode, account.FieldTicker, account.FieldTickerType:
			values[i] = new(sql.NullString)
		case account.FieldCreateTime, account.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case account.ForeignKeys[0]: // profile_accounts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (_m *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case account.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case account.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case account.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case account.FieldInstitution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institution", values[i])
			} else if value.Valid {
				_m.Institution = value.String
			}
		case account.FieldAccountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_type", values[i])
			} else if value.Valid {
				_m.AccountType = account.AccountType(value.String)
			}
		case account.FieldInvestmentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field investment_type", values[i])
			} else if value.Valid {
				_m.InvestmentType = account.InvestmentType(value.String)
			}
		case account.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				_m.CurrencyCode = value.String
			}
		case account.FieldTicker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticker", values[i])
			} else if value.Valid {
				_m.Ticker = value.String
			}
		case account.FieldTickerType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticker_type", values[i])
			} else if value.Valid {
				_m.TickerType = account.TickerType(value.String)
			}
		case account.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				_m.Amount = *value
			}
		case account.FieldValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil {
				_m.Value = *value
			}
		case account.FieldBalance:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value != nil {
				_m.Balance = *value
			}
		case account.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				_m.Archived = value.Bool
			}
		case account.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_accounts", value)
			} else if value.Valid {
				_m.profile_accounts = new(int)
				*_m.profile_accounts = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Account.
// This includes values selected through modifiers, order, etc.
func (_m *Account) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the Account entity.
func (_m *Account) QueryProfile() *ProfileQuery {
	return NewAccountClient(_m.config).QueryProfile(_m)
}

// QueryTransactionEntries queries the "transaction_entries" edge of the Account entity.
func (_m *Account) QueryTransactionEntries() *TransactionEntryQuery {
	return NewAccountClient(_m.config).QueryTransactionEntries(_m)
}

// QuerySnapshotAccounts queries the "snapshot_accounts" edge of the Account entity.
func (_m *Account) QuerySnapshotAccounts() *SnapshotAccountQuery {
	return NewAccountClient(_m.config).QuerySnapshotAccounts(_m)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Account) Update() *AccountUpdateOne {
	return NewAccountClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Account) Unwrap() *Account {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("institution=")
	builder.WriteString(_m.Institution)
	builder.WriteString(", ")
	builder.WriteString("account_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.AccountType))
	builder.WriteString(", ")
	builder.WriteString("investment_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.InvestmentType))
	builder.WriteString(", ")
	builder.WriteString("currency_code=")
	builder.WriteString(_m.CurrencyCode)
	builder.WriteString(", ")
	builder.WriteString("ticker=")
	builder.WriteString(_m.Ticker)
	builder.WriteString(", ")
	builder.WriteString("ticker_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.TickerType))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", _m.Value))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", _m.Balance))
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", _m.Archived))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransactionEntries returns the TransactionEntries named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Account) NamedTransactionEntries(name string) ([]*TransactionEntry, error) {
	if _m.Edges.namedTransactionEntries == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTransactionEntries[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Account) appendNamedTransactionEntries(name string, edges ...*TransactionEntry) {
	if _m.Edges.namedTransactionEntries == nil {
		_m.Edges.namedTransactionEntries = make(map[string][]*TransactionEntry)
	}
	if len(edges) == 0 {
		_m.Edges.namedTransactionEntries[name] = []*TransactionEntry{}
	} else {
		_m.Edges.namedTransactionEntries[name] = append(_m.Edges.namedTransactionEntries[name], edges...)
	}
}

// NamedSnapshotAccounts returns the SnapshotAccounts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Account) NamedSnapshotAccounts(name string) ([]*SnapshotAccount, error) {
	if _m.Edges.namedSnapshotAccounts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSnapshotAccounts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Account) appendNamedSnapshotAccounts(name string, edges ...*SnapshotAccount) {
	if _m.Edges.namedSnapshotAccounts == nil {
		_m.Edges.namedSnapshotAccounts = make(map[string][]*SnapshotAccount)
	}
	if len(edges) == 0 {
		_m.Edges.namedSnapshotAccounts[name] = []*SnapshotAccount{}
	} else {
		_m.Edges.namedSnapshotAccounts[name] = append(_m.Edges.namedSnapshotAccounts[name], edges...)
	}
}

// Accounts is a parsable slice of Account.
type Accounts []*Account
