// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fijoy/ent/account"
	"fijoy/ent/transaction"
	"fijoy/ent/transactionentry"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// TransactionEntry is the model entity for the TransactionEntry schema.
type TransactionEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// The unit amount of share or money in this transaction entry
	Amount decimal.Decimal `json:"amount,omitempty"`
	// The value of 1 share in the native currency. If this is just a currency account, then this field will be 1
	Value decimal.Decimal `json:"value,omitempty"`
	// The exchange rate from the native currency to user's default display currency
	FxRate decimal.Decimal `json:"fx_rate,omitempty"`
	// The total balance of this transaction entry in user's display currency
	Balance decimal.Decimal `json:"balance,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionEntryQuery when eager-loading is set.
	Edges                           TransactionEntryEdges `json:"edges"`
	account_transaction_entries     *int
	transaction_transaction_entries *int
	selectValues                    sql.SelectValues
}

// TransactionEntryEdges holds the relations/edges for other nodes in the graph.
type TransactionEntryEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Transaction holds the value of the transaction edge.
	Transaction *Transaction `json:"transaction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEntryEdges) AccountOrErr() (*Account, error) {
	if e.Account != nil {
		return e.Account, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: account.Label}
	}
	return nil, &NotLoadedError{edge: "account"}
}

// TransactionOrErr returns the Transaction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEntryEdges) TransactionOrErr() (*Transaction, error) {
	if e.Transaction != nil {
		return e.Transaction, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: transaction.Label}
	}
	return nil, &NotLoadedError{edge: "transaction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TransactionEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transactionentry.FieldAmount, transactionentry.FieldValue, transactionentry.FieldFxRate, transactionentry.FieldBalance:
			values[i] = new(decimal.Decimal)
		case transactionentry.FieldID:
			values[i] = new(sql.NullInt64)
		case transactionentry.FieldCreateTime, transactionentry.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case transactionentry.ForeignKeys[0]: // account_transaction_entries
			values[i] = new(sql.NullInt64)
		case transactionentry.ForeignKeys[1]: // transaction_transaction_entries
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TransactionEntry fields.
func (_m *TransactionEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transactionentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case transactionentry.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case transactionentry.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case transactionentry.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				_m.Amount = *value
			}
		case transactionentry.FieldValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil {
				_m.Value = *value
			}
		case transactionentry.FieldFxRate:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field fx_rate", values[i])
			} else if value != nil {
				_m.FxRate = *value
			}
		case transactionentry.FieldBalance:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value != nil {
				_m.Balance = *value
			}
		case transactionentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_transaction_entries", value)
			} else if value.Valid {
				_m.account_transaction_entries = new(int)
				*_m.account_transaction_entries = int(value.Int64)
			}
		case transactionentry.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field transaction_transaction_entries", value)
			} else if value.Valid {
				_m.transaction_transaction_entries = new(int)
				*_m.transaction_transaction_entries = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the TransactionEntry.
// This includes values selected through modifiers, order, etc.
func (_m *TransactionEntry) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAccount queries the "account" edge of the TransactionEntry entity.
func (_m *TransactionEntry) QueryAccount() *AccountQuery {
	return NewTransactionEntryClient(_m.config).QueryAccount(_m)
}

// QueryTransaction queries the "transaction" edge of the TransactionEntry entity.
func (_m *TransactionEntry) QueryTransaction() *TransactionQuery {
	return NewTransactionEntryClient(_m.config).QueryTransaction(_m)
}

// Update returns a builder for updating this TransactionEntry.
// Note that you need to call TransactionEntry.Unwrap() before calling this method if this TransactionEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TransactionEntry) Update() *TransactionEntryUpdateOne {
	return NewTransactionEntryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TransactionEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TransactionEntry) Unwrap() *TransactionEntry {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TransactionEntry is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TransactionEntry) String() string {
	var builder strings.Builder
	builder.WriteString("TransactionEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", _m.Value))
	builder.WriteString(", ")
	builder.WriteString("fx_rate=")
	builder.WriteString(fmt.Sprintf("%v", _m.FxRate))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", _m.Balance))
	builder.WriteByte(')')
	return builder.String()
}

// TransactionEntries is a parsable slice of TransactionEntry.
type TransactionEntries []*TransactionEntry
