// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fijoy/ent/account"
	"fijoy/ent/accountsnapshot"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// AccountSnapshotCreate is the builder for creating a AccountSnapshot entity.
type AccountSnapshotCreate struct {
	config
	mutation *AccountSnapshotMutation
	hooks    []Hook
}

// SetDatehour sets the "datehour" field.
func (asc *AccountSnapshotCreate) SetDatehour(t time.Time) *AccountSnapshotCreate {
	asc.mutation.SetDatehour(t)
	return asc
}

// SetBalance sets the "balance" field.
func (asc *AccountSnapshotCreate) SetBalance(d decimal.Decimal) *AccountSnapshotCreate {
	asc.mutation.SetBalance(d)
	return asc
}

// SetID sets the "id" field.
func (asc *AccountSnapshotCreate) SetID(s string) *AccountSnapshotCreate {
	asc.mutation.SetID(s)
	return asc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (asc *AccountSnapshotCreate) SetNillableID(s *string) *AccountSnapshotCreate {
	if s != nil {
		asc.SetID(*s)
	}
	return asc
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (asc *AccountSnapshotCreate) SetAccountID(id string) *AccountSnapshotCreate {
	asc.mutation.SetAccountID(id)
	return asc
}

// SetAccount sets the "account" edge to the Account entity.
func (asc *AccountSnapshotCreate) SetAccount(a *Account) *AccountSnapshotCreate {
	return asc.SetAccountID(a.ID)
}

// Mutation returns the AccountSnapshotMutation object of the builder.
func (asc *AccountSnapshotCreate) Mutation() *AccountSnapshotMutation {
	return asc.mutation
}

// Save creates the AccountSnapshot in the database.
func (asc *AccountSnapshotCreate) Save(ctx context.Context) (*AccountSnapshot, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AccountSnapshotCreate) SaveX(ctx context.Context) *AccountSnapshot {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AccountSnapshotCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AccountSnapshotCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AccountSnapshotCreate) defaults() {
	if _, ok := asc.mutation.ID(); !ok {
		v := accountsnapshot.DefaultID()
		asc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AccountSnapshotCreate) check() error {
	switch asc.driver.Dialect() {
	case dialect.MySQL, dialect.SQLite:
		if _, ok := asc.mutation.Datehour(); !ok {
			return &ValidationError{Name: "datehour", err: errors.New(`ent: missing required field "AccountSnapshot.datehour"`)}
		}
	}
	if _, ok := asc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "AccountSnapshot.balance"`)}
	}
	if len(asc.mutation.AccountIDs()) == 0 {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required edge "AccountSnapshot.account"`)}
	}
	return nil
}

func (asc *AccountSnapshotCreate) sqlSave(ctx context.Context) (*AccountSnapshot, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AccountSnapshot.ID type: %T", _spec.ID.Value)
		}
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AccountSnapshotCreate) createSpec() (*AccountSnapshot, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountSnapshot{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(accountsnapshot.Table, sqlgraph.NewFieldSpec(accountsnapshot.FieldID, field.TypeString))
	)
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.Datehour(); ok {
		_spec.SetField(accountsnapshot.FieldDatehour, field.TypeTime, value)
		_node.Datehour = value
	}
	if value, ok := asc.mutation.Balance(); ok {
		_spec.SetField(accountsnapshot.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if nodes := asc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsnapshot.AccountTable,
			Columns: []string{accountsnapshot.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_account_snapshot = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountSnapshotCreateBulk is the builder for creating many AccountSnapshot entities in bulk.
type AccountSnapshotCreateBulk struct {
	config
	err      error
	builders []*AccountSnapshotCreate
}

// Save creates the AccountSnapshot entities in the database.
func (ascb *AccountSnapshotCreateBulk) Save(ctx context.Context) ([]*AccountSnapshot, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AccountSnapshot, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountSnapshotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AccountSnapshotCreateBulk) SaveX(ctx context.Context) []*AccountSnapshot {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AccountSnapshotCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AccountSnapshotCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
