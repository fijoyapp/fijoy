// Code generated by ent, DO NOT EDIT.

package account

import (
	"fijoy/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdateTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldName, v))
}

// Institution applies equality check predicate on the "institution" field. It's identical to InstitutionEQ.
func Institution(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldInstitution, v))
}

// CurrencyCode applies equality check predicate on the "currency_code" field. It's identical to CurrencyCodeEQ.
func CurrencyCode(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCurrencyCode, v))
}

// Ticker applies equality check predicate on the "ticker" field. It's identical to TickerEQ.
func Ticker(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldTicker, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAmount, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldValue, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBalance, v))
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldArchived, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldName, v))
}

// InstitutionEQ applies the EQ predicate on the "institution" field.
func InstitutionEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldInstitution, v))
}

// InstitutionNEQ applies the NEQ predicate on the "institution" field.
func InstitutionNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldInstitution, v))
}

// InstitutionIn applies the In predicate on the "institution" field.
func InstitutionIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldInstitution, vs...))
}

// InstitutionNotIn applies the NotIn predicate on the "institution" field.
func InstitutionNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldInstitution, vs...))
}

// InstitutionGT applies the GT predicate on the "institution" field.
func InstitutionGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldInstitution, v))
}

// InstitutionGTE applies the GTE predicate on the "institution" field.
func InstitutionGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldInstitution, v))
}

// InstitutionLT applies the LT predicate on the "institution" field.
func InstitutionLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldInstitution, v))
}

// InstitutionLTE applies the LTE predicate on the "institution" field.
func InstitutionLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldInstitution, v))
}

// InstitutionContains applies the Contains predicate on the "institution" field.
func InstitutionContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldInstitution, v))
}

// InstitutionHasPrefix applies the HasPrefix predicate on the "institution" field.
func InstitutionHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldInstitution, v))
}

// InstitutionHasSuffix applies the HasSuffix predicate on the "institution" field.
func InstitutionHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldInstitution, v))
}

// InstitutionEqualFold applies the EqualFold predicate on the "institution" field.
func InstitutionEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldInstitution, v))
}

// InstitutionContainsFold applies the ContainsFold predicate on the "institution" field.
func InstitutionContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldInstitution, v))
}

// AccountTypeEQ applies the EQ predicate on the "account_type" field.
func AccountTypeEQ(v AccountType) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccountType, v))
}

// AccountTypeNEQ applies the NEQ predicate on the "account_type" field.
func AccountTypeNEQ(v AccountType) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAccountType, v))
}

// AccountTypeIn applies the In predicate on the "account_type" field.
func AccountTypeIn(vs ...AccountType) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAccountType, vs...))
}

// AccountTypeNotIn applies the NotIn predicate on the "account_type" field.
func AccountTypeNotIn(vs ...AccountType) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAccountType, vs...))
}

// InvestmentTypeEQ applies the EQ predicate on the "investment_type" field.
func InvestmentTypeEQ(v InvestmentType) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldInvestmentType, v))
}

// InvestmentTypeNEQ applies the NEQ predicate on the "investment_type" field.
func InvestmentTypeNEQ(v InvestmentType) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldInvestmentType, v))
}

// InvestmentTypeIn applies the In predicate on the "investment_type" field.
func InvestmentTypeIn(vs ...InvestmentType) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldInvestmentType, vs...))
}

// InvestmentTypeNotIn applies the NotIn predicate on the "investment_type" field.
func InvestmentTypeNotIn(vs ...InvestmentType) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldInvestmentType, vs...))
}

// CurrencyCodeEQ applies the EQ predicate on the "currency_code" field.
func CurrencyCodeEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCurrencyCode, v))
}

// CurrencyCodeNEQ applies the NEQ predicate on the "currency_code" field.
func CurrencyCodeNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCurrencyCode, v))
}

// CurrencyCodeIn applies the In predicate on the "currency_code" field.
func CurrencyCodeIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCurrencyCode, vs...))
}

// CurrencyCodeNotIn applies the NotIn predicate on the "currency_code" field.
func CurrencyCodeNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCurrencyCode, vs...))
}

// CurrencyCodeGT applies the GT predicate on the "currency_code" field.
func CurrencyCodeGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCurrencyCode, v))
}

// CurrencyCodeGTE applies the GTE predicate on the "currency_code" field.
func CurrencyCodeGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCurrencyCode, v))
}

// CurrencyCodeLT applies the LT predicate on the "currency_code" field.
func CurrencyCodeLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCurrencyCode, v))
}

// CurrencyCodeLTE applies the LTE predicate on the "currency_code" field.
func CurrencyCodeLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCurrencyCode, v))
}

// CurrencyCodeContains applies the Contains predicate on the "currency_code" field.
func CurrencyCodeContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldCurrencyCode, v))
}

// CurrencyCodeHasPrefix applies the HasPrefix predicate on the "currency_code" field.
func CurrencyCodeHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldCurrencyCode, v))
}

// CurrencyCodeHasSuffix applies the HasSuffix predicate on the "currency_code" field.
func CurrencyCodeHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldCurrencyCode, v))
}

// CurrencyCodeEqualFold applies the EqualFold predicate on the "currency_code" field.
func CurrencyCodeEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldCurrencyCode, v))
}

// CurrencyCodeContainsFold applies the ContainsFold predicate on the "currency_code" field.
func CurrencyCodeContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldCurrencyCode, v))
}

// TickerEQ applies the EQ predicate on the "ticker" field.
func TickerEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldTicker, v))
}

// TickerNEQ applies the NEQ predicate on the "ticker" field.
func TickerNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldTicker, v))
}

// TickerIn applies the In predicate on the "ticker" field.
func TickerIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldTicker, vs...))
}

// TickerNotIn applies the NotIn predicate on the "ticker" field.
func TickerNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldTicker, vs...))
}

// TickerGT applies the GT predicate on the "ticker" field.
func TickerGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldTicker, v))
}

// TickerGTE applies the GTE predicate on the "ticker" field.
func TickerGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldTicker, v))
}

// TickerLT applies the LT predicate on the "ticker" field.
func TickerLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldTicker, v))
}

// TickerLTE applies the LTE predicate on the "ticker" field.
func TickerLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldTicker, v))
}

// TickerContains applies the Contains predicate on the "ticker" field.
func TickerContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldTicker, v))
}

// TickerHasPrefix applies the HasPrefix predicate on the "ticker" field.
func TickerHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldTicker, v))
}

// TickerHasSuffix applies the HasSuffix predicate on the "ticker" field.
func TickerHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldTicker, v))
}

// TickerEqualFold applies the EqualFold predicate on the "ticker" field.
func TickerEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldTicker, v))
}

// TickerContainsFold applies the ContainsFold predicate on the "ticker" field.
func TickerContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldTicker, v))
}

// TickerTypeEQ applies the EQ predicate on the "ticker_type" field.
func TickerTypeEQ(v TickerType) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldTickerType, v))
}

// TickerTypeNEQ applies the NEQ predicate on the "ticker_type" field.
func TickerTypeNEQ(v TickerType) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldTickerType, v))
}

// TickerTypeIn applies the In predicate on the "ticker_type" field.
func TickerTypeIn(vs ...TickerType) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldTickerType, vs...))
}

// TickerTypeNotIn applies the NotIn predicate on the "ticker_type" field.
func TickerTypeNotIn(vs ...TickerType) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldTickerType, vs...))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAmount, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldValue, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v decimal.Decimal) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldBalance, v))
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldArchived, v))
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldArchived, v))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactionEntries applies the HasEdge predicate on the "transaction_entries" edge.
func HasTransactionEntries() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionEntriesTable, TransactionEntriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionEntriesWith applies the HasEdge predicate on the "transaction_entries" edge with a given conditions (other predicates).
func HasTransactionEntriesWith(preds ...predicate.TransactionEntry) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newTransactionEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSnapshotAccounts applies the HasEdge predicate on the "snapshot_accounts" edge.
func HasSnapshotAccounts() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SnapshotAccountsTable, SnapshotAccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSnapshotAccountsWith applies the HasEdge predicate on the "snapshot_accounts" edge with a given conditions (other predicates).
func HasSnapshotAccountsWith(preds ...predicate.SnapshotAccount) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newSnapshotAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
