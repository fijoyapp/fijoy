// Code generated by ent, DO NOT EDIT.

package account

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldInstitution holds the string denoting the institution field in the database.
	FieldInstitution = "institution"
	// FieldAccountType holds the string denoting the account_type field in the database.
	FieldAccountType = "account_type"
	// FieldInvestmentType holds the string denoting the investment_type field in the database.
	FieldInvestmentType = "investment_type"
	// FieldCurrencyCode holds the string denoting the currency_code field in the database.
	FieldCurrencyCode = "currency_code"
	// FieldTicker holds the string denoting the ticker field in the database.
	FieldTicker = "ticker"
	// FieldTickerType holds the string denoting the ticker_type field in the database.
	FieldTickerType = "ticker_type"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldArchived holds the string denoting the archived field in the database.
	FieldArchived = "archived"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeTransactionEntries holds the string denoting the transaction_entries edge name in mutations.
	EdgeTransactionEntries = "transaction_entries"
	// EdgeSnapshotAccounts holds the string denoting the snapshot_accounts edge name in mutations.
	EdgeSnapshotAccounts = "snapshot_accounts"
	// Table holds the table name of the account in the database.
	Table = "accounts"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "accounts"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_accounts"
	// TransactionEntriesTable is the table that holds the transaction_entries relation/edge.
	TransactionEntriesTable = "transaction_entries"
	// TransactionEntriesInverseTable is the table name for the TransactionEntry entity.
	// It exists in this package in order to avoid circular dependency with the "transactionentry" package.
	TransactionEntriesInverseTable = "transaction_entries"
	// TransactionEntriesColumn is the table column denoting the transaction_entries relation/edge.
	TransactionEntriesColumn = "account_transaction_entries"
	// SnapshotAccountsTable is the table that holds the snapshot_accounts relation/edge.
	SnapshotAccountsTable = "snapshot_accounts"
	// SnapshotAccountsInverseTable is the table name for the SnapshotAccount entity.
	// It exists in this package in order to avoid circular dependency with the "snapshotaccount" package.
	SnapshotAccountsInverseTable = "snapshot_accounts"
	// SnapshotAccountsColumn is the table column denoting the snapshot_accounts relation/edge.
	SnapshotAccountsColumn = "account_snapshot_accounts"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldInstitution,
	FieldAccountType,
	FieldInvestmentType,
	FieldCurrencyCode,
	FieldTicker,
	FieldTickerType,
	FieldAmount,
	FieldValue,
	FieldBalance,
	FieldArchived,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "accounts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"profile_accounts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// InstitutionValidator is a validator for the "institution" field. It is called by the builders before save.
	InstitutionValidator func(string) error
	// CurrencyCodeValidator is a validator for the "currency_code" field. It is called by the builders before save.
	CurrencyCodeValidator func(string) error
	// TickerValidator is a validator for the "ticker" field. It is called by the builders before save.
	TickerValidator func(string) error
	// DefaultArchived holds the default value on creation for the "archived" field.
	DefaultArchived bool
)

// AccountType defines the type for the "account_type" enum field.
type AccountType string

// AccountType values.
const (
	AccountTypeLiquidity  AccountType = "liquidity"
	AccountTypeInvestment AccountType = "investment"
	AccountTypeProperty   AccountType = "property"
	AccountTypeReceivable AccountType = "receivable"
	AccountTypeLiability  AccountType = "liability"
)

func (at AccountType) String() string {
	return string(at)
}

// AccountTypeValidator is a validator for the "account_type" field enum values. It is called by the builders before save.
func AccountTypeValidator(at AccountType) error {
	switch at {
	case AccountTypeLiquidity, AccountTypeInvestment, AccountTypeProperty, AccountTypeReceivable, AccountTypeLiability:
		return nil
	default:
		return fmt.Errorf("account: invalid enum value for account_type field: %q", at)
	}
}

// InvestmentType defines the type for the "investment_type" enum field.
type InvestmentType string

// InvestmentType values.
const (
	InvestmentTypeNonInvestment InvestmentType = "non_investment"
	InvestmentTypeTaxable       InvestmentType = "taxable"
	InvestmentTypeRrsp          InvestmentType = "rrsp"
	InvestmentTypeTfsa          InvestmentType = "tfsa"
	InvestmentTypeFhsa          InvestmentType = "fhsa"
)

func (it InvestmentType) String() string {
	return string(it)
}

// InvestmentTypeValidator is a validator for the "investment_type" field enum values. It is called by the builders before save.
func InvestmentTypeValidator(it InvestmentType) error {
	switch it {
	case InvestmentTypeNonInvestment, InvestmentTypeTaxable, InvestmentTypeRrsp, InvestmentTypeTfsa, InvestmentTypeFhsa:
		return nil
	default:
		return fmt.Errorf("account: invalid enum value for investment_type field: %q", it)
	}
}

// TickerType defines the type for the "ticker_type" enum field.
type TickerType string

// TickerType values.
const (
	TickerTypeCurrency TickerType = "currency"
	TickerTypeStock    TickerType = "stock"
	TickerTypeCrypto   TickerType = "crypto"
)

func (tt TickerType) String() string {
	return string(tt)
}

// TickerTypeValidator is a validator for the "ticker_type" field enum values. It is called by the builders before save.
func TickerTypeValidator(tt TickerType) error {
	switch tt {
	case TickerTypeCurrency, TickerTypeStock, TickerTypeCrypto:
		return nil
	default:
		return fmt.Errorf("account: invalid enum value for ticker_type field: %q", tt)
	}
}

// OrderOption defines the ordering options for the Account queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByInstitution orders the results by the institution field.
func ByInstitution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstitution, opts...).ToFunc()
}

// ByAccountType orders the results by the account_type field.
func ByAccountType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountType, opts...).ToFunc()
}

// ByInvestmentType orders the results by the investment_type field.
func ByInvestmentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvestmentType, opts...).ToFunc()
}

// ByCurrencyCode orders the results by the currency_code field.
func ByCurrencyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyCode, opts...).ToFunc()
}

// ByTicker orders the results by the ticker field.
func ByTicker(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicker, opts...).ToFunc()
}

// ByTickerType orders the results by the ticker_type field.
func ByTickerType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTickerType, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByArchived orders the results by the archived field.
func ByArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchived, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransactionEntriesCount orders the results by transaction_entries count.
func ByTransactionEntriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionEntriesStep(), opts...)
	}
}

// ByTransactionEntries orders the results by transaction_entries terms.
func ByTransactionEntries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionEntriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySnapshotAccountsCount orders the results by snapshot_accounts count.
func BySnapshotAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSnapshotAccountsStep(), opts...)
	}
}

// BySnapshotAccounts orders the results by snapshot_accounts terms.
func BySnapshotAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSnapshotAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
func newTransactionEntriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionEntriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionEntriesTable, TransactionEntriesColumn),
	)
}
func newSnapshotAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SnapshotAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SnapshotAccountsTable, SnapshotAccountsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e AccountType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *AccountType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = AccountType(str)
	if err := AccountTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e InvestmentType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *InvestmentType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = InvestmentType(str)
	if err := InvestmentTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid InvestmentType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e TickerType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *TickerType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = TickerType(str)
	if err := TickerTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid TickerType", str)
	}
	return nil
}
