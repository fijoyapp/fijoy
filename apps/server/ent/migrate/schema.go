// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "account_type", Type: field.TypeEnum, Enums: []string{"liquidity", "investment", "property", "receivable", "liability"}},
		{Name: "archived", Type: field.TypeBool, Default: false},
		{Name: "symbol", Type: field.TypeString},
		{Name: "symbol_type", Type: field.TypeEnum, Enums: []string{"currency", "stock", "crypto"}},
		{Name: "amount", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "value", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(18,10)", "postgres": "numeric(18,10)"}},
		{Name: "fx_rate", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(18,10)", "postgres": "numeric(18,10)"}},
		{Name: "balance", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "profile_account", Type: field.TypeString},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "accounts_profiles_account",
				Columns:    []*schema.Column{AccountsColumns[12]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AccountSnapshotsColumns holds the columns for the "account_snapshots" table.
	AccountSnapshotsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "datehour", Type: field.TypeTime, Default: map[string]schema.Expr{"postgres": "date_trunc('hour', now())"}},
		{Name: "balance", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "account_account_snapshot", Type: field.TypeString},
	}
	// AccountSnapshotsTable holds the schema information for the "account_snapshots" table.
	AccountSnapshotsTable = &schema.Table{
		Name:       "account_snapshots",
		Columns:    AccountSnapshotsColumns,
		PrimaryKey: []*schema.Column{AccountSnapshotsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_snapshots_accounts_account_snapshot",
				Columns:    []*schema.Column{AccountSnapshotsColumns[3]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "accountsnapshot_datehour_account_account_snapshot",
				Unique:  true,
				Columns: []*schema.Column{AccountSnapshotsColumns[1], AccountSnapshotsColumns[3]},
			},
		},
	}
	// OverallSnapshotsColumns holds the columns for the "overall_snapshots" table.
	OverallSnapshotsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "datehour", Type: field.TypeTime, Default: map[string]schema.Expr{"postgres": "date_trunc('hour', now())"}},
		{Name: "liquidity", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "investment", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "property", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "receivable", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "liability", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "profile_overall_snapshot", Type: field.TypeString},
	}
	// OverallSnapshotsTable holds the schema information for the "overall_snapshots" table.
	OverallSnapshotsTable = &schema.Table{
		Name:       "overall_snapshots",
		Columns:    OverallSnapshotsColumns,
		PrimaryKey: []*schema.Column{OverallSnapshotsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "overall_snapshots_profiles_overall_snapshot",
				Columns:    []*schema.Column{OverallSnapshotsColumns[7]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "overallsnapshot_datehour_profile_overall_snapshot",
				Unique:  true,
				Columns: []*schema.Column{OverallSnapshotsColumns[1], OverallSnapshotsColumns[7]},
			},
		},
	}
	// ProfilesColumns holds the columns for the "profiles" table.
	ProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "locale", Type: field.TypeString, Nullable: true},
		{Name: "currencies", Type: field.TypeString},
		{Name: "net_worth_goal", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_profile", Type: field.TypeString},
	}
	// ProfilesTable holds the schema information for the "profiles" table.
	ProfilesTable = &schema.Table{
		Name:       "profiles",
		Columns:    ProfilesColumns,
		PrimaryKey: []*schema.Column{ProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profiles_users_profile",
				Columns:    []*schema.Column{ProfilesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "amount", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "amount_delta", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "value", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(18,10)", "postgres": "numeric(18,10)"}},
		{Name: "fx_rate", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"mysql": "decimal(18,10)", "postgres": "numeric(18,10)"}},
		{Name: "balance", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "balance_delta", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(38,18)", "postgres": "numeric(38,18)"}},
		{Name: "note", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "account_transaction", Type: field.TypeString},
		{Name: "profile_transaction", Type: field.TypeString},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_accounts_transaction",
				Columns:    []*schema.Column{TransactionsColumns[10]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "transactions_profiles_transaction",
				Columns:    []*schema.Column{TransactionsColumns[11]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserKeysColumns holds the columns for the "user_keys" table.
	UserKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "hashed_password", Type: field.TypeString, Nullable: true},
		{Name: "user_user_key", Type: field.TypeString},
	}
	// UserKeysTable holds the schema information for the "user_keys" table.
	UserKeysTable = &schema.Table{
		Name:       "user_keys",
		Columns:    UserKeysColumns,
		PrimaryKey: []*schema.Column{UserKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_keys_users_user_key",
				Columns:    []*schema.Column{UserKeysColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		AccountSnapshotsTable,
		OverallSnapshotsTable,
		ProfilesTable,
		TransactionsTable,
		UsersTable,
		UserKeysTable,
	}
)

func init() {
	AccountsTable.ForeignKeys[0].RefTable = ProfilesTable
	AccountSnapshotsTable.ForeignKeys[0].RefTable = AccountsTable
	OverallSnapshotsTable.ForeignKeys[0].RefTable = ProfilesTable
	ProfilesTable.ForeignKeys[0].RefTable = UsersTable
	TransactionsTable.ForeignKeys[0].RefTable = AccountsTable
	TransactionsTable.ForeignKeys[1].RefTable = ProfilesTable
	UserKeysTable.ForeignKeys[0].RefTable = UsersTable
}
