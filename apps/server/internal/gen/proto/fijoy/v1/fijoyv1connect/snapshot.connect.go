// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fijoy/v1/snapshot.proto

package fijoyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fijoy/internal/gen/proto/fijoy/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SnapshotServiceName is the fully-qualified name of the SnapshotService service.
	SnapshotServiceName = "fijoy.v1.SnapshotService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SnapshotServiceGetSnapshotProcedure is the fully-qualified name of the SnapshotService's
	// GetSnapshot RPC.
	SnapshotServiceGetSnapshotProcedure = "/fijoy.v1.SnapshotService/GetSnapshot"
	// SnapshotServiceGetSnapshotsProcedure is the fully-qualified name of the SnapshotService's
	// GetSnapshots RPC.
	SnapshotServiceGetSnapshotsProcedure = "/fijoy.v1.SnapshotService/GetSnapshots"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	snapshotServiceServiceDescriptor            = v1.File_fijoy_v1_snapshot_proto.Services().ByName("SnapshotService")
	snapshotServiceGetSnapshotMethodDescriptor  = snapshotServiceServiceDescriptor.Methods().ByName("GetSnapshot")
	snapshotServiceGetSnapshotsMethodDescriptor = snapshotServiceServiceDescriptor.Methods().ByName("GetSnapshots")
)

// SnapshotServiceClient is a client for the fijoy.v1.SnapshotService service.
type SnapshotServiceClient interface {
	GetSnapshot(context.Context, *connect.Request[v1.GetSnapshotRequest]) (*connect.Response[v1.Snapshot], error)
	GetSnapshots(context.Context, *connect.Request[v1.GetSnapshotsRequest]) (*connect.Response[v1.Snapshots], error)
}

// NewSnapshotServiceClient constructs a client for the fijoy.v1.SnapshotService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSnapshotServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SnapshotServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &snapshotServiceClient{
		getSnapshot: connect.NewClient[v1.GetSnapshotRequest, v1.Snapshot](
			httpClient,
			baseURL+SnapshotServiceGetSnapshotProcedure,
			connect.WithSchema(snapshotServiceGetSnapshotMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSnapshots: connect.NewClient[v1.GetSnapshotsRequest, v1.Snapshots](
			httpClient,
			baseURL+SnapshotServiceGetSnapshotsProcedure,
			connect.WithSchema(snapshotServiceGetSnapshotsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// snapshotServiceClient implements SnapshotServiceClient.
type snapshotServiceClient struct {
	getSnapshot  *connect.Client[v1.GetSnapshotRequest, v1.Snapshot]
	getSnapshots *connect.Client[v1.GetSnapshotsRequest, v1.Snapshots]
}

// GetSnapshot calls fijoy.v1.SnapshotService.GetSnapshot.
func (c *snapshotServiceClient) GetSnapshot(ctx context.Context, req *connect.Request[v1.GetSnapshotRequest]) (*connect.Response[v1.Snapshot], error) {
	return c.getSnapshot.CallUnary(ctx, req)
}

// GetSnapshots calls fijoy.v1.SnapshotService.GetSnapshots.
func (c *snapshotServiceClient) GetSnapshots(ctx context.Context, req *connect.Request[v1.GetSnapshotsRequest]) (*connect.Response[v1.Snapshots], error) {
	return c.getSnapshots.CallUnary(ctx, req)
}

// SnapshotServiceHandler is an implementation of the fijoy.v1.SnapshotService service.
type SnapshotServiceHandler interface {
	GetSnapshot(context.Context, *connect.Request[v1.GetSnapshotRequest]) (*connect.Response[v1.Snapshot], error)
	GetSnapshots(context.Context, *connect.Request[v1.GetSnapshotsRequest]) (*connect.Response[v1.Snapshots], error)
}

// NewSnapshotServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSnapshotServiceHandler(svc SnapshotServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	snapshotServiceGetSnapshotHandler := connect.NewUnaryHandler(
		SnapshotServiceGetSnapshotProcedure,
		svc.GetSnapshot,
		connect.WithSchema(snapshotServiceGetSnapshotMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceGetSnapshotsHandler := connect.NewUnaryHandler(
		SnapshotServiceGetSnapshotsProcedure,
		svc.GetSnapshots,
		connect.WithSchema(snapshotServiceGetSnapshotsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/fijoy.v1.SnapshotService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SnapshotServiceGetSnapshotProcedure:
			snapshotServiceGetSnapshotHandler.ServeHTTP(w, r)
		case SnapshotServiceGetSnapshotsProcedure:
			snapshotServiceGetSnapshotsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSnapshotServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSnapshotServiceHandler struct{}

func (UnimplementedSnapshotServiceHandler) GetSnapshot(context.Context, *connect.Request[v1.GetSnapshotRequest]) (*connect.Response[v1.Snapshot], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.SnapshotService.GetSnapshot is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) GetSnapshots(context.Context, *connect.Request[v1.GetSnapshotsRequest]) (*connect.Response[v1.Snapshots], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.SnapshotService.GetSnapshots is not implemented"))
}
