// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fijoy/v1/delta.proto

package fijoyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fijoy/internal/gen/proto/fijoy/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeltaServiceName is the fully-qualified name of the DeltaService service.
	DeltaServiceName = "fijoy.v1.DeltaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeltaServiceGetDeltasProcedure is the fully-qualified name of the DeltaService's GetDeltas RPC.
	DeltaServiceGetDeltasProcedure = "/fijoy.v1.DeltaService/GetDeltas"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deltaServiceServiceDescriptor         = v1.File_fijoy_v1_delta_proto.Services().ByName("DeltaService")
	deltaServiceGetDeltasMethodDescriptor = deltaServiceServiceDescriptor.Methods().ByName("GetDeltas")
)

// DeltaServiceClient is a client for the fijoy.v1.DeltaService service.
type DeltaServiceClient interface {
	GetDeltas(context.Context, *connect.Request[v1.GetDeltasRequest]) (*connect.Response[v1.Deltas], error)
}

// NewDeltaServiceClient constructs a client for the fijoy.v1.DeltaService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeltaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeltaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deltaServiceClient{
		getDeltas: connect.NewClient[v1.GetDeltasRequest, v1.Deltas](
			httpClient,
			baseURL+DeltaServiceGetDeltasProcedure,
			connect.WithSchema(deltaServiceGetDeltasMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// deltaServiceClient implements DeltaServiceClient.
type deltaServiceClient struct {
	getDeltas *connect.Client[v1.GetDeltasRequest, v1.Deltas]
}

// GetDeltas calls fijoy.v1.DeltaService.GetDeltas.
func (c *deltaServiceClient) GetDeltas(ctx context.Context, req *connect.Request[v1.GetDeltasRequest]) (*connect.Response[v1.Deltas], error) {
	return c.getDeltas.CallUnary(ctx, req)
}

// DeltaServiceHandler is an implementation of the fijoy.v1.DeltaService service.
type DeltaServiceHandler interface {
	GetDeltas(context.Context, *connect.Request[v1.GetDeltasRequest]) (*connect.Response[v1.Deltas], error)
}

// NewDeltaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeltaServiceHandler(svc DeltaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deltaServiceGetDeltasHandler := connect.NewUnaryHandler(
		DeltaServiceGetDeltasProcedure,
		svc.GetDeltas,
		connect.WithSchema(deltaServiceGetDeltasMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/fijoy.v1.DeltaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeltaServiceGetDeltasProcedure:
			deltaServiceGetDeltasHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeltaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeltaServiceHandler struct{}

func (UnimplementedDeltaServiceHandler) GetDeltas(context.Context, *connect.Request[v1.GetDeltasRequest]) (*connect.Response[v1.Deltas], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.DeltaService.GetDeltas is not implemented"))
}
