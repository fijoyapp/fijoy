// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fijoy/v1/category.proto

package fijoyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fijoy/internal/gen/proto/fijoy/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CategoryServiceName is the fully-qualified name of the CategoryService service.
	CategoryServiceName = "fijoy.v1.CategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CategoryServiceCreateCategoriesProcedure is the fully-qualified name of the CategoryService's
	// CreateCategories RPC.
	CategoryServiceCreateCategoriesProcedure = "/fijoy.v1.CategoryService/CreateCategories"
	// CategoryServiceGetCategoriesProcedure is the fully-qualified name of the CategoryService's
	// GetCategories RPC.
	CategoryServiceGetCategoriesProcedure = "/fijoy.v1.CategoryService/GetCategories"
	// CategoryServiceUpdateCategoryByIdProcedure is the fully-qualified name of the CategoryService's
	// UpdateCategoryById RPC.
	CategoryServiceUpdateCategoryByIdProcedure = "/fijoy.v1.CategoryService/UpdateCategoryById"
	// CategoryServiceDeleteCategoryByIdProcedure is the fully-qualified name of the CategoryService's
	// DeleteCategoryById RPC.
	CategoryServiceDeleteCategoryByIdProcedure = "/fijoy.v1.CategoryService/DeleteCategoryById"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	categoryServiceServiceDescriptor                  = v1.File_fijoy_v1_category_proto.Services().ByName("CategoryService")
	categoryServiceCreateCategoriesMethodDescriptor   = categoryServiceServiceDescriptor.Methods().ByName("CreateCategories")
	categoryServiceGetCategoriesMethodDescriptor      = categoryServiceServiceDescriptor.Methods().ByName("GetCategories")
	categoryServiceUpdateCategoryByIdMethodDescriptor = categoryServiceServiceDescriptor.Methods().ByName("UpdateCategoryById")
	categoryServiceDeleteCategoryByIdMethodDescriptor = categoryServiceServiceDescriptor.Methods().ByName("DeleteCategoryById")
)

// CategoryServiceClient is a client for the fijoy.v1.CategoryService service.
type CategoryServiceClient interface {
	CreateCategories(context.Context, *connect.Request[v1.CreateCategoriesRequest]) (*connect.Response[emptypb.Empty], error)
	GetCategories(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Categories], error)
	UpdateCategoryById(context.Context, *connect.Request[v1.UpdateCategoryByIdRequest]) (*connect.Response[v1.Category], error)
	DeleteCategoryById(context.Context, *connect.Request[v1.DeleteCategoryByIdRequest]) (*connect.Response[v1.Category], error)
}

// NewCategoryServiceClient constructs a client for the fijoy.v1.CategoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &categoryServiceClient{
		createCategories: connect.NewClient[v1.CreateCategoriesRequest, emptypb.Empty](
			httpClient,
			baseURL+CategoryServiceCreateCategoriesProcedure,
			connect.WithSchema(categoryServiceCreateCategoriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCategories: connect.NewClient[emptypb.Empty, v1.Categories](
			httpClient,
			baseURL+CategoryServiceGetCategoriesProcedure,
			connect.WithSchema(categoryServiceGetCategoriesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateCategoryById: connect.NewClient[v1.UpdateCategoryByIdRequest, v1.Category](
			httpClient,
			baseURL+CategoryServiceUpdateCategoryByIdProcedure,
			connect.WithSchema(categoryServiceUpdateCategoryByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCategoryById: connect.NewClient[v1.DeleteCategoryByIdRequest, v1.Category](
			httpClient,
			baseURL+CategoryServiceDeleteCategoryByIdProcedure,
			connect.WithSchema(categoryServiceDeleteCategoryByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// categoryServiceClient implements CategoryServiceClient.
type categoryServiceClient struct {
	createCategories   *connect.Client[v1.CreateCategoriesRequest, emptypb.Empty]
	getCategories      *connect.Client[emptypb.Empty, v1.Categories]
	updateCategoryById *connect.Client[v1.UpdateCategoryByIdRequest, v1.Category]
	deleteCategoryById *connect.Client[v1.DeleteCategoryByIdRequest, v1.Category]
}

// CreateCategories calls fijoy.v1.CategoryService.CreateCategories.
func (c *categoryServiceClient) CreateCategories(ctx context.Context, req *connect.Request[v1.CreateCategoriesRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createCategories.CallUnary(ctx, req)
}

// GetCategories calls fijoy.v1.CategoryService.GetCategories.
func (c *categoryServiceClient) GetCategories(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.Categories], error) {
	return c.getCategories.CallUnary(ctx, req)
}

// UpdateCategoryById calls fijoy.v1.CategoryService.UpdateCategoryById.
func (c *categoryServiceClient) UpdateCategoryById(ctx context.Context, req *connect.Request[v1.UpdateCategoryByIdRequest]) (*connect.Response[v1.Category], error) {
	return c.updateCategoryById.CallUnary(ctx, req)
}

// DeleteCategoryById calls fijoy.v1.CategoryService.DeleteCategoryById.
func (c *categoryServiceClient) DeleteCategoryById(ctx context.Context, req *connect.Request[v1.DeleteCategoryByIdRequest]) (*connect.Response[v1.Category], error) {
	return c.deleteCategoryById.CallUnary(ctx, req)
}

// CategoryServiceHandler is an implementation of the fijoy.v1.CategoryService service.
type CategoryServiceHandler interface {
	CreateCategories(context.Context, *connect.Request[v1.CreateCategoriesRequest]) (*connect.Response[emptypb.Empty], error)
	GetCategories(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Categories], error)
	UpdateCategoryById(context.Context, *connect.Request[v1.UpdateCategoryByIdRequest]) (*connect.Response[v1.Category], error)
	DeleteCategoryById(context.Context, *connect.Request[v1.DeleteCategoryByIdRequest]) (*connect.Response[v1.Category], error)
}

// NewCategoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCategoryServiceHandler(svc CategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	categoryServiceCreateCategoriesHandler := connect.NewUnaryHandler(
		CategoryServiceCreateCategoriesProcedure,
		svc.CreateCategories,
		connect.WithSchema(categoryServiceCreateCategoriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceGetCategoriesHandler := connect.NewUnaryHandler(
		CategoryServiceGetCategoriesProcedure,
		svc.GetCategories,
		connect.WithSchema(categoryServiceGetCategoriesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceUpdateCategoryByIdHandler := connect.NewUnaryHandler(
		CategoryServiceUpdateCategoryByIdProcedure,
		svc.UpdateCategoryById,
		connect.WithSchema(categoryServiceUpdateCategoryByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceDeleteCategoryByIdHandler := connect.NewUnaryHandler(
		CategoryServiceDeleteCategoryByIdProcedure,
		svc.DeleteCategoryById,
		connect.WithSchema(categoryServiceDeleteCategoryByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fijoy.v1.CategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CategoryServiceCreateCategoriesProcedure:
			categoryServiceCreateCategoriesHandler.ServeHTTP(w, r)
		case CategoryServiceGetCategoriesProcedure:
			categoryServiceGetCategoriesHandler.ServeHTTP(w, r)
		case CategoryServiceUpdateCategoryByIdProcedure:
			categoryServiceUpdateCategoryByIdHandler.ServeHTTP(w, r)
		case CategoryServiceDeleteCategoryByIdProcedure:
			categoryServiceDeleteCategoryByIdHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCategoryServiceHandler struct{}

func (UnimplementedCategoryServiceHandler) CreateCategories(context.Context, *connect.Request[v1.CreateCategoriesRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.CategoryService.CreateCategories is not implemented"))
}

func (UnimplementedCategoryServiceHandler) GetCategories(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Categories], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.CategoryService.GetCategories is not implemented"))
}

func (UnimplementedCategoryServiceHandler) UpdateCategoryById(context.Context, *connect.Request[v1.UpdateCategoryByIdRequest]) (*connect.Response[v1.Category], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.CategoryService.UpdateCategoryById is not implemented"))
}

func (UnimplementedCategoryServiceHandler) DeleteCategoryById(context.Context, *connect.Request[v1.DeleteCategoryByIdRequest]) (*connect.Response[v1.Category], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fijoy.v1.CategoryService.DeleteCategoryById is not implemented"))
}
