//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FijoyTransaction = newFijoyTransactionTable("public", "fijoy_transaction", "")

type fijoyTransactionTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	ProfileID    postgres.ColumnString
	AccountID    postgres.ColumnString
	Amount       postgres.ColumnFloat
	AmountDelta  postgres.ColumnFloat
	Value        postgres.ColumnFloat
	FxRate       postgres.ColumnFloat
	Balance      postgres.ColumnFloat
	BalanceDelta postgres.ColumnFloat
	Note         postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FijoyTransactionTable struct {
	fijoyTransactionTable

	EXCLUDED fijoyTransactionTable
}

// AS creates new FijoyTransactionTable with assigned alias
func (a FijoyTransactionTable) AS(alias string) *FijoyTransactionTable {
	return newFijoyTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FijoyTransactionTable with assigned schema name
func (a FijoyTransactionTable) FromSchema(schemaName string) *FijoyTransactionTable {
	return newFijoyTransactionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FijoyTransactionTable with assigned table prefix
func (a FijoyTransactionTable) WithPrefix(prefix string) *FijoyTransactionTable {
	return newFijoyTransactionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FijoyTransactionTable with assigned table suffix
func (a FijoyTransactionTable) WithSuffix(suffix string) *FijoyTransactionTable {
	return newFijoyTransactionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFijoyTransactionTable(schemaName, tableName, alias string) *FijoyTransactionTable {
	return &FijoyTransactionTable{
		fijoyTransactionTable: newFijoyTransactionTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newFijoyTransactionTableImpl("", "excluded", ""),
	}
}

func newFijoyTransactionTableImpl(schemaName, tableName, alias string) fijoyTransactionTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		ProfileIDColumn    = postgres.StringColumn("profile_id")
		AccountIDColumn    = postgres.StringColumn("account_id")
		AmountColumn       = postgres.FloatColumn("amount")
		AmountDeltaColumn  = postgres.FloatColumn("amount_delta")
		ValueColumn        = postgres.FloatColumn("value")
		FxRateColumn       = postgres.FloatColumn("fx_rate")
		BalanceColumn      = postgres.FloatColumn("balance")
		BalanceDeltaColumn = postgres.FloatColumn("balance_delta")
		NoteColumn         = postgres.StringColumn("note")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, ProfileIDColumn, AccountIDColumn, AmountColumn, AmountDeltaColumn, ValueColumn, FxRateColumn, BalanceColumn, BalanceDeltaColumn, NoteColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{ProfileIDColumn, AccountIDColumn, AmountColumn, AmountDeltaColumn, ValueColumn, FxRateColumn, BalanceColumn, BalanceDeltaColumn, NoteColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return fijoyTransactionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		ProfileID:    ProfileIDColumn,
		AccountID:    AccountIDColumn,
		Amount:       AmountColumn,
		AmountDelta:  AmountDeltaColumn,
		Value:        ValueColumn,
		FxRate:       FxRateColumn,
		Balance:      BalanceColumn,
		BalanceDelta: BalanceDeltaColumn,
		Note:         NoteColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
