//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FijoyDelta = newFijoyDeltaTable("public", "fijoy_delta", "")

type fijoyDeltaTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	ProfileID  postgres.ColumnString
	Datetime   postgres.ColumnTimestampz
	Liquidity  postgres.ColumnFloat
	Investment postgres.ColumnFloat
	Property   postgres.ColumnFloat
	Receivable postgres.ColumnFloat
	Liability  postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FijoyDeltaTable struct {
	fijoyDeltaTable

	EXCLUDED fijoyDeltaTable
}

// AS creates new FijoyDeltaTable with assigned alias
func (a FijoyDeltaTable) AS(alias string) *FijoyDeltaTable {
	return newFijoyDeltaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FijoyDeltaTable with assigned schema name
func (a FijoyDeltaTable) FromSchema(schemaName string) *FijoyDeltaTable {
	return newFijoyDeltaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FijoyDeltaTable with assigned table prefix
func (a FijoyDeltaTable) WithPrefix(prefix string) *FijoyDeltaTable {
	return newFijoyDeltaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FijoyDeltaTable with assigned table suffix
func (a FijoyDeltaTable) WithSuffix(suffix string) *FijoyDeltaTable {
	return newFijoyDeltaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFijoyDeltaTable(schemaName, tableName, alias string) *FijoyDeltaTable {
	return &FijoyDeltaTable{
		fijoyDeltaTable: newFijoyDeltaTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newFijoyDeltaTableImpl("", "excluded", ""),
	}
}

func newFijoyDeltaTableImpl(schemaName, tableName, alias string) fijoyDeltaTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		ProfileIDColumn  = postgres.StringColumn("profile_id")
		DatetimeColumn   = postgres.TimestampzColumn("datetime")
		LiquidityColumn  = postgres.FloatColumn("liquidity")
		InvestmentColumn = postgres.FloatColumn("investment")
		PropertyColumn   = postgres.FloatColumn("property")
		ReceivableColumn = postgres.FloatColumn("receivable")
		LiabilityColumn  = postgres.FloatColumn("liability")
		allColumns       = postgres.ColumnList{IDColumn, ProfileIDColumn, DatetimeColumn, LiquidityColumn, InvestmentColumn, PropertyColumn, ReceivableColumn, LiabilityColumn}
		mutableColumns   = postgres.ColumnList{ProfileIDColumn, DatetimeColumn, LiquidityColumn, InvestmentColumn, PropertyColumn, ReceivableColumn, LiabilityColumn}
	)

	return fijoyDeltaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		ProfileID:  ProfileIDColumn,
		Datetime:   DatetimeColumn,
		Liquidity:  LiquidityColumn,
		Investment: InvestmentColumn,
		Property:   PropertyColumn,
		Receivable: ReceivableColumn,
		Liability:  LiabilityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
