//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FijoyAccount = newFijoyAccountTable("public", "fijoy_account", "")

type fijoyAccountTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	ProfileID   postgres.ColumnString
	Name        postgres.ColumnString
	AccountType postgres.ColumnString
	Active      postgres.ColumnBool
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	Symbol      postgres.ColumnString
	Amount      postgres.ColumnFloat
	Currency    postgres.ColumnString
	Value       postgres.ColumnFloat
	FxRate      postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FijoyAccountTable struct {
	fijoyAccountTable

	EXCLUDED fijoyAccountTable
}

// AS creates new FijoyAccountTable with assigned alias
func (a FijoyAccountTable) AS(alias string) *FijoyAccountTable {
	return newFijoyAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FijoyAccountTable with assigned schema name
func (a FijoyAccountTable) FromSchema(schemaName string) *FijoyAccountTable {
	return newFijoyAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FijoyAccountTable with assigned table prefix
func (a FijoyAccountTable) WithPrefix(prefix string) *FijoyAccountTable {
	return newFijoyAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FijoyAccountTable with assigned table suffix
func (a FijoyAccountTable) WithSuffix(suffix string) *FijoyAccountTable {
	return newFijoyAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFijoyAccountTable(schemaName, tableName, alias string) *FijoyAccountTable {
	return &FijoyAccountTable{
		fijoyAccountTable: newFijoyAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newFijoyAccountTableImpl("", "excluded", ""),
	}
}

func newFijoyAccountTableImpl(schemaName, tableName, alias string) fijoyAccountTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		ProfileIDColumn   = postgres.StringColumn("profile_id")
		NameColumn        = postgres.StringColumn("name")
		AccountTypeColumn = postgres.StringColumn("account_type")
		ActiveColumn      = postgres.BoolColumn("active")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		SymbolColumn      = postgres.StringColumn("symbol")
		AmountColumn      = postgres.FloatColumn("amount")
		CurrencyColumn    = postgres.StringColumn("currency")
		ValueColumn       = postgres.FloatColumn("value")
		FxRateColumn      = postgres.FloatColumn("fx_rate")
		allColumns        = postgres.ColumnList{IDColumn, ProfileIDColumn, NameColumn, AccountTypeColumn, ActiveColumn, CreatedAtColumn, UpdatedAtColumn, SymbolColumn, AmountColumn, CurrencyColumn, ValueColumn, FxRateColumn}
		mutableColumns    = postgres.ColumnList{ProfileIDColumn, NameColumn, AccountTypeColumn, ActiveColumn, CreatedAtColumn, UpdatedAtColumn, SymbolColumn, AmountColumn, CurrencyColumn, ValueColumn, FxRateColumn}
	)

	return fijoyAccountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ProfileID:   ProfileIDColumn,
		Name:        NameColumn,
		AccountType: AccountTypeColumn,
		Active:      ActiveColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Symbol:      SymbolColumn,
		Amount:      AmountColumn,
		Currency:    CurrencyColumn,
		Value:       ValueColumn,
		FxRate:      FxRateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
