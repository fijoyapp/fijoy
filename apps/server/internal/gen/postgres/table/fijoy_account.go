//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FijoyAccount = newFijoyAccountTable("public", "fijoy_account", "")

type fijoyAccountTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnString
	ProfileID         postgres.ColumnString
	Name              postgres.ColumnString
	AccountType       postgres.ColumnString
	Archived          postgres.ColumnBool
	IncludeInNetWorth postgres.ColumnBool
	Symbol            postgres.ColumnString
	SymbolType        postgres.ColumnString
	Amount            postgres.ColumnFloat
	Value             postgres.ColumnFloat
	FxRate            postgres.ColumnFloat
	Balance           postgres.ColumnFloat
	CreatedAt         postgres.ColumnTimestampz
	UpdatedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FijoyAccountTable struct {
	fijoyAccountTable

	EXCLUDED fijoyAccountTable
}

// AS creates new FijoyAccountTable with assigned alias
func (a FijoyAccountTable) AS(alias string) *FijoyAccountTable {
	return newFijoyAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FijoyAccountTable with assigned schema name
func (a FijoyAccountTable) FromSchema(schemaName string) *FijoyAccountTable {
	return newFijoyAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FijoyAccountTable with assigned table prefix
func (a FijoyAccountTable) WithPrefix(prefix string) *FijoyAccountTable {
	return newFijoyAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FijoyAccountTable with assigned table suffix
func (a FijoyAccountTable) WithSuffix(suffix string) *FijoyAccountTable {
	return newFijoyAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFijoyAccountTable(schemaName, tableName, alias string) *FijoyAccountTable {
	return &FijoyAccountTable{
		fijoyAccountTable: newFijoyAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newFijoyAccountTableImpl("", "excluded", ""),
	}
}

func newFijoyAccountTableImpl(schemaName, tableName, alias string) fijoyAccountTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		ProfileIDColumn         = postgres.StringColumn("profile_id")
		NameColumn              = postgres.StringColumn("name")
		AccountTypeColumn       = postgres.StringColumn("account_type")
		ArchivedColumn          = postgres.BoolColumn("archived")
		IncludeInNetWorthColumn = postgres.BoolColumn("include_in_net_worth")
		SymbolColumn            = postgres.StringColumn("symbol")
		SymbolTypeColumn        = postgres.StringColumn("symbol_type")
		AmountColumn            = postgres.FloatColumn("amount")
		ValueColumn             = postgres.FloatColumn("value")
		FxRateColumn            = postgres.FloatColumn("fx_rate")
		BalanceColumn           = postgres.FloatColumn("balance")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampzColumn("updated_at")
		allColumns              = postgres.ColumnList{IDColumn, ProfileIDColumn, NameColumn, AccountTypeColumn, ArchivedColumn, IncludeInNetWorthColumn, SymbolColumn, SymbolTypeColumn, AmountColumn, ValueColumn, FxRateColumn, BalanceColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns          = postgres.ColumnList{ProfileIDColumn, NameColumn, AccountTypeColumn, ArchivedColumn, IncludeInNetWorthColumn, SymbolColumn, SymbolTypeColumn, AmountColumn, ValueColumn, FxRateColumn, BalanceColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return fijoyAccountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		ProfileID:         ProfileIDColumn,
		Name:              NameColumn,
		AccountType:       AccountTypeColumn,
		Archived:          ArchivedColumn,
		IncludeInNetWorth: IncludeInNetWorthColumn,
		Symbol:            SymbolColumn,
		SymbolType:        SymbolTypeColumn,
		Amount:            AmountColumn,
		Value:             ValueColumn,
		FxRate:            FxRateColumn,
		Balance:           BalanceColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
