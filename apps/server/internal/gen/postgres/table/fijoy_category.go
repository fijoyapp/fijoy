//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FijoyCategory = newFijoyCategoryTable("public", "fijoy_category", "")

type fijoyCategoryTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	WorkspaceID  postgres.ColumnString
	Name         postgres.ColumnString
	CategoryType postgres.ColumnString
	Position     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FijoyCategoryTable struct {
	fijoyCategoryTable

	EXCLUDED fijoyCategoryTable
}

// AS creates new FijoyCategoryTable with assigned alias
func (a FijoyCategoryTable) AS(alias string) *FijoyCategoryTable {
	return newFijoyCategoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FijoyCategoryTable with assigned schema name
func (a FijoyCategoryTable) FromSchema(schemaName string) *FijoyCategoryTable {
	return newFijoyCategoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FijoyCategoryTable with assigned table prefix
func (a FijoyCategoryTable) WithPrefix(prefix string) *FijoyCategoryTable {
	return newFijoyCategoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FijoyCategoryTable with assigned table suffix
func (a FijoyCategoryTable) WithSuffix(suffix string) *FijoyCategoryTable {
	return newFijoyCategoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFijoyCategoryTable(schemaName, tableName, alias string) *FijoyCategoryTable {
	return &FijoyCategoryTable{
		fijoyCategoryTable: newFijoyCategoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newFijoyCategoryTableImpl("", "excluded", ""),
	}
}

func newFijoyCategoryTableImpl(schemaName, tableName, alias string) fijoyCategoryTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		WorkspaceIDColumn  = postgres.StringColumn("workspace_id")
		NameColumn         = postgres.StringColumn("name")
		CategoryTypeColumn = postgres.StringColumn("category_type")
		PositionColumn     = postgres.StringColumn("position")
		allColumns         = postgres.ColumnList{IDColumn, WorkspaceIDColumn, NameColumn, CategoryTypeColumn, PositionColumn}
		mutableColumns     = postgres.ColumnList{WorkspaceIDColumn, NameColumn, CategoryTypeColumn, PositionColumn}
	)

	return fijoyCategoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		WorkspaceID:  WorkspaceIDColumn,
		Name:         NameColumn,
		CategoryType: CategoryTypeColumn,
		Position:     PositionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
