package fijoy

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"
	"fmt"
	"time"

	"fijoy/ent"
	"fijoy/ent/account"
	"fijoy/ent/profile"
	"fijoy/ent/user"
	"fijoy/ent/userprofile"
	"fijoy/internal/util/auth"
	"fijoy/internal/util/currency"
	"fijoy/internal/util/pointer"

	"github.com/samber/lo"
	"github.com/shopspring/decimal"
)

// BalanceInDefaultCurrency is the resolver for the balance_in_default_currency field.
func (r *accountResolver) BalanceInDefaultCurrency(ctx context.Context, obj *ent.Account) (string, error) {
	profile, err := r.Query().Profile(ctx)
	fmt.Println("Obj:", obj)
	if err != nil {
		return "", fmt.Errorf("failed to get profile: %w", err)
	}
	defaultCurrency := profile.Currencies[0]
	if obj.CurrencyCode == defaultCurrency {
		return obj.Balance.String(), nil
	}

	fxRate, err := r.marketDataClient.GetFxRate(ctx, obj.CurrencyCode, defaultCurrency)
	fmt.Println("FX Rate:", fxRate)
	if err != nil {
		return "", fmt.Errorf("failed to get fx rate: %w", err)
	}

	return obj.Balance.Mul(fxRate.Rate).String(), nil
}

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input ent.CreateProfileInput) (*ent.Profile, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetUserDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	allExist := lo.EveryBy(input.Currencies, func(code string) bool {
		return currency.IsValidCurrency(code)
	})
	if !allExist {
		return nil, fmt.Errorf("invalid currencies: %s", input.Currencies)
	}

	defaultCurrency, ok := currency.Currencies[input.Currencies[0]]
	if !ok {
		return nil, fmt.Errorf("default currency not found: %s", input.Currencies[0])
	}

	profile, err := client.Profile.Create().
		SetInput(input).
		SetLocale(defaultCurrency.Locale).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create profile: %w", err)
	}

	_, err = client.UserProfile.Create().
		SetPermission(userprofile.PermissionOwner).
		SetUserID(userData.UserID).SetProfile(profile).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create user profile: %w", err)
	}

	_, tokenString, _ := r.authConfig.JWT_AUTH.Encode(
		map[string]any{
			"user_id":    userData.UserID,
			"profile_id": profile.ID,
		},
	)

	auth.SetJwtCookie(ctx, tokenString)

	return profile, err
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, id int, input ent.UpdateProfileInput) (*ent.Profile, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	if userData.ProfileID != id {
		return nil, errors.New("unauthorized to update this profile")
	}

	profile, err := client.Profile.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return profile, nil
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input ent.CreateAccountInput) (*CreateAccountResponse, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	var value decimal.Decimal
	var currencyCode string

	switch input.AccountType {
	case account.AccountTypeInvestment:
		assetInfo, err := r.marketDataClient.GetAssetInfo(ctx, input.Ticker)
		if err != nil {
			return nil, fmt.Errorf("failed to get asset info: %w", err)
		}
		// currencySymbol
		currencyCode = assetInfo.Currency
		// value
		value = assetInfo.CurrentPrice
	case account.AccountTypeLiquidity, account.AccountTypeLiability, account.AccountTypeProperty, account.AccountTypeReceivable:
		// currencySymbol
		currencyCode = input.CurrencyCode
		// value
		value = decimal.NewFromInt(1)
	default:
		return nil, errors.New("invalid account type")
	}

	account, err := client.Account.Create().
		SetInput(input).
		SetCurrencyCode(currencyCode).
		SetAmount(decimal.NewFromInt(0)).
		SetProfileID(userData.ProfileID).
		SetValue(value).
		SetBalance(decimal.NewFromInt(0)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	createTransactionInput := CreateTransactionWithTransactionEntriesInput{
		Note: pointer.To("Initial account setup"),
		TransactionEntries: []*ent.CreateTransactionEntryInput{{
			Amount:    input.Amount,
			AccountID: account.ID,
		}},
		Datetime: &time.Time{},
	}
	transaction, err := r.CreateTransactionWithTransactionEntries(ctx, createTransactionInput)
	if err != nil {
		return nil, err
	}

	account, err = client.Account.Get(ctx, account.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get account after creation: %w", err)
	}

	return &CreateAccountResponse{
		AccountEdge:     account.ToEdge(ent.DefaultAccountOrder),
		TransactionEdge: transaction.ToEdge(ent.DefaultTransactionOrder),
	}, nil
}

// CreateTransactionWithTransactionEntries is the resolver for the createTransactionWithTransactionEntries field.
func (r *mutationResolver) CreateTransactionWithTransactionEntries(ctx context.Context, input CreateTransactionWithTransactionEntriesInput) (*ent.Transaction, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	balance := decimal.NewFromInt(0)

	transactionBuilder := client.Transaction.Create().
		SetProfileID(userData.ProfileID)

	if input.Note != nil {
		transactionBuilder = transactionBuilder.SetNote(*input.Note)
	}

	transaction, err := transactionBuilder.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create transaction: %w", err)
	}

	for _, entry := range input.TransactionEntries {
		input := ent.CreateTransactionEntryInput{
			TransactionID: transaction.ID,
			AccountID:     entry.AccountID,
			Amount:        entry.Amount,
		}
		transactionEntry, err := r.CreateTransactionEntry(ctx, input)
		if err != nil {
			return nil, fmt.Errorf("failed to create transaction entry: %w", err)
		}

		balance = balance.Add(transactionEntry.Balance)
	}

	transaction, err = transaction.Update().Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update transaction balance: %w", err)
	}

	return transaction, nil
}

// CreateTransactionEntry is the resolver for the createTransactionEntry field.
func (r *mutationResolver) CreateTransactionEntry(ctx context.Context, input ent.CreateTransactionEntryInput) (*ent.TransactionEntry, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := client.Account.Query().Where(account.ID(input.AccountID), account.HasProfileWith(profile.ID(userData.ProfileID))).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("account not found: %w", err)
	}

	balance := (account.Value).Mul(input.Amount)

	transactionEntry, err := client.TransactionEntry.Create().
		SetInput(input).
		SetValue(account.Value).
		SetBalance(balance).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create transaction: %w", err)
	}

	_, err = account.Update().AddAmount(input.Amount).AddBalance(balance).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update account balance: %w", err)
	}

	return transactionEntry, nil
}

// RefreshAccounts is the resolver for the refreshAccounts field.
func (r *mutationResolver) RefreshAccounts(ctx context.Context) (*RefreshAccountsResponse, error) {
	panic(fmt.Errorf("not implemented: RefreshAccounts - refreshAccounts"))
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*ent.Profile, error) {
	authData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.Profile.Query().Where(profile.ID(authData.ProfileID)).Only(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*ent.User, error) {
	authData, err := auth.GetUserDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.User.Query().Where(user.ID(authData.UserID)).Only(ctx)
}

// Currencies is the resolver for the currencies field.
func (r *queryResolver) Currencies(ctx context.Context) ([]*Currency, error) {
	currencies := lo.Map(lo.Values(currency.Currencies),
		func(currency currency.Currency, _ int) *Currency {
			return &Currency{
				Code: currency.Code, Locale: currency.Locale,
			}
		})

	return currencies, nil
}

// AssetInfo is the resolver for the assetInfo field.
func (r *queryResolver) AssetInfo(ctx context.Context, symbol string) (*AssetInfo, error) {
	assetInfo, err := r.marketDataClient.GetAssetInfo(ctx, symbol)
	if err != nil {
		return nil, fmt.Errorf("failed to get asset info: %w", err)
	}

	if assetInfo == nil {
		return nil, nil
	}

	return &AssetInfo{
		Symbol:       assetInfo.Symbol,
		Name:         assetInfo.Name,
		Exchange:     assetInfo.Exchange,
		Currency:     assetInfo.Currency,
		CurrentPrice: assetInfo.CurrentPrice.String(),
	}, nil
}

// FxRate is the resolver for the fxRate field.
func (r *queryResolver) FxRate(ctx context.Context, fromCurrency string, toCurrency string) (*FXRate, error) {
	fxRate, err := r.marketDataClient.GetFxRate(ctx, fromCurrency, toCurrency)
	if err != nil {
		return nil, fmt.Errorf("failed to get fx rate: %w", err)
	}

	if fxRate == nil {
		return nil, nil
	}

	return &FXRate{
		Rate: fxRate.Rate.String(),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
