package fijoy

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fijoy/constants"
	"fijoy/ent"
	"fijoy/ent/profile"
	"fijoy/ent/user"
	"fijoy/internal/util/auth"

	"github.com/samber/lo"
)

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*ent.Profile, error) {
	authData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.Profile.Query().Where(profile.ID(authData.ProfileId)).Only(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*ent.User, error) {
	authData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.User.Query().Where(user.ID(authData.UserId)).Only(ctx)
}

// Currencies is the resolver for the currencies field.
func (r *queryResolver) Currencies(ctx context.Context) ([]*Currency, error) {
	currencies := lo.Map(lo.Values(constants.Currencies),
		func(currency constants.Currency, _ int) *Currency {
			return &Currency{
				Code: currency.Code, Locale: currency.Locale,
			}
		})

	return currencies, nil
}
