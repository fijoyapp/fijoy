package fijoy

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fijoy/constants"
	"fijoy/ent"
	"fijoy/ent/user"
	"fijoy/internal/util/auth"
	"fmt"

	"github.com/samber/lo"
)

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input ent.CreateProfileInput) (*ent.Profile, error) {
	userData, err := auth.GetUserDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	profile, err := r.client.Profile.Create().
		SetCurrencies(input.Currencies). // TODO: sanitize this
		SetNetWorthGoal(input.NetWorthGoal).
		SetLocale(input.Locale). // TODO: sanitize this
		SetUserID(userData.UserId).
		Save(ctx)

	_, tokenString, _ := r.authConfig.JWT_AUTH.Encode(
		map[string]any{
			"user_id":    userData.UserId,
			"profile_id": profile.ID,
		},
	)

	auth.SetJwtCookie(ctx, tokenString)

	return profile, err
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, id string, input ent.UpdateProfileInput) (*ent.Profile, error) {
	panic(fmt.Errorf("not implemented: UpdateProfile - updateProfile"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*ent.User, error) {
	authData, err := auth.GetUserDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.User.Query().Where(user.ID(authData.UserId)).Only(ctx)
}

// Currencies is the resolver for the currencies field.
func (r *queryResolver) Currencies(ctx context.Context) ([]*Currency, error) {
	currencies := lo.Map(lo.Values(constants.Currencies),
		func(currency constants.Currency, _ int) *Currency {
			return &Currency{
				Code: currency.Code, Locale: currency.Locale,
			}
		})

	return currencies, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
