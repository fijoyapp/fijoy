package fijoy

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"errors"
	"fijoy/constants"
	"fijoy/ent"
	"fijoy/ent/account"
	"fijoy/ent/profile"
	"fijoy/ent/user"
	"fijoy/internal/util/auth"
	"fijoy/internal/util/pointer"
	"fmt"
	"strings"

	"github.com/samber/lo"
	"github.com/shopspring/decimal"
)

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input ent.CreateProfileInput) (*ent.Profile, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetUserDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	currencies := strings.Split(input.Currencies, ",")

	allExist := lo.EveryBy(currencies, func(currency string) bool {
		return constants.IsValidCurrency(currency)
	})
	if !allExist {
		return nil, fmt.Errorf("invalid currencies: %s", input.Currencies)
	}

	defaultLocale := constants.Currencies[currencies[0]].Locale

	profile, err := client.Profile.Create().
		SetCurrencies(input.Currencies).
		SetNetWorthGoal(input.NetWorthGoal).
		SetLocale(defaultLocale).
		SetUserID(userData.UserId).
		Save(ctx)

	_, tokenString, _ := r.authConfig.JWT_AUTH.Encode(
		map[string]any{
			"user_id":    userData.UserId,
			"profile_id": profile.ID,
		},
	)

	auth.SetJwtCookie(ctx, tokenString)

	return profile, err
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, id string, input ent.UpdateProfileInput) (*ent.Profile, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	if userData.ProfileId != id {
		return nil, errors.New("unauthorized to update this profile")
	}

	profile, err := client.Profile.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return profile, nil
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input ent.CreateAccountInput) (*ent.Account, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := client.Account.Create().
		SetName(input.Name).
		SetAccountType(input.AccountType).
		SetSymbol(input.Symbol).
		SetSymbolType(input.SymbolType).
		SetAmount(decimal.NewFromInt(0)).
		SetProfileID(userData.ProfileId).
		SetValue(decimal.NewFromInt(1)).  // FIXME: do not hard code
		SetFxRate(decimal.NewFromInt(1)). // FIXME: do not hard code
		SetBalance(decimal.NewFromInt(0)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	createTransactionInput := ent.CreateTransactionInput{
		Amount:    input.Amount,
		Note:      pointer.To("Initial account setup"),
		ProfileID: userData.ProfileId,
		AccountID: account.ID,
	}
	_, err = r.CreateTransaction(ctx, createTransactionInput)
	if err != nil {
		return nil, err
	}

	return account, err
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, id string, input ent.UpdateAccountInput) (*ent.Account, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input ent.CreateTransactionInput) (*ent.Transaction, error) {
	client := ent.FromContext(ctx)
	userData, err := auth.GetAuthDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := client.Account.Query().Where(account.ID(input.AccountID), account.HasProfileWith(profile.ID(userData.ProfileId))).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("account not found: %w", err)
	}

	balance := account.FxRate.Mul(account.Value).Mul(input.Amount)

	transaction, err := client.Transaction.Create().SetInput(input).SetBalance(balance).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create transaction: %w", err)
	}

	_, err = account.Update().AddAmount(input.Amount).AddBalance(balance).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update account balance: %w", err)
	}

	return transaction, nil
}

// UpdateTransaction is the resolver for the updateTransaction field.
func (r *mutationResolver) UpdateTransaction(ctx context.Context, id string, input ent.UpdateTransactionInput) (*ent.Transaction, error) {
	panic(fmt.Errorf("not implemented: UpdateTransaction - updateTransaction"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*ent.User, error) {
	authData, err := auth.GetUserDataFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return r.client.User.Query().Where(user.ID(authData.UserId)).Only(ctx)
}

// Currencies is the resolver for the currencies field.
func (r *queryResolver) Currencies(ctx context.Context) ([]*Currency, error) {
	currencies := lo.Map(lo.Values(constants.Currencies),
		func(currency constants.Currency, _ int) *Currency {
			return &Currency{
				Code: currency.Code, Locale: currency.Locale,
			}
		})

	return currencies, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
