/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as ProtectedSetupRouteImport } from './routes/_protected/setup'
import { Route as ProtectedProfileRouteRouteImport } from './routes/_protected/_profile/route'
import { Route as ProtectedProfileTransactionsRouteImport } from './routes/_protected/_profile/transactions'
import { Route as ProtectedProfileHomeRouteImport } from './routes/_protected/_profile/home'
import { Route as ProtectedProfileAccountsRouteImport } from './routes/_protected/_profile/accounts'
import { Route as ProtectedProfileSettingsGeneralRouteImport } from './routes/_protected/_profile/settings/general'
import { Route as ProtectedProfileSettingsCurrencyRouteImport } from './routes/_protected/_profile/settings/currency'
import { Route as ProtectedProfileSettingsCategoriesRouteImport } from './routes/_protected/_profile/settings/categories'

const PublicIndexLazyRouteImport = createFileRoute('/_public/')()
const PublicWhyLazyRouteImport = createFileRoute('/_public/why')()
const PublicStackLazyRouteImport = createFileRoute('/_public/stack')()
const PublicSignupLazyRouteImport = createFileRoute('/_public/signup')()
const PublicPricingLazyRouteImport = createFileRoute('/_public/pricing')()
const PublicLoginLazyRouteImport = createFileRoute('/_public/login')()
const PublicFeaturesLazyRouteImport = createFileRoute('/_public/features')()

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexLazyRoute = PublicIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() => import('./routes/_public/index.lazy').then((d) => d.Route))
const PublicWhyLazyRoute = PublicWhyLazyRouteImport.update({
  id: '/why',
  path: '/why',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() => import('./routes/_public/why.lazy').then((d) => d.Route))
const PublicStackLazyRoute = PublicStackLazyRouteImport.update({
  id: '/stack',
  path: '/stack',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() => import('./routes/_public/stack.lazy').then((d) => d.Route))
const PublicSignupLazyRoute = PublicSignupLazyRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() =>
  import('./routes/_public/signup.lazy').then((d) => d.Route),
)
const PublicPricingLazyRoute = PublicPricingLazyRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() =>
  import('./routes/_public/pricing.lazy').then((d) => d.Route),
)
const PublicLoginLazyRoute = PublicLoginLazyRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() => import('./routes/_public/login.lazy').then((d) => d.Route))
const PublicFeaturesLazyRoute = PublicFeaturesLazyRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() =>
  import('./routes/_public/features.lazy').then((d) => d.Route),
)
const ProtectedSetupRoute = ProtectedSetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedProfileRouteRoute = ProtectedProfileRouteRouteImport.update({
  id: '/_profile',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedProfileTransactionsRoute =
  ProtectedProfileTransactionsRouteImport.update({
    id: '/transactions',
    path: '/transactions',
    getParentRoute: () => ProtectedProfileRouteRoute,
  } as any)
const ProtectedProfileHomeRoute = ProtectedProfileHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => ProtectedProfileRouteRoute,
} as any)
const ProtectedProfileAccountsRoute =
  ProtectedProfileAccountsRouteImport.update({
    id: '/accounts',
    path: '/accounts',
    getParentRoute: () => ProtectedProfileRouteRoute,
  } as any)
const ProtectedProfileSettingsGeneralRoute =
  ProtectedProfileSettingsGeneralRouteImport.update({
    id: '/settings/general',
    path: '/settings/general',
    getParentRoute: () => ProtectedProfileRouteRoute,
  } as any)
const ProtectedProfileSettingsCurrencyRoute =
  ProtectedProfileSettingsCurrencyRouteImport.update({
    id: '/settings/currency',
    path: '/settings/currency',
    getParentRoute: () => ProtectedProfileRouteRoute,
  } as any)
const ProtectedProfileSettingsCategoriesRoute =
  ProtectedProfileSettingsCategoriesRouteImport.update({
    id: '/settings/categories',
    path: '/settings/categories',
    getParentRoute: () => ProtectedProfileRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/setup': typeof ProtectedSetupRoute
  '/features': typeof PublicFeaturesLazyRoute
  '/login': typeof PublicLoginLazyRoute
  '/pricing': typeof PublicPricingLazyRoute
  '/signup': typeof PublicSignupLazyRoute
  '/stack': typeof PublicStackLazyRoute
  '/why': typeof PublicWhyLazyRoute
  '/': typeof PublicIndexLazyRoute
  '/accounts': typeof ProtectedProfileAccountsRoute
  '/home': typeof ProtectedProfileHomeRoute
  '/transactions': typeof ProtectedProfileTransactionsRoute
  '/settings/categories': typeof ProtectedProfileSettingsCategoriesRoute
  '/settings/currency': typeof ProtectedProfileSettingsCurrencyRoute
  '/settings/general': typeof ProtectedProfileSettingsGeneralRoute
}
export interface FileRoutesByTo {
  '/setup': typeof ProtectedSetupRoute
  '/features': typeof PublicFeaturesLazyRoute
  '/login': typeof PublicLoginLazyRoute
  '/pricing': typeof PublicPricingLazyRoute
  '/signup': typeof PublicSignupLazyRoute
  '/stack': typeof PublicStackLazyRoute
  '/why': typeof PublicWhyLazyRoute
  '/': typeof PublicIndexLazyRoute
  '/accounts': typeof ProtectedProfileAccountsRoute
  '/home': typeof ProtectedProfileHomeRoute
  '/transactions': typeof ProtectedProfileTransactionsRoute
  '/settings/categories': typeof ProtectedProfileSettingsCategoriesRoute
  '/settings/currency': typeof ProtectedProfileSettingsCurrencyRoute
  '/settings/general': typeof ProtectedProfileSettingsGeneralRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_protected/_profile': typeof ProtectedProfileRouteRouteWithChildren
  '/_protected/setup': typeof ProtectedSetupRoute
  '/_public/features': typeof PublicFeaturesLazyRoute
  '/_public/login': typeof PublicLoginLazyRoute
  '/_public/pricing': typeof PublicPricingLazyRoute
  '/_public/signup': typeof PublicSignupLazyRoute
  '/_public/stack': typeof PublicStackLazyRoute
  '/_public/why': typeof PublicWhyLazyRoute
  '/_public/': typeof PublicIndexLazyRoute
  '/_protected/_profile/accounts': typeof ProtectedProfileAccountsRoute
  '/_protected/_profile/home': typeof ProtectedProfileHomeRoute
  '/_protected/_profile/transactions': typeof ProtectedProfileTransactionsRoute
  '/_protected/_profile/settings/categories': typeof ProtectedProfileSettingsCategoriesRoute
  '/_protected/_profile/settings/currency': typeof ProtectedProfileSettingsCurrencyRoute
  '/_protected/_profile/settings/general': typeof ProtectedProfileSettingsGeneralRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/setup'
    | '/features'
    | '/login'
    | '/pricing'
    | '/signup'
    | '/stack'
    | '/why'
    | '/'
    | '/accounts'
    | '/home'
    | '/transactions'
    | '/settings/categories'
    | '/settings/currency'
    | '/settings/general'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/setup'
    | '/features'
    | '/login'
    | '/pricing'
    | '/signup'
    | '/stack'
    | '/why'
    | '/'
    | '/accounts'
    | '/home'
    | '/transactions'
    | '/settings/categories'
    | '/settings/currency'
    | '/settings/general'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/_protected/_profile'
    | '/_protected/setup'
    | '/_public/features'
    | '/_public/login'
    | '/_public/pricing'
    | '/_public/signup'
    | '/_public/stack'
    | '/_public/why'
    | '/_public/'
    | '/_protected/_profile/accounts'
    | '/_protected/_profile/home'
    | '/_protected/_profile/transactions'
    | '/_protected/_profile/settings/categories'
    | '/_protected/_profile/settings/currency'
    | '/_protected/_profile/settings/general'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/why': {
      id: '/_public/why'
      path: '/why'
      fullPath: '/why'
      preLoaderRoute: typeof PublicWhyLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/stack': {
      id: '/_public/stack'
      path: '/stack'
      fullPath: '/stack'
      preLoaderRoute: typeof PublicStackLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/signup': {
      id: '/_public/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof PublicSignupLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/pricing': {
      id: '/_public/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PublicPricingLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/features': {
      id: '/_public/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof PublicFeaturesLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_protected/setup': {
      id: '/_protected/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof ProtectedSetupRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/_profile': {
      id: '/_protected/_profile'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedProfileRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/_profile/transactions': {
      id: '/_protected/_profile/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof ProtectedProfileTransactionsRouteImport
      parentRoute: typeof ProtectedProfileRouteRoute
    }
    '/_protected/_profile/home': {
      id: '/_protected/_profile/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof ProtectedProfileHomeRouteImport
      parentRoute: typeof ProtectedProfileRouteRoute
    }
    '/_protected/_profile/accounts': {
      id: '/_protected/_profile/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof ProtectedProfileAccountsRouteImport
      parentRoute: typeof ProtectedProfileRouteRoute
    }
    '/_protected/_profile/settings/general': {
      id: '/_protected/_profile/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof ProtectedProfileSettingsGeneralRouteImport
      parentRoute: typeof ProtectedProfileRouteRoute
    }
    '/_protected/_profile/settings/currency': {
      id: '/_protected/_profile/settings/currency'
      path: '/settings/currency'
      fullPath: '/settings/currency'
      preLoaderRoute: typeof ProtectedProfileSettingsCurrencyRouteImport
      parentRoute: typeof ProtectedProfileRouteRoute
    }
    '/_protected/_profile/settings/categories': {
      id: '/_protected/_profile/settings/categories'
      path: '/settings/categories'
      fullPath: '/settings/categories'
      preLoaderRoute: typeof ProtectedProfileSettingsCategoriesRouteImport
      parentRoute: typeof ProtectedProfileRouteRoute
    }
  }
}

interface ProtectedProfileRouteRouteChildren {
  ProtectedProfileAccountsRoute: typeof ProtectedProfileAccountsRoute
  ProtectedProfileHomeRoute: typeof ProtectedProfileHomeRoute
  ProtectedProfileTransactionsRoute: typeof ProtectedProfileTransactionsRoute
  ProtectedProfileSettingsCategoriesRoute: typeof ProtectedProfileSettingsCategoriesRoute
  ProtectedProfileSettingsCurrencyRoute: typeof ProtectedProfileSettingsCurrencyRoute
  ProtectedProfileSettingsGeneralRoute: typeof ProtectedProfileSettingsGeneralRoute
}

const ProtectedProfileRouteRouteChildren: ProtectedProfileRouteRouteChildren = {
  ProtectedProfileAccountsRoute: ProtectedProfileAccountsRoute,
  ProtectedProfileHomeRoute: ProtectedProfileHomeRoute,
  ProtectedProfileTransactionsRoute: ProtectedProfileTransactionsRoute,
  ProtectedProfileSettingsCategoriesRoute:
    ProtectedProfileSettingsCategoriesRoute,
  ProtectedProfileSettingsCurrencyRoute: ProtectedProfileSettingsCurrencyRoute,
  ProtectedProfileSettingsGeneralRoute: ProtectedProfileSettingsGeneralRoute,
}

const ProtectedProfileRouteRouteWithChildren =
  ProtectedProfileRouteRoute._addFileChildren(
    ProtectedProfileRouteRouteChildren,
  )

interface ProtectedRouteRouteChildren {
  ProtectedProfileRouteRoute: typeof ProtectedProfileRouteRouteWithChildren
  ProtectedSetupRoute: typeof ProtectedSetupRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedProfileRouteRoute: ProtectedProfileRouteRouteWithChildren,
  ProtectedSetupRoute: ProtectedSetupRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicFeaturesLazyRoute: typeof PublicFeaturesLazyRoute
  PublicLoginLazyRoute: typeof PublicLoginLazyRoute
  PublicPricingLazyRoute: typeof PublicPricingLazyRoute
  PublicSignupLazyRoute: typeof PublicSignupLazyRoute
  PublicStackLazyRoute: typeof PublicStackLazyRoute
  PublicWhyLazyRoute: typeof PublicWhyLazyRoute
  PublicIndexLazyRoute: typeof PublicIndexLazyRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicFeaturesLazyRoute: PublicFeaturesLazyRoute,
  PublicLoginLazyRoute: PublicLoginLazyRoute,
  PublicPricingLazyRoute: PublicPricingLazyRoute,
  PublicSignupLazyRoute: PublicSignupLazyRoute,
  PublicStackLazyRoute: PublicStackLazyRoute,
  PublicWhyLazyRoute: PublicWhyLazyRoute,
  PublicIndexLazyRoute: PublicIndexLazyRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
