// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file fijoy/v1/transaction.proto (package fijoy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message fijoy.v1.Transaction
 */
export class Transaction extends Message<Transaction> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string profile_id = 2;
   */
  profileId = "";

  /**
   * @generated from field: string account_id = 3;
   */
  accountId = "";

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  /**
   * @generated from field: string amount_delta = 5;
   */
  amountDelta = "";

  /**
   * @generated from field: string value = 6;
   */
  value = "";

  /**
   * @generated from field: string fx_rate = 7;
   */
  fxRate = "";

  /**
   * @generated from field: string balance = 8;
   */
  balance = "";

  /**
   * @generated from field: string balance_delta = 9;
   */
  balanceDelta = "";

  /**
   * @generated from field: string note = 10;
   */
  note = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 11;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 12;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Transaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount_delta", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "fx_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "balance_delta", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_at", kind: "message", T: Timestamp },
    { no: 12, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction {
    return new Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean {
    return proto3.util.equals(Transaction, a, b);
  }
}

/**
 * @generated from message fijoy.v1.Transactions
 */
export class Transactions extends Message<Transactions> {
  /**
   * @generated from field: repeated fijoy.v1.Transaction transactions = 1;
   */
  transactions: Transaction[] = [];

  constructor(data?: PartialMessage<Transactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Transactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactions", kind: "message", T: Transaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transactions {
    return new Transactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transactions {
    return new Transactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transactions {
    return new Transactions().fromJsonString(jsonString, options);
  }

  static equals(a: Transactions | PlainMessage<Transactions> | undefined, b: Transactions | PlainMessage<Transactions> | undefined): boolean {
    return proto3.util.equals(Transactions, a, b);
  }
}

/**
 * @generated from message fijoy.v1.CreateTransactionRequest
 */
export class CreateTransactionRequest extends Message<CreateTransactionRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string amount_delta = 2;
   */
  amountDelta = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * @generated from field: string fx_rate = 4;
   */
  fxRate = "";

  /**
   * @generated from field: string note = 5;
   */
  note = "";

  constructor(data?: PartialMessage<CreateTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.CreateTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount_delta", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fx_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTransactionRequest | PlainMessage<CreateTransactionRequest> | undefined, b: CreateTransactionRequest | PlainMessage<CreateTransactionRequest> | undefined): boolean {
    return proto3.util.equals(CreateTransactionRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.CreateTransactionsRequest
 */
export class CreateTransactionsRequest extends Message<CreateTransactionsRequest> {
  /**
   * @generated from field: repeated fijoy.v1.CreateTransactionRequest transactions = 1;
   */
  transactions: CreateTransactionRequest[] = [];

  constructor(data?: PartialMessage<CreateTransactionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.CreateTransactionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactions", kind: "message", T: CreateTransactionRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTransactionsRequest {
    return new CreateTransactionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTransactionsRequest {
    return new CreateTransactionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTransactionsRequest {
    return new CreateTransactionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTransactionsRequest | PlainMessage<CreateTransactionsRequest> | undefined, b: CreateTransactionsRequest | PlainMessage<CreateTransactionsRequest> | undefined): boolean {
    return proto3.util.equals(CreateTransactionsRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.GetTransactionByIdRequest
 */
export class GetTransactionByIdRequest extends Message<GetTransactionByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetTransactionByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.GetTransactionByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionByIdRequest {
    return new GetTransactionByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionByIdRequest {
    return new GetTransactionByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionByIdRequest {
    return new GetTransactionByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionByIdRequest | PlainMessage<GetTransactionByIdRequest> | undefined, b: GetTransactionByIdRequest | PlainMessage<GetTransactionByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetTransactionByIdRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.GetTransactionsByAccountIdRequest
 */
export class GetTransactionsByAccountIdRequest extends Message<GetTransactionsByAccountIdRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetTransactionsByAccountIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.GetTransactionsByAccountIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionsByAccountIdRequest {
    return new GetTransactionsByAccountIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionsByAccountIdRequest {
    return new GetTransactionsByAccountIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionsByAccountIdRequest {
    return new GetTransactionsByAccountIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionsByAccountIdRequest | PlainMessage<GetTransactionsByAccountIdRequest> | undefined, b: GetTransactionsByAccountIdRequest | PlainMessage<GetTransactionsByAccountIdRequest> | undefined): boolean {
    return proto3.util.equals(GetTransactionsByAccountIdRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.DeleteTransactionByIdRequest
 */
export class DeleteTransactionByIdRequest extends Message<DeleteTransactionByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteTransactionByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.DeleteTransactionByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTransactionByIdRequest {
    return new DeleteTransactionByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTransactionByIdRequest {
    return new DeleteTransactionByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTransactionByIdRequest {
    return new DeleteTransactionByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTransactionByIdRequest | PlainMessage<DeleteTransactionByIdRequest> | undefined, b: DeleteTransactionByIdRequest | PlainMessage<DeleteTransactionByIdRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTransactionByIdRequest, a, b);
  }
}

