// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file fijoy/v1/account.proto (package fijoy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum fijoy.v1.AccountType
 */
export enum AccountType {
  /**
   * @generated from enum value: ACCOUNT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACCOUNT_TYPE_LIQUIDITY = 1;
   */
  LIQUIDITY = 1,

  /**
   * @generated from enum value: ACCOUNT_TYPE_INVESTMENT = 2;
   */
  INVESTMENT = 2,

  /**
   * @generated from enum value: ACCOUNT_TYPE_PROPERTY = 3;
   */
  PROPERTY = 3,

  /**
   * @generated from enum value: ACCOUNT_TYPE_RECEIVABLE = 4;
   */
  RECEIVABLE = 4,

  /**
   * @generated from enum value: ACCOUNT_TYPE_LIABILITY = 5;
   */
  LIABILITY = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(AccountType)
proto3.util.setEnumType(AccountType, "fijoy.v1.AccountType", [
  { no: 0, name: "ACCOUNT_TYPE_UNSPECIFIED" },
  { no: 1, name: "ACCOUNT_TYPE_LIQUIDITY" },
  { no: 2, name: "ACCOUNT_TYPE_INVESTMENT" },
  { no: 3, name: "ACCOUNT_TYPE_PROPERTY" },
  { no: 4, name: "ACCOUNT_TYPE_RECEIVABLE" },
  { no: 5, name: "ACCOUNT_TYPE_LIABILITY" },
]);

/**
 * @generated from enum fijoy.v1.AccountSymbolType
 */
export enum AccountSymbolType {
  /**
   * @generated from enum value: ACCOUNT_SYMBOL_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACCOUNT_SYMBOL_TYPE_CURRENCY = 1;
   */
  CURRENCY = 1,

  /**
   * @generated from enum value: ACCOUNT_SYMBOL_TYPE_CRYPTO = 2;
   */
  CRYPTO = 2,

  /**
   * @generated from enum value: ACCOUNT_SYMBOL_TYPE_STOCK = 3;
   */
  STOCK = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AccountSymbolType)
proto3.util.setEnumType(AccountSymbolType, "fijoy.v1.AccountSymbolType", [
  { no: 0, name: "ACCOUNT_SYMBOL_TYPE_UNSPECIFIED" },
  { no: 1, name: "ACCOUNT_SYMBOL_TYPE_CURRENCY" },
  { no: 2, name: "ACCOUNT_SYMBOL_TYPE_CRYPTO" },
  { no: 3, name: "ACCOUNT_SYMBOL_TYPE_STOCK" },
]);

/**
 * @generated from message fijoy.v1.Account
 */
export class Account extends Message<Account> {
  /**
   * the standard stuff
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string profile_id = 2;
   */
  profileId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: fijoy.v1.AccountType account_type = 4;
   */
  accountType = AccountType.UNSPECIFIED;

  /**
   * @generated from field: bool archived = 5;
   */
  archived = false;

  /**
   * @generated from field: bool include_in_net_worth = 6;
   */
  includeInNetWorth = false;

  /**
   * @generated from field: string symbol = 7;
   */
  symbol = "";

  /**
   * @generated from field: fijoy.v1.AccountSymbolType symbol_type = 8;
   */
  symbolType = AccountSymbolType.UNSPECIFIED;

  /**
   * @generated from field: string amount = 9;
   */
  amount = "";

  /**
   * @generated from field: string value = 10;
   */
  value = "";

  /**
   * @generated from field: string fx_rate = 11;
   */
  fxRate = "";

  /**
   * @generated from field: string balance = 12;
   */
  balance = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 13;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 14;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 5, name: "archived", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "include_in_net_worth", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "symbol_type", kind: "enum", T: proto3.getEnumType(AccountSymbolType) },
    { no: 9, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "fx_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "created_at", kind: "message", T: Timestamp },
    { no: 14, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message fijoy.v1.AccountList
 */
export class AccountList extends Message<AccountList> {
  /**
   * @generated from field: repeated fijoy.v1.Account items = 1;
   */
  items: Account[] = [];

  constructor(data?: PartialMessage<AccountList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.AccountList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountList {
    return new AccountList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountList {
    return new AccountList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountList {
    return new AccountList().fromJsonString(jsonString, options);
  }

  static equals(a: AccountList | PlainMessage<AccountList> | undefined, b: AccountList | PlainMessage<AccountList> | undefined): boolean {
    return proto3.util.equals(AccountList, a, b);
  }
}

/**
 * @generated from message fijoy.v1.CreateAccountRequest
 */
export class CreateAccountRequest extends Message<CreateAccountRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: fijoy.v1.AccountType account_type = 2;
   */
  accountType = AccountType.UNSPECIFIED;

  /**
   * @generated from field: bool include_in_net_worth = 3;
   */
  includeInNetWorth = false;

  /**
   * @generated from field: string symbol = 4;
   */
  symbol = "";

  /**
   * @generated from field: fijoy.v1.AccountSymbolType symbol_type = 5;
   */
  symbolType = AccountSymbolType.UNSPECIFIED;

  /**
   * @generated from field: string amount = 6;
   */
  amount = "";

  constructor(data?: PartialMessage<CreateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.CreateAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 3, name: "include_in_net_worth", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "symbol_type", kind: "enum", T: proto3.getEnumType(AccountSymbolType) },
    { no: 6, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined, b: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined): boolean {
    return proto3.util.equals(CreateAccountRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.UpdateAccountRequest
 */
export class UpdateAccountRequest extends Message<UpdateAccountRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional bool archived = 3;
   */
  archived?: boolean;

  /**
   * @generated from field: optional bool include_in_net_worth = 4;
   */
  includeInNetWorth?: boolean;

  constructor(data?: PartialMessage<UpdateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.UpdateAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "archived", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "include_in_net_worth", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountRequest | PlainMessage<UpdateAccountRequest> | undefined, b: UpdateAccountRequest | PlainMessage<UpdateAccountRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccountRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.GetAccountByIdRequest
 */
export class GetAccountByIdRequest extends Message<GetAccountByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetAccountByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.GetAccountByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountByIdRequest {
    return new GetAccountByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountByIdRequest | PlainMessage<GetAccountByIdRequest> | undefined, b: GetAccountByIdRequest | PlainMessage<GetAccountByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountByIdRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.DeleteAccountByIdRequest
 */
export class DeleteAccountByIdRequest extends Message<DeleteAccountByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteAccountByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.DeleteAccountByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountByIdRequest {
    return new DeleteAccountByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountByIdRequest {
    return new DeleteAccountByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountByIdRequest {
    return new DeleteAccountByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountByIdRequest | PlainMessage<DeleteAccountByIdRequest> | undefined, b: DeleteAccountByIdRequest | PlainMessage<DeleteAccountByIdRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccountByIdRequest, a, b);
  }
}

