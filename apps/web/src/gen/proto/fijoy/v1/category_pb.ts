// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file fijoy/v1/category.proto (package fijoy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TransactionType } from "./transaction_pb.js";

/**
 * @generated from message fijoy.v1.Category
 */
export class Category extends Message<Category> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string position = 4;
   */
  position = "";

  /**
   * @generated from field: fijoy.v1.TransactionType category_type = 5;
   */
  categoryType = TransactionType.UNSPECIFIED;

  constructor(data?: PartialMessage<Category>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Category";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "category_type", kind: "enum", T: proto3.getEnumType(TransactionType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Category {
    return new Category().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Category {
    return new Category().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Category {
    return new Category().fromJsonString(jsonString, options);
  }

  static equals(a: Category | PlainMessage<Category> | undefined, b: Category | PlainMessage<Category> | undefined): boolean {
    return proto3.util.equals(Category, a, b);
  }
}

/**
 * @generated from message fijoy.v1.Categorys
 */
export class Categorys extends Message<Categorys> {
  /**
   * @generated from field: repeated fijoy.v1.Category categories = 1;
   */
  categories: Category[] = [];

  constructor(data?: PartialMessage<Categorys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Categorys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "message", T: Category, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Categorys {
    return new Categorys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Categorys {
    return new Categorys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Categorys {
    return new Categorys().fromJsonString(jsonString, options);
  }

  static equals(a: Categorys | PlainMessage<Categorys> | undefined, b: Categorys | PlainMessage<Categorys> | undefined): boolean {
    return proto3.util.equals(Categorys, a, b);
  }
}

/**
 * @generated from message fijoy.v1.CreateCategoryRequest
 */
export class CreateCategoryRequest extends Message<CreateCategoryRequest> {
  /**
   * @generated from field: map<string, fijoy.v1.TransactionType> categories = 1;
   */
  categories: { [key: string]: TransactionType } = {};

  constructor(data?: PartialMessage<CreateCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.CreateCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(TransactionType)} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCategoryRequest | PlainMessage<CreateCategoryRequest> | undefined, b: CreateCategoryRequest | PlainMessage<CreateCategoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateCategoryRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.UpdateCategoryByIdRequest
 */
export class UpdateCategoryByIdRequest extends Message<UpdateCategoryByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateCategoryByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.UpdateCategoryByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCategoryByIdRequest {
    return new UpdateCategoryByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCategoryByIdRequest {
    return new UpdateCategoryByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCategoryByIdRequest {
    return new UpdateCategoryByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCategoryByIdRequest | PlainMessage<UpdateCategoryByIdRequest> | undefined, b: UpdateCategoryByIdRequest | PlainMessage<UpdateCategoryByIdRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCategoryByIdRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.DeleteCategoryByIdRequest
 */
export class DeleteCategoryByIdRequest extends Message<DeleteCategoryByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteCategoryByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.DeleteCategoryByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCategoryByIdRequest {
    return new DeleteCategoryByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCategoryByIdRequest {
    return new DeleteCategoryByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCategoryByIdRequest {
    return new DeleteCategoryByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCategoryByIdRequest | PlainMessage<DeleteCategoryByIdRequest> | undefined, b: DeleteCategoryByIdRequest | PlainMessage<DeleteCategoryByIdRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCategoryByIdRequest, a, b);
  }
}

