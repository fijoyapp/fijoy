// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file fijoy/v1/snapshot.proto (package fijoy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Date } from "../../google/type/date_pb.js";

/**
 * @generated from message fijoy.v1.Snapshot
 */
export class Snapshot extends Message<Snapshot> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string profile_id = 2;
   */
  profileId = "";

  /**
   * @generated from field: google.type.Date date = 3;
   */
  date?: Date;

  /**
   * @generated from field: string liquidity = 4;
   */
  liquidity = "";

  /**
   * @generated from field: string investment = 5;
   */
  investment = "";

  /**
   * @generated from field: string property = 6;
   */
  property = "";

  /**
   * @generated from field: string receivable = 7;
   */
  receivable = "";

  /**
   * @generated from field: string liability = 8;
   */
  liability = "";

  constructor(data?: PartialMessage<Snapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Snapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "date", kind: "message", T: Date },
    { no: 4, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "investment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "property", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "receivable", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "liability", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snapshot {
    return new Snapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJsonString(jsonString, options);
  }

  static equals(a: Snapshot | PlainMessage<Snapshot> | undefined, b: Snapshot | PlainMessage<Snapshot> | undefined): boolean {
    return proto3.util.equals(Snapshot, a, b);
  }
}

/**
 * @generated from message fijoy.v1.Snapshots
 */
export class Snapshots extends Message<Snapshots> {
  /**
   * @generated from field: repeated fijoy.v1.Snapshot snapshots = 1;
   */
  snapshots: Snapshot[] = [];

  constructor(data?: PartialMessage<Snapshots>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.Snapshots";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshots", kind: "message", T: Snapshot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snapshots {
    return new Snapshots().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snapshots {
    return new Snapshots().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snapshots {
    return new Snapshots().fromJsonString(jsonString, options);
  }

  static equals(a: Snapshots | PlainMessage<Snapshots> | undefined, b: Snapshots | PlainMessage<Snapshots> | undefined): boolean {
    return proto3.util.equals(Snapshots, a, b);
  }
}

/**
 * @generated from message fijoy.v1.GetSnapshotRequest
 */
export class GetSnapshotRequest extends Message<GetSnapshotRequest> {
  /**
   * @generated from field: google.type.Date date = 1;
   */
  date?: Date;

  constructor(data?: PartialMessage<GetSnapshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.GetSnapshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSnapshotRequest {
    return new GetSnapshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSnapshotRequest {
    return new GetSnapshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSnapshotRequest {
    return new GetSnapshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSnapshotRequest | PlainMessage<GetSnapshotRequest> | undefined, b: GetSnapshotRequest | PlainMessage<GetSnapshotRequest> | undefined): boolean {
    return proto3.util.equals(GetSnapshotRequest, a, b);
  }
}

/**
 * @generated from message fijoy.v1.GetSnapshotsRequest
 */
export class GetSnapshotsRequest extends Message<GetSnapshotsRequest> {
  /**
   * @generated from field: google.type.Date from_date = 1;
   */
  fromDate?: Date;

  /**
   * inclusive
   *
   * @generated from field: google.type.Date to_date = 2;
   */
  toDate?: Date;

  constructor(data?: PartialMessage<GetSnapshotsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fijoy.v1.GetSnapshotsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_date", kind: "message", T: Date },
    { no: 2, name: "to_date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSnapshotsRequest {
    return new GetSnapshotsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSnapshotsRequest {
    return new GetSnapshotsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSnapshotsRequest {
    return new GetSnapshotsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSnapshotsRequest | PlainMessage<GetSnapshotsRequest> | undefined, b: GetSnapshotsRequest | PlainMessage<GetSnapshotsRequest> | undefined): boolean {
    return proto3.util.equals(GetSnapshotsRequest, a, b);
  }
}

